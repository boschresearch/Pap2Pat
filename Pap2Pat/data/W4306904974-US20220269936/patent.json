{
    "id": "US20220269936",
    "authors": [
        "Yada Zhu",
        "Yang Zhang",
        "Pin-Yu Chen",
        "Rahul Mazumder",
        "Shibal Ibrahim",
        "Wenyu Chen"
    ],
    "title": "KNOWLEDGE GRAPHS IN MACHINE LEARNING DECISION OPTIMIZATION",
    "date": "2021-02-24 00:00:00",
    "abstract": "Training a machine learning model can include receiving time series data. A knowledge graph structure can be received including nodes and edges, the nodes representing entities associated with the time series data, the edges representing relationships between the nodes connected by the edges. A machine learning model can be structured to forecast a prediction using the time series data. The machine learning model can be structured to integrate the knowledge graph structure as an error term in the machine learning model. The machine learning model can be trained to forecast the prediction based on the time series data and the knowledge graph structure. The error term representing the knowledge graph structure can be regularized for sparsity during training.",
    "sections": [
        {
            "title": "DESCRIPTION",
            "paragraphs": [],
            "subsections": [
                {
                    "title": "BACKGROUND",
                    "paragraphs": [
                        "The present application relates generally to computers and computer applications, and more particularly to machine learning and embedding knowledge graph data in machine learning.",
                        "Time series analysis, for example, time series machine learning can be used for predictions. For instance, machine learning algorithms can be trained using time series data to learn to forecast predictions. Knowledge graphs reflect relationships among different entities, for example, various connectivity between entities. Challenges exist in integrating knowledge graphs in machine learning, for example, considering, that knowledge graphs and financial time series are data in different format and co-evolving, can have noisy relationships, scalability of a number of entities and that there can be not enough data samples in time series.",
                        "By way of example, financial time series analysis can provide for optimizing investment decisions. Predicting such decisions can be a challenging problem as financial systems are usually volatile and influenced by many factors. In finance, a knowledge graph explores relationships among different entities (e.g., companies, people, news events and key metadata). Such relationships (e.g., based on industry classification, supply-chain links, products and competitors), can help investors infer the correlation of asset values across the capital market and financial value chain. For example, when steel price increases, the earning and stock price of the entire auto mobile industry is expected to decrease. Inventors in this disclosure have recognized that expanding the use of knowledge graphs to alternative factors for financial forecasting can pave the way for robust and rapid investment decision."
                    ],
                    "subsections": [],
                    "outline_long": [
                        "introduce time series analysis",
                        "motivate knowledge graphs",
                        "highlight challenges"
                    ],
                    "num_characters": 1728,
                    "outline_medium": [
                        "introduce machine learning and knowledge graph integration"
                    ],
                    "outline_short": [
                        "motivate machine learning"
                    ]
                },
                {
                    "title": "BRIEF SUMMARY",
                    "paragraphs": [
                        "The summary of the disclosure is given to aid understanding of a computer system, computer architectural structure, processor, and method of machine learning described herein, and not with an intent to limit the disclosure or the invention. It should be understood that various aspects and features of the disclosure may advantageously be used separately in some instances, or in combination with other aspects and features of the disclosure in other instances. Accordingly, variations and modifications may be made to the computer system, the architectural structure, processor, register files, and/or their method of operation to achieve different effects.",
                        "A computer-implemented method, in one aspect, can include receiving a knowledge graph structure including nodes and edges, the nodes representing entities associated with the time series data, the edges representing relationships between the nodes connected by the edges. The method can also include structuring a machine learning model to forecast a prediction using the time series data, the machine learning model structured to integrate the knowledge graph structure as an error term in the machine learning model. The method can also include training the machine learning model to forecast the prediction based on the time series data and the knowledge graph structure, the training including regularizing the error term for sparsity.",
                        "In another aspect, a method can include receiving a knowledge graph structure including nodes and edges, the nodes representing entities associated with the time series data, the edges representing relationships between the nodes connected by the edges. The method can also include structuring a machine learning model to forecast a prediction using the time series data, the machine learning model structured to integrate the knowledge graph structure as an error term in the machine learning model. The method can also include training the machine learning model to forecast the prediction based on the time series data and the knowledge graph structure, the training including regularizing the error term for sparsity. The machine learning model can include a neural network.",
                        "In another aspect, a method can include receiving a knowledge graph structure including nodes and edges, the nodes representing entities associated with the time series data, the edges representing relationships between the nodes connected by the edges. The method can also include structuring a machine learning model to forecast a prediction using the time series data, the machine learning model structured to integrate the knowledge graph structure as an error term in the machine learning model. The method can also include training the machine learning model to forecast the prediction based on the time series data and the knowledge graph structure, the training including regularizing the error term for sparsity. The machine learning model can include a graph convolutional network.",
                        "In another aspect, a method can include receiving a knowledge graph structure including nodes and edges, the nodes representing entities associated with the time series data, the edges representing relationships between the nodes connected by the edges. The method can also include structuring a machine learning model to forecast a prediction using the time series data, the machine learning model structured to integrate the knowledge graph structure as an error term in the machine learning model. The method can also include training the machine learning model to forecast the prediction based on the time series data and the knowledge graph structure, the training including regularizing the error term for sparsity. The knowledge graph structure can be transformed to an inverse covariance matrix of a Gaussian error to be expressed as the error term in the machine learning model.",
                        "In another aspect, a method can include receiving a knowledge graph structure including nodes and edges, the nodes representing entities associated with the time series data, the edges representing relationships between the nodes connected by the edges. The method can also include structuring a machine learning model to forecast a prediction using the time series data, the machine learning model structured to integrate the knowledge graph structure as an error term in the machine learning model. The method can also include training the machine learning model to forecast the prediction based on the time series data and the knowledge graph structure, the training including regularizing the error term for sparsity. The knowledge graph structure can be transformed to an inverse covariance matrix of a Gaussian error to be expressed as the error term in the machine learning model. The training jointly learns a prediction function of the machine learning model and the knowledge graph structure integrated as the error term represented by the inverse covariance matrix of the Gaussian error.",
                        "In another aspect, a method can include receiving a knowledge graph structure including nodes and edges, the nodes representing entities associated with the time series data, the edges representing relationships between the nodes connected by the edges. The method can also include structuring a machine learning model to forecast a prediction using the time series data, the machine learning model structured to integrate the knowledge graph structure as an error term in the machine learning model. The method can also include training the machine learning model to forecast the prediction based on the time series data and the knowledge graph structure, the training including regularizing the error term for sparsity. The regularizing can include using a soft mask including a real value.",
                        "In another aspect, a method can include receiving a knowledge graph structure including nodes and edges, the nodes representing entities associated with the time series data, the edges representing relationships between the nodes connected by the edges. The method can also include structuring a machine learning model to forecast a prediction using the time series data, the machine learning model structured to integrate the knowledge graph structure as an error term in the machine learning model. The method can also include training the machine learning model to forecast the prediction based on the time series data and the knowledge graph structure, the training including regularizing the error term for sparsity. The regularizing can include using a hard mask including a binary value.",
                        "In another aspect, a method can include receiving a knowledge graph structure including nodes and edges, the nodes representing entities associated with the time series data, the edges representing relationships between the nodes connected by the edges. The method can also include structuring a machine learning model to forecast a prediction using the time series data, the machine learning model structured to integrate the knowledge graph structure as an error term in the machine learning model. The method can also include training the machine learning model to forecast the prediction based on the time series data and the knowledge graph structure, the training including regularizing the error term for sparsity. The prediction can include a financial portfolio composition.",
                        "In another aspect, a method can include receiving a knowledge graph structure including nodes and edges, the nodes representing entities associated with the time series data, the edges representing relationships between the nodes connected by the edges. The method can also include structuring a machine learning model to forecast a prediction using the time series data, the machine learning model structured to integrate the knowledge graph structure as an error term in the machine learning model. The method can also include training the machine learning model to forecast the prediction based on the time series data and the knowledge graph structure, the training including regularizing the error term for sparsity. The method can also include providing a user interface for allowing a user to configure a type of the machine learning model, the time series data and the knowledge graph structure.",
                        "Yet in another aspect, a computer-implemented method can include receiving financial time series data. The method can also include receiving a knowledge graph structure including nodes and edges, the nodes representing entities associated with the financial time series data, the edges representing relationships between the nodes connected by the edges. The method can also include structuring a neural network to forecast a prediction associated with a financial portfolio composition, using the financial time series data, the neural network structured to integrate the knowledge graph structure as an error term. The method can also include training the neural network to forecast the prediction based on the financial time series data and the knowledge graph structure, the training including regularizing the error term for sparsity, wherein the training jointly learns a prediction function of neural network and the knowledge graph structure integrated as the error term represented by an inverse covariance matrix of the Gaussian error.",
                        "A system including a hardware processor and a memory device, the hardware processor configured to perform one or more of the above methods, can also be provided. A computer readable storage medium storing a program of instructions executable by a machine to perform one or more methods described herein also may be provided.",
                        "Further features as well as the structure and operation of various embodiments are described in detail below with reference to the accompanying drawings. In the drawings, like reference numbers indicate identical or functionally similar elements."
                    ],
                    "subsections": [],
                    "outline_long": [
                        "summarize disclosure",
                        "introduce computer-implemented method",
                        "receive knowledge graph structure",
                        "structure machine learning model",
                        "train machine learning model",
                        "integrate knowledge graph structure",
                        "regularize error term",
                        "use neural network",
                        "use graph convolutional network",
                        "transform knowledge graph structure",
                        "jointly learn prediction function",
                        "use soft mask",
                        "use hard mask",
                        "predict financial portfolio composition",
                        "provide user interface",
                        "receive financial time series data",
                        "structure neural network",
                        "train neural network",
                        "provide system and computer readable storage medium"
                    ],
                    "num_characters": 9862,
                    "outline_medium": [
                        "summarize computer system and method",
                        "introduce machine learning model with knowledge graph",
                        "train model with regularized error term",
                        "integrate knowledge graph as error term",
                        "use neural network as machine learning model",
                        "use graph convolutional network as machine learning model",
                        "transform knowledge graph to inverse covariance matrix",
                        "jointly learn prediction function and knowledge graph",
                        "provide user interface for configuring model"
                    ],
                    "outline_short": [
                        "summarize computer system",
                        "describe machine learning model",
                        "outline training method",
                        "highlight variations"
                    ]
                },
                {
                    "title": "DETAILED DESCRIPTION",
                    "paragraphs": [
                        "Systems and methods can be provided in various embodiments, which embed knowledge graphs in high-dimensional time series modeling, for example, machine learning modeling, to guide joint learning of the forecasting model and the time series correlation structure. The systems and methods can provide improvements on sample complexity, for example, for large financial networks and explainable correlation structure for portfolio risk analysis and portfolio optimization. In another aspect, a portfolio optimization system, for example, on a cloud computing environment can be provided that can take the output from the time series forecasting to construct and optimize portfolios, provide asset correlations and predict future values of the input financial indicators.",
                        "In an aspect, a flexible and explainable artificial intelligence (AI) modeling framework can be provided that can leverage massive data from multiple heterogeneous sources, for example, including external knowledge graph information, to enable reliable forecasting of time-varying indicators such as financial indicators. For instance, the forecasting can be used to optimize portfolio and maximize risk adjusted returns.",
                        "For instance, in an aspect, a system may start with a graphical time-series model for the multivariate response time series, such as the quarterly revenue of public companies, volatility of stock prices, and/or others; reparameterize the time series model via partial correlation; estimate the inverse correlation matrix via pseudo-likelihood; include knowledge graphs as mask to regularize the sparsity of the covariance matrix; and extend the linear model to temporal graph networks.",
                        "The system, for example, can include computer components, and/or computer-implemented components, for instance, implemented and/or run on one or more hardware processors, or coupled with one or more hardware processors. One or more hardware processors, for example, may include components such as programmable logic devices, microcontrollers, memory devices, and/or other hardware components, which may be configured to perform respective tasks described in the present disclosure. Coupled memory devices may be configured to selectively store instructions executable by one or more hardware processors.",
                        "A processor may be a central processing unit (CPU), a graphics processing unit (GPU), a field programmable gate array (FPGA), an application specific integrated circuit (ASIC), another suitable processing component or device, or one or more combinations thereof. The processor may be coupled with a memory device. The memory device may include random access memory (RAM), read-only memory (ROM) or another memory device, and may store data and/or processor instructions for implementing various functionalities associated with the methods and/or systems described herein. The processor may execute computer instructions stored in the memory or received from another computer device or medium.",
                        "In an aspect, a system may leverage financial knowledge graphs in correlations of asset values across the capital market and financial value chain, to integrate data from various sources to facilitate reasoning, and to explain the learned asset correlation structure and risk propagation. Challenges may exist in that knowledge graphs (e.g., financial knowledge graphs) and financial time series are data in different format and co-evolving and may have noisy relationships. There can also be limited data samples in financial time series and scalability challenges for a large number of financial entities. A system and/or method in one or more embodiments may address such challenges, which may arise, in generating a machine learning model or prediction model integrating knowledge graph graphs (e.g., structures) and time series data.",
                        "For example, the system, in one or more embodiments, can jointly model the time series data and covariance structure by leveraging knowledge for structure sparsity which provides insights on the asset correlation and speedup machine learning model training. In an aspect, mask regularizers can be provided for knowledge graphs so that it can inform correlation structure learning efficiently. In an aspect, the system and method may overcome problems arising from small sample time series, e.g., limited time stamps, for large entity networks. The system and/or method can provide for a general learning framework that can be customized to use different time series models (linear or neural network) for prediction and sparsity structure learning.",
                        "Advantageously, the system and/or method can provide for more accurate prediction with insight and explanation on correlation structure, overcome small sample size problems relating to machine learning or modeling, and improve the speed of model training in large asset networks.",
                        "In an aspect, a cloud-based portfolio optimization system can include asset universe, forecast analysis and portfolio optimization. A flexible time series modeling framework can adapt to linear model to neural network models and two different masking regularizers to control the sparsity of the covariance structure for improved computation efficiency. The approach can jointly model time sequence data and financial knowledge graphs, automatically learn a sparse correlation structure, and provide interpretability of forecasting results via the learned covariance structure.",
                        "In an aspect, a system that can perform portfolio optimization can include a graphical user interface, for example, which can interact with end users, and allow end users to select and upload asset list, forecast individual asset future using a system built or generated machine learning model, explain asset correlation, gain insight about portfolio risk and optimize portfolio.",
                        "Time series forecasting such as financial time series forecasting can be challenging due to limited sample size, correlated samples and low signal strengths, among others. Additional information with knowledge graphs can potentially allow for improved prediction and decision making. The system and/or method disclose herein can implement a framework for jointly learning forecasting models and correlation structures that exploit graph connectivity from knowledge graphs. In an embodiment, the system, for example, provides regularizers based on knowledge graph relations to guide estimation of correlation structure. Model compression with graph convolution networks based on knowledge graph connectivity can also be provided. An algorithm is provided for exploiting parameters' sparsity in gradient calculations for correlation parameters, leading to optimization gains for networks such as large financial networks. Experimental evaluation of modelling and algorithmic methods in real-world financial markets with two types of knowledge graphs demonstrate sparser connectivity structures, runtime improvements and high-quality predictions.",
                        "Analysis of data, e.g., machine learning from data can provide for optimizing decisions. For instance, analysis of financial data, such as market prices, quarterly earnings, and indices can be considered in optimizing investment decisions. Financial data, for example, presents inherent temporal and relational properties, and therefore, graph-based learning techniques can be tools for performing statistical inference, and decision making. For instance, machine learning that integrates graph-structured data, for example, information from knowledge graphs, can improve machine learning decision making, for example, to include inferred correlation of asset values across the capital market and financial value chain.",
                        "In an embodiment, a system and/or method can provide machine learning that combines relational data with time series data such as financial signals, e.g., sequential time-series. Combining graph information with time-series models can allow for improved prediction and maintain transparency in decision making.",
                        "In an aspect, the system and/or method may overcome the difficulty attributed to the heterogeneity in time-varying cross-sectional data (e.g., market price) and graphs, both of which can be considered as different types of co-evolving data-structures, overcome the complexity arising from low signal-to-noise ratio in financial time-series data and limited sample sizes. Modelling financial networks with large number of nodes under these constraints can lead to severe overfitting and poor out-of-sample performance. The system and/or method can use additional information about the financial network via knowledge graphs to mitigate this behavior.",
                        "Knowledge graphs reflect relationships among different entities (e.g., companies, people, news events and key metadata). FIG. 2 shows an example knowledge graph with first and second order connectivity between financial firms in an embodiment. The knowledge graph depicts various forms of connectivity information between firms in financial markets, e.g., industry classification, supply-chain links, joint product ventures, competitors, and/or others. For example, the nodes represent entities and the edges connecting the nodes represent relationships between the connected nodes. The system and/or method in an aspect use the knowledge graph information (e.g., structured use of knowledge graphs) for prediction, e.g., in terms of insights into the financial markets, statistical inference, model complexity and/or optimization.",
                        "In one or more embodiments, the system and/or method can use connectivity information through knowledge graphs to address over-parametrization in high-dimensional time-series models when simultaneously performing forecasting and learning correlation structure. Knowledge-graph-based regularizers are presented for partial correlation estimation, which lead to much sparser correlation structures as opposed to vanilla least absolute shrinkage and selection operator (lasso) and variants. The system and/or method also use knowledge graph relationships in graph-based learning approaches for model compression in the forecasting component of the high-dimensional time-series model. The system and/or method can provide an efficient implementation of a gradient-based optimization algorithm that exploit the sparsity structure of the problem. Experimental results show the improved prediction, providing improved inference, correlation structure estimation and computational efficiency.",
                        "The system and/or method may address existing limitations in known algorithms with knowledge-graph guided modelling and sparse optimization. In an aspect, the system and/or method can consider graph convolutional networks. In an aspect, forms of connectivity information such as industry-sector classification, and/or first and second order relationships can be considered in modelling with knowledge graphs. In an aspect, knowledge graph constructed on the basis of aggregated co-search of information (e.g., financial information) by analysts can also be considered. In an aspect, the system and/or method may impose sparsity inducing regularizers on the parameters and generalize them under the knowledge graph setting.",
                        "A standard regularizer in statistical learning literature is the  penalty \u03a9(w)=\u03bb\u2225w\u22251, which originates from LASSO. As a variant of LASSO, Adaptive LASSO also incorporates the prior knowledge of w into the LASSO. More specifically, given a prior w0 of w and w0's elementwise reciprocal r, the regularizer is given by \u03a9(w)=\u03bb\u2225rew\u22251. The idea of Adaptive LASSO is also used for the learning of vector autoregressive matrix A and partial correlation \u03c1. Both LASSO and Adaptive LASSO are convex relaxations of the  regularizer \u03a9\u03c1(\u03c1), which is equivalent to the best subset selection problem in regression. Best selection problem or its variants can be targeted via integer programming for large-size problem, an  hybrid regularizer in the form of \u03a9(w)=\u03bb0\u2225w\u22250+\u03bb2\u2225w\u222522, can be considered."
                    ],
                    "subsections": [
                        {
                            "title": "Methodology",
                            "paragraphs": [
                                "**Time Series Model**",
                                "The system, for example, may consider a multivariate time series model with nonstandard multivariate Gaussian noise, given by",
                                "\\(\\begin{matrix}\n{{y_{t} = {{f\\left( {y_{t - 1},\\ldots,y_{t - p}} \\right)} + \\varepsilon_{t}}},{\\varepsilon_{t} \\sim {\\mathcal{N}\\left( {0,\\ C^{- 1}} \\right)}}} & (1)\n\\end{matrix}\\)",
                                "where each yt\u2208N denotes the target variables of N different companies at time t, C\u2208N\u00d7N in (1) denotes the inverse covariance matrix of the Gaussian error, and f:\u2297k=1pN\u2192N denotes the prediction function given the past p realizations of the target variables. The goal is to learn the function f and the inverse covariance matrix C from the data set {yt}. Here, the system can further impose sparsity assumption on the inverse covariance matrix C, meaning that there are only a few strong conditional correlation between different companies.",
                                "**Specification and Assumption**",
                                "For financial time series applications, the target variable yt can be stock returns, stock volatilities or bond yields of N different companies; it can be option, future or derivative prices of N different assets; it can also be currency exchange rate of different countries/regions, etc. f can either be a simple linear model (e.g., vector autoregression (VAR)) or a sophisticated neural network architecture (e.g., long short term memories (LSTMs), Graph Convolutional Networks). For illustration purpose, two classes of functions are described. Other classes or functions can be considered. One class is the high-dimensional linear models\u2014the first-order Vector Autoregression (VAR), i.e., f(yt\u22121)=Ayt\u22121. The other class can be a single-layered graph convolutional network (GCN) based on knowledge graph. This is a more structural linear function class compared to VAR. Other types of neural network and/or GCN can be implemented.",
                                "In financial markets, there are common systematic risks associated with either the whole market or a certain market sector. Therefore, simply assuming the sparsity structure of C is not enough. For example, financial econometrics and statistics can use factor models to remove the market and sector trend and impose the structured assumption on the residual part of the factor model instead. After this detrending process, the residual can be considered as the individual risk of each company. It can be assumed the sparse inverse covariance structure of the residual. In an aspect, the system can use the residual part after removing the market/sector factors as a target variable yt and assume the inverse covariance matrix C is sparse.",
                                "A challenge of learning this graphical time series model (1) is jointly learning both time series prediction function f and the inverse covariance structure C. With a large pool of companies in the market, there are a large amount of parameters in f and C, but, on the contrary, the data samples for these time series learning are limited. The system in an aspect may provide solutions with the help of knowledge graph information.",
                                "**Learning Error Correlations: A Pseudolikelihood Framework**",
                                "The sparsity of the inverse covariance matrix C is closely related to Gaussian graphical model, which assumes the partial correlation structure forms a graph. Specifically, the partial correlation \u03c1ij between \u03b5it and \u03b5jt has following expression",
                                "\\(\\begin{matrix}\n{\\rho_{ij} = {{{corr}\\left( {\\varepsilon_{it},\\ {\\varepsilon_{jt}{\u2758\\left\\{ {{{\\varepsilon_{kt}:k} \\neq i},j} \\right\\}}}} \\right)} = {- {\\frac{c_{ij}}{\\sqrt{c_{ii}c_{jj}}}.}}}} & (2)\n\\end{matrix}\\)",
                                "For example, there can be two approaches to estimate the sparse inverse covariance matrix. One method is through the penalized likelihood method, particularly Graphical Lasso. However, the Graphical Lasso is a positive semi-definite (PSD) optimization problem. Since there is a need to jointly learn f and the PSD matrix C, the problem cannot scale well when the number of companies is large.",
                                "Another approach exploits the conditional distribution of multivariate Gaussian variables, and avoids positive semidefinite program by pseudo-likelihood method. Given {\u03b5kt: k\u2260i}, the conditional distribution of \u03b5it is",
                                "\\(\\begin{matrix}\n\\left. \\varepsilon_{it} \\middle| {\\left\\{ {{\\varepsilon_{kt}:k} \\neq i} \\right\\} \\sim {{\\mathcal{N}\\left( {{\\sum_{k \\neq i}{\\rho_{ik}\\sqrt{\\frac{c_{kk}}{c_{ii}}}\\varepsilon_{kt}}},\\frac{1}{c_{ii}}} \\right)}.}} \\right. & (3)\n\\end{matrix}\\)",
                                "The pseudo-likelihood method considers maximizing an approximation of the likelihood function, PL(\u03b8;{\u03b5t})=\u03a3t,ilog p\u03b8(\u03b5it|\u03b5\u2212it), and the estimator is shown to be consistent under certain regularity condition. For Gaussian graphical model, according to (3), the pseudo-likelihood becomes least-squares between \u03b5it and {\u03b5kt: k\u2260i}. More specifically, ignoring the constants, the pseudo-likelihood function is",
                                "\\({{PL}\\left( {\\rho,c} \\right)} = {\\sum_{t,i}\\left\\{ {{\\log c_{ii}} - {c_{ii}\\left( {\\varepsilon_{it} - {\\sum_{k \\neq i}{\\rho_{ik}\\sqrt{\\frac{c_{kk}}{c_{ii}}}\\varepsilon_{kt}}}} \\right)}^{2}} \\right\\}}\\)",
                                "To further learn the graph connectivity pattern, the system may impose sparsity inducing penalty on \u03c1's.",
                                "Furthermore, the system may consider a more general loss",
                                "\\(\\begin{matrix}\n{{{\\ell\\left( {\\rho,f,{c;y_{t - p}^{t}}} \\right)} = {\\sum_{i = 1}^{N}{w_{i}\\left( {y_{it} - {f_{i}\\left( {y_{t - 1},\\ldots,y_{t - p}} \\right)} + {\\sum_{{h = 1},{h \\neq i}}^{N}{\\rho_{ih}\\sqrt{\\frac{c_{hh}}{c_{ii}}}\\left( {{f_{h}\\left( {y_{i - 1},\\ldots,\\ y_{t - p}} \\right)} - y_{ht}} \\right)}}} \\right)}^{2}}},} & (4)\n\\end{matrix}\\)",
                                "where wi's are nonnegative weights.",
                                "It is worth noting that when c is fixed, (4) can be decomposed into N subproblems, which reduces to the column-by-column estimator. Furthermore, when the weights wi are taken to be equal to cii, this loss (4) is equivalent to the pseudo-likelihood function PL(\u03c1, c). Therefore, a statistical interpretation is provided for (4) as an extension of pseudo-likelihood loss. However, since the system may learn c and f and \u03c1 at the same time, the optimal solution of c to this formulation does not necessarily minimize the original pseudo-likelihood loss, because of the missing logarithmic terms in (4). Therefore, the system may correct c in each step to ensure cii\u22121 is the conditional variance of \u03b5it given \u03b5\u2212it. (details are shown in Algorithm 1).",
                                "This loss (4), along with some regularization on f and \u03c1, leads to the final optimization problem that is looked into, given by",
                                "\\(\\begin{matrix}\n{{L\\left( {\\rho,{f;c}} \\right)} = {{\\frac{1}{T}{\\sum_{t = 1}^{T}{\\ell\\left( {\\rho,{f;c},y_{t - p}^{t}} \\right)}}} + {\\Omega_{f}(f)} + {\\Omega_{\\rho}(\\rho)}}} & (5)\n\\end{matrix}\\)",
                                "for some prespecified function class and regularizers \u03a9f, f\u03c1. Here, \u03a9f is a regularizer that controls the complexity and provides certain interpretability of the function class. For a 1st-order VAR model, f(yt\u22121)=Ayt\u22121, and a regularizer will be \u03a9f(f)=\u03bbA\u2225B\u2299A\u22251, where B is the elementwise reciprocal of the pre-estimator \u00c2 and \u2299 is the elementwise multiplication operation. As for a graph convolution network (GCN) model, a regularizer is specified, for example, below.",
                                "For \u03a9\u03c1, it induces the sparsity structure of \u03c1 (i.e. C). Additionally, in this context, knowledge graph can serve as guideposts for efficient variable selection in inverse covariance estimation in the form of additional priors on the partial correlation parameters, described below.",
                                "**Masked Regularizers \u03a9\u03c1**",
                                "In an aspect, since the system is jointly learning the time-series model f and the partial correlation structure \u03c1 with (5), the problem may suffer from the issue of limited sample size, as there are at least O(N2) parameters but only O(T) observations. Also, the nonconvex objective with large number of parameters may lead to slow learning process. Therefore, based on the sparsity inducing regularizers, the system may take advantage of knowledge graphs to provide additional information on the sparsity pattern of \u03c1. This can help reduce the number of parameters and improve the optimization efficiency.",
                                "The knowledge graph information describes some connectivity/similarity between companies, and the system can compute a weight matrix representing the degree of this connectivity, so the system can use these weights to inform the sparsity pattern of the inverse covariance matrix C and thus restrict the number of parameters in the partial correlation \u03c1.",
                                "In an embodiment, specifically, given a knowledge graph, the system creates a symmetric weight matrix G so that each entry Gij measures how strong the connectivity between i and j is in the knowledge graph. Given a prespecified sparsity level K, for any company i, the system can define its neighbor N(i) as those companies j's that have top K weights Gij among j\u2260i. For some knowledge graph, entries of the weight matrix G can only take value among a few numbers. In this case, taking top K weights for each i may incur a lot of ties, and an alternative way to create the neighbors is by thresholding on the whole weight matrix G.",
                                "Given the neighbors N(i) for each i, the system may define hard masking matrix Mhard as follows",
                                "\\(\\begin{matrix}\n{M_{ij}^{hard} = \\left\\{ {\\begin{matrix}\n{1,} & {{{if}i} \\in {{N(j)}{or}j} \\in {N(i)}} \\\\\n{\\infty,} & {otherwise}\n\\end{matrix}.} \\right.} & (6)\n\\end{matrix}\\)",
                                "Let Gmax be the maximum entry of G, the system may define soft masking matrix Msoft as follows",
                                "\\(\\begin{matrix}\n{M_{ij}^{soft} = \\left\\{ {\\begin{matrix}\n{\\frac{G_{m{ax}}}{G_{ij}}\\ ,} & {{{if}i} \\in {{N(j)}{or}j} \\in {N(i)}} \\\\\n{\\infty,} & {otherwise}\n\\end{matrix}.} \\right.} & (7)\n\\end{matrix}\\)",
                                "In the cases where the weight matrix is binary or integer, additional handling of soft masking matrix can be performed.",
                                "These masking matrices\u2014M\u2208{Mhard, Msoft}\u2014are used to impose modified regularization penalty on \u03c1. As the masking entry becomes larger, the penalty imposed on the corresponding entry of \u03c1 increases. \u221e masking entry essentially zeros out the corresponding element in the \u03c1 parameter matrix, reducing the model complexity. With these additional masking weights, th system may re-define our new masked regularizers as follows (In the table, r is the elementwise reciprocal of the prior knowledge/pre-estimator of \u03c1).",
                                "In an aspect, reduction in model complexity allows for a significantly faster algorithm for the optimization problem, because these masking matrices ensure sparser gradient computations in the optimization scheme. This improvement in efficiency can be significant, for example, in cases where there are a large pool of companies in the market to consider (e.g., there are about 3,000 stocks traded on New York Stock Exchange (NYSE)). In an aspect, the model complexity for the partial correlation component only grows as (KN) as opposed to (N2) without any knowledge graph.",
                                "**Graph Convolutional Networks**",
                                "The model complexity of the forecasting component, f in general high-dimensional time-series model, presented above, grows quickly as higher time lags are considered in f with high-dimensional vector autoregressive models. The model requires estimation of pN2 parameters for the autoregressive matrices in addition to N(N\u22121)/2 parameters for partial correlation. This high-dimensionality, coupled with limited sample sizes, may lead to overfitting in high-dimensional VARs. The availability of knowledge graphs can help correct for large model complexity in VARs in a transparent way with the use of graph-based learning approaches. The graph information can restrict the really high-dimensional linear class of functions explored by higher-order VARs. In an embodiment, according to this modelling approach for time-series prediction, the past time-samples of multivariate time-series are processed with graph operations, e.g., graph convolution, before being fed into a linear model of significantly reduced model complexity. This model compression aspect of graph-based linear models over high-dimensional VARs can provide for improved predictive performance, for example, in financial network applications with limited data.",
                                "In an aspect, a single-layered Graph Convolution Network (GCN) falls under the linear model class. In an aspect, the following can be defined as the time-series forecasting function f(yt\u22121, . . . , yt\u2212p, G) for GCN:",
                                "\\(\\begin{matrix}\n{y_{t} = {\\overset{\\sim}{G}X_{t}W}} & (8)\n\\end{matrix}\\)",
                                "where Xt=[yt\u22121, . . . , yt\u2212p] is the input data,",
                                "\\(\\overset{\\sim}{G} = {{{\\overset{\\sim}{D}}^{\\frac{1}{2}}\\left( {G + I} \\right)}{\\overset{\\sim}{D}}^{\\frac{1}{2}}}\\)",
                                "is the normalized graph matrix apriori defined based on the knowledge graph, {tilde over (D)}ii=\u03a3j{tilde over (G)}ij, and W\u2208 is the weight vector to be estimated. The system may impose  regularization on W, i.e. \u03a9f(f)=\u03bbw\u2225W\u222522. In an aspect, this is an adaptation of the original Graph Convolution Networks to cater to additional (time) sample dimension at each node for learning with multiple time instances. In an aspect, a single-layered graph convolution network is a highly structured instance of a high-dimensional VAR model. This can be understood by expanding out the VAR and GCN functions as given below:",
                                "\\(\\begin{matrix}\n{{{{GCN}:f_{it}} = {\\sum_{k = 1}^{p}{\\sum_{j = 1}^{N}{{\\overset{\u02dc}{G}}_{ij}y_{{jt} - k}w_{k}}}}}{{{VAR}:f_{it}} = {\\sum_{k = 1}^{p}{\\sum_{j = 1}^{N}{A_{ijk}y_{{jt} - k}}}}}} & (9)\n\\end{matrix}\\)",
                                "Comparing the two linear models, it can be seen that the product {tilde over (G)}ijwk in GCN are more specialized instances of the general Aijk entries in the VAR case. The model complexity for the forecasting component reduces from N2p for VAR to p in GCN because of parameter sharing and availability of additional graph connectivity. This compression shifts the overall model complexity from the forecasting component (O(pN2)) in VARs with partial correlation to the correlation component (O(N2)) in GCN with partial correlation. The sample scenarios benefit from this model compression considering the knowledge graph has informative connectivity structure. Improved predictive performance can be shown on financial markets under a general time-series modelling approach."
                            ],
                            "subsections": [],
                            "outline_long": [
                                "introduce time series model",
                                "specify multivariate time series model",
                                "define target variables",
                                "define prediction function",
                                "impose sparsity assumption on inverse covariance matrix",
                                "specify financial time series applications",
                                "describe high-dimensional linear models",
                                "describe graph convolutional network (GCN) based on knowledge graph",
                                "motivate factor models",
                                "describe detrending process",
                                "assume sparse inverse covariance structure of residual",
                                "introduce challenge of learning graphical time series model",
                                "motivate use of knowledge graph information",
                                "introduce pseudolikelihood framework",
                                "define partial correlation structure",
                                "describe two approaches to estimate sparse inverse covariance matrix",
                                "introduce penalized likelihood method",
                                "introduce pseudo-likelihood method",
                                "define conditional distribution of multivariate Gaussian variables",
                                "describe pseudo-likelihood function",
                                "introduce loss function",
                                "describe statistical interpretation of loss function",
                                "introduce final optimization problem",
                                "describe masked regularizers",
                                "motivate use of knowledge graph to reduce model complexity",
                                "describe graph convolutional networks",
                                "motivate use of graph-based learning approaches",
                                "describe single-layered graph convolution network"
                            ],
                            "num_characters": 14135,
                            "outline_medium": [
                                "introduce time series model",
                                "specify multivariate time series model",
                                "motivate sparsity assumption on inverse covariance matrix",
                                "describe application of time series model in finance",
                                "specify two classes of functions: linear models and neural networks",
                                "describe detrending process using factor models",
                                "assume sparse inverse covariance structure of residual",
                                "motivate joint learning of time series prediction function and inverse covariance structure",
                                "introduce pseudolikelihood framework for learning error correlations",
                                "derive pseudolikelihood function",
                                "specify loss function for learning graph connectivity pattern",
                                "describe masked regularizers for inducing sparsity structure",
                                "introduce graph convolutional networks for time series forecasting",
                                "specify graph convolutional network model for financial time series applications"
                            ],
                            "outline_short": [
                                "define time series model",
                                "specify target variables and function classes",
                                "motivate sparsity assumption on inverse covariance matrix",
                                "introduce pseudolikelihood framework for learning error correlations",
                                "derive loss function for joint learning of time series prediction and inverse covariance structure",
                                "introduce masked regularizers for efficient variable selection",
                                "apply graph convolutional networks to reduce model complexity"
                            ]
                        },
                        {
                            "title": "Algorithm",
                            "paragraphs": [
                                "An algorithm for (5) is developed, for example (but not limited to), for the time-series model such as VAR or single-layered GCN. Since both models are linear in their parameters, it can be assumed f is parametrized by \u03b8 and the corresponding \u03a9f(f) becomes \u03a9\u03b8(\u03b8). The algorithm is alternately updating w=(\u03b8,\u03c1) by proximal gradient descent and updating c via the conditional variance formula (3). The algorithm is detailed below in Algorithm 1 in an embodiment.",
                                "For solving the proximal problem (10), from the separability of the objective, for each component of \u03b8, the proximal problem becomes the following problem",
                                "\\({{\\min\\limits_{a}\\frac{1}{2}\\left( {a - \\overset{\u02dc}{a}} \\right)^{2}} + {\\lambda{\u2758a\u2758}}},\\)",
                                "which admits a closed form solution a*=sign(\u00e3)(|\u00e3|\u2212\u03bb)+. This also applies to \u03c1 in the cases where \u03a9\u03c1 is lasso or adaptive lasso penalty. In the  case, the system can compute each \u03c1ij by solving the following problem",
                                "\\({{\\min\\limits_{a}\\frac{1}{2}\\left( {a - \\overset{\u02dc}{a}} \\right)^{2}} + {\\lambda_{0}{1\\left\\lbrack {a \\neq 0} \\right\\rbrack}} + {\\lambda_{2}a^{2}}},\\)",
                                "which is given by",
                                "\\(a^{*} = \\left\\{ \\begin{matrix}\n\\frac{\\overset{\\sim}{a}}{1 + {2\\lambda_{2}}} & {{{if}{\\overset{\\sim}{a}}^{2}} > {2{\\lambda_{0}\\left( {1 + {2\\lambda_{2}}} \\right)}}} \\\\\n0 & {{{if}{\\overset{\\sim}{a}}^{2}} < {2{\\lambda_{0}\\left( {1 + {2\\lambda_{2}}} \\right)}}} \\\\\n\\left\\{ {0,\\frac{\\overset{\\sim}{a}}{1 + {2\\lambda_{2}}}} \\right\\} & {{{if}{\\overset{\\sim}{a}}^{2}} = {2{\\lambda_{0}\\left( {1 + {2\\lambda_{2}}} \\right)}}}\n\\end{matrix} \\right.\\)",
                                "The following definition and theorem provide some insight on the convergence of the algorithm.",
                                "Definition 1 For a lower semi-continuous (lsc) function \u03c6, its Fr\u00e9chet subdifferential is defined as",
                                "\\({\\partial_{F}{\\varphi\\left( w_{0} \\right)}} = \\left\\{ {{\\xi:\\liminf\\limits_{h\\rightarrow 0}\\frac{{\\varphi\\left( {x_{0} + h} \\right)} - {\\varphi\\left( x_{0} \\right)} - \\left\\langle {\\xi,h} \\right\\rangle}{\uf605h\uf606}} \\geq 0} \\right\\}\\)",
                                "Let f(x)=g(x)+\u03c6(x), where g is continuously differentiable and \u03c6 is lsc. The set of stationarity point of f is defined as",
                                "\\(X^{*} = {\\left\\{ {{x:0} \\in {{\\nabla{g(x)}} + {\\partial{\\varphi(x)}}}} \\right\\}.}\\)",
                                "Theorem 1 Assume that \u2207wL(w; c) is \u03c3-Lipschitz for any c. For any fixed c, if the system updates w(k) iteratively via (10) with",
                                "\\({\\gamma \\in \\left( {0,\\frac{1}{\\sigma}} \\right)},\\)",
                                "and let  be a limiting point of {w(k)}, then  is a stationary point of L(\u22c5; c).",
                                "This theorem shows that if the system fixes c and keep updating w=(\u03b8,\u03c1), the algorithm may converge to a stationary point. Since the system is updating c via the conditional variance formula, c will move towards the optimal c for pseudo-likelihood loss. At the same time, the update (10) will drive w towards the stationary point of L given c. Therefore, this provide heuristics on how Algorithm 1 may work.",
                                "In an aspect, an implementation of the algorithm exploits the sparsity structure of the masking matrix and performs sparse gradient computation and proximal update. Therefore, there can be optimization boost using the sparse graph masking matrix.",
                                "FIG. 1 is a diagram illustrating a method in an embodiment. The method can be implemented or run on one or more computer processors, for example, including hardware processors. Data 102 such as asset universe, historical financial indicators, other data such as news, knowledge graphs and/or parameter constraints can be received or obtained. For instance, there can be application programming interfaces (APIs) and/or data connectors 104, providing access to such data or information.",
                                "Selections or configurations 106 for modeling can also be received or obtained. For instance, a user may provide via a user interface configuration setting for asset selection, forecasting target selection (e.g., target prediction such as but not limited to, stock returns, stock volatilities or bond yields of N different companies, option, future or derivative prices of N different assets, currency exchange rate of different countries/regions, and/or others) and/or forecasting horizon (time line or period).",
                                "At 108, a multivariate time series model with Gaussian noise can be generated, defined or structured. An example is shown in Eq. (1) above.",
                                "At 110, partial correlation between two elements on the inverse covariance matrix of the Gaussian error can be obtained, generated, defined or structured. An example is shown in Eq. (2) above.",
                                "At 112, pseudo-likelihood method is constructed to estimate the elements in covariance matrix. An example is shown and described above as",
                                "\\({{PL}\\left( {\\rho,c} \\right)} = {\\sum_{t,i}{\\left\\{ {{\\log c_{ii}} - {c_{ii}\\left( {\\varepsilon_{it} - {\\sum_{k \\neq i}{\\rho_{ik}\\sqrt{\\frac{c_{kk}}{c_{ii}}}\\varepsilon_{kt}}}} \\right)}^{2}} \\right\\}{where}}}\\)\n\\(\\left. \\varepsilon_{it} \\middle| {\\left\\{ {{\\varepsilon_{kt}:k} \\neq i} \\right\\} \\sim {\\mathcal{N}\\left( {{\\sum_{k \\neq i}{\\rho_{ik}\\sqrt{\\frac{c_{kk}}{c_{ii}}}\\varepsilon_{kt}}},\\frac{1}{c_{ii}}} \\right)}} \\right.\\)",
                                "as in Eq. (3).",
                                "At 114, given the neighbors N(i) for each i, hard or soft masking matrix is applied to partial correlation matrix \u03c1. At 116, the pseudo-likelihood for time series models can be maximized or optimized, where f can be VAR, NN, etc. times series model. At 114 and 116, joint optimization with respect to both the time series and inverse covariance structure can be performed. An example is shown and described in Eq. (4) and Eq. (5) above. In Eq. (5), for example, f can be any time series model such as VAR, LSTM, GCN and/or others. In Eq. (5), masked regularizer (\u03a9\u03c1(\u03c1)) based on knowledge graphs is used to learn the partial correlation structure. Masked regularizers are shown and described in Eq. (6) and Eq. (7) above.",
                                "At 118, based on the trained model, financial indicator forecasting. At 120, based on the trained model, estimation of covariance structure can be performed. In an aspect, the financial indicator forecasting and estimation of covariance structure are performed jointly.",
                                "At 122, portfolio optimization can be performed. For example, running the trained model can predict asset allocation such as portfolio composition."
                            ],
                            "subsections": [],
                            "outline_long": [
                                "develop algorithm for time-series model",
                                "introduce proximal gradient descent",
                                "derive closed-form solution for proximal problem",
                                "define Fr\u00e9chet subdifferential",
                                "state theorem on convergence of algorithm",
                                "provide heuristics on algorithm's operation",
                                "describe implementation exploiting sparsity structure",
                                "illustrate method in embodiment",
                                "receive data and configuration for modeling",
                                "generate multivariate time series model",
                                "construct pseudo-likelihood method",
                                "perform joint optimization and forecasting"
                            ],
                            "num_characters": 6166,
                            "outline_medium": [
                                "develop algorithm for time-series model",
                                "derive proximal gradient descent",
                                "define Fr\u00e9chet subdifferential",
                                "prove convergence theorem",
                                "illustrate method in embodiment",
                                "describe implementation details"
                            ],
                            "outline_short": [
                                "develop algorithm for time-series model",
                                "derive proximal gradient descent update rules",
                                "provide convergence theorem and heuristics"
                            ]
                        }
                    ],
                    "outline_long": [
                        "introduce systems and methods for time series modeling",
                        "motivate improvements on sample complexity",
                        "describe portfolio optimization system",
                        "introduce flexible AI modeling framework",
                        "motivate reliable forecasting of time-varying indicators",
                        "describe graphical time-series model",
                        "reparameterize time series model via partial correlation",
                        "estimate inverse correlation matrix via pseudo-likelihood",
                        "include knowledge graphs as mask to regularize sparsity",
                        "extend linear model to temporal graph networks",
                        "describe system components and hardware processors",
                        "motivate leveraging financial knowledge graphs",
                        "integrate data from various sources",
                        "explain learned asset correlation structure and risk propagation",
                        "address challenges in generating machine learning model",
                        "jointly model time series data and covariance structure",
                        "provide mask regularizers for knowledge graphs",
                        "overcome small sample size problems",
                        "provide general learning framework",
                        "describe cloud-based portfolio optimization system",
                        "motivate time series forecasting with knowledge graphs",
                        "implement framework for jointly learning forecasting models",
                        "provide experimental evaluation of modeling and algorithmic methods"
                    ],
                    "num_characters": 11959,
                    "outline_medium": [
                        "introduce systems and methods for time series modeling",
                        "motivate improvements on sample complexity and explainable correlation structure",
                        "describe portfolio optimization system on a cloud computing environment",
                        "define flexible and explainable AI modeling framework",
                        "summarize system components and computer-implemented components",
                        "motivate challenges in integrating knowledge graphs and financial time series",
                        "describe system and method for jointly modeling time series data and covariance structure",
                        "summarize advantages of the system and method",
                        "describe cloud-based portfolio optimization system and flexible time series modeling framework",
                        "motivate importance of knowledge graphs in financial time series forecasting",
                        "summarize system and method for exploiting graph connectivity from knowledge graphs"
                    ],
                    "outline_short": [
                        "introduce systems and methods for time series modeling",
                        "motivate knowledge graph integration for explainable correlation structure",
                        "describe system components and architecture",
                        "explain advantages and benefits of the system and method",
                        "summarize experimental evaluation and results"
                    ]
                },
                {
                    "title": "Experimental Results",
                    "paragraphs": [],
                    "subsections": [
                        {
                            "title": "Data",
                            "paragraphs": [
                                "**Stock Volatilities Time-Series**",
                                "Experimental evaluation is performed on the combination of time-series prediction with Knowledge Graph in the context of market volatilities. The experiment considers two different financial markets S&P500 and S&P1500 and defines the daily volatility using the daily high and low stock price:",
                                "\\(\\begin{matrix}\n{{\\overset{\\sim}{\\sigma}}_{it}^{2} = {0.361\\left( {{\\log p_{it}^{high}} - {\\log p_{it}^{low}}} \\right)^{2}}} & (11)\n\\end{matrix}\\)",
                                "where pithigh and pitlow denote the maximum and minimum price of stock i on day t. The experiment conditioned on the corresponding market index: S&P500 or S&P1500 and 9 sector indices. This reduces the number of companies to 383 for S&P500 and 1,009 for S&P1500 markets. In the experiment, the target variable y is the idiosyncratic volatility residuals computed via least squares optimization.",
                                "**Knowledge Graph (KG) Using Cosearch**",
                                "For the experiment, a KG is generated between firms by collecting cosearch of peer firms. Analysts collectively search for financial data on economically-related or similar firms. The cosearch of peer firms by users can explain a degree of similarity between firms. The experiment used cosearch to extract meaningful information about graph connectivity and construct a knowledge graph. For example, for each pair of firms (i,j), the number of unique users searching for both firms i and j is used to define a daily co-search proportion, which can be aggregated annually. These search peers may reflect the collective view of similarity between firms across all users. The experiment evaluates the effectiveness of KG in categorizing long-term contemporaneous correlation behavior through masked regularizers on partial correlation and identifying adjacency for forecasting in graph convolutional networks.",
                                "**Other Knowledge Graphs**",
                                "Other knowledge graphs can also be employed. Such knowledge graph may include information about entities and relationships (e.g., supply chain relationships), similarities among entities, and other metadata."
                            ],
                            "subsections": [],
                            "outline_long": [
                                "define stock volatilities time-series",
                                "introduce knowledge graph using cosearch",
                                "describe other knowledge graphs",
                                "specify target variable"
                            ],
                            "num_characters": 2059,
                            "outline_medium": [
                                "define stock volatilities time-series",
                                "construct knowledge graph using cosearch"
                            ],
                            "outline_short": [
                                "define stock volatilities time-series"
                            ]
                        },
                        {
                            "title": "Setup",
                            "paragraphs": [
                                "An example experimental setup considers two financial markets S&P500 and S&P1500, using daily stock volatilities residuals from 2013-2016. The experiment set 2013-2014 as the training period, 2015 as hyperparameter validation period and 2016 for final model evaluation. There are 504 days in the training period (as compared to the 383 companies for SP500 and 1,009 companies for SP1500) to evaluate proposed methodology on small sample size regime. In an aspect, the modelling approach is evaluated in terms of R2 performance, sparsity of partial correlation structure, optimization runtimes' improvement and model compression (demonstrated by #params). The experiment follows R2 definition where the computation of R2 uses zero-mean prediction in the denominator (as the market and sector factors have been accounted for).",
                                "The experiment evaluated the utility of knowledge-graph based regularizers (constructed from different knowledge graphs) by comparison with various regularizers that do not use additional knowledge graph connectivity information. The experiment performed the optimization using the algorithm (Algorithm 1). The baseline scenario refers to non-masked regularizered models optimized via the algorithm; the shooting method for optimizing high-dimensional vector autoregressive models with partial correlation (VAR-PC) is not state-of-the-art for solving lasso-type problems and not easily generalizable to general time-series models beyond VAR forecasting components. The experiment also evaluated the effectiveness of aforementioned knowledge graphs as adjacency matrices in graph convolutional networks with partial correlation (GCN-PC)."
                            ],
                            "subsections": [],
                            "outline_long": [
                                "outline experimental setup",
                                "specify evaluation metrics",
                                "describe optimization method"
                            ],
                            "num_characters": 1662,
                            "outline_medium": [
                                "describe experimental setup and evaluation metrics"
                            ],
                            "outline_short": [
                                "describe experimental setup"
                            ]
                        },
                        {
                            "title": "Results Discussion",
                            "paragraphs": [
                                "Table 2 presents results for prediction of daily volatilities residuals defined as data as described above. Table 2 confirms that the KG-masked regularizers provide faster optimization because of reduction in the number of partial correlation parameters. The optimization gains depend on the number of neighbors in the masking matrices. In this experiment, empirical investigations suggest that 75 peers are sufficient to ensure that there is no degradation in performance in terms of R2 performance and provide significant computational gains (up to 3 and 10 times for S&P500 and S&P1500 markets respectively). There may be tradeoff between model complexity with computational scalability.",
                                "Additionally, the KG-input also results in more compact correlation structure as observed by the percentage of nonzeros of the recovered partial correlation \u03c1\u2208N\u00d7N denoted by nnz(\u03c1) (%) \u03c1 in the table. The masked-regularizers can give up to 5 times sparser partial correlation estimates. The partial correlation sparsity patterns under different regularizers can be visualized. The correlation heatmaps, which can be plotted show that although the values of \u03c1 are different, different regularizers can give similar sparsity patterns in \u03c1, demonstrated by the correspondences between the spikes in \u03c1 and the spikes in G. In an aspect, a pseudolikelihood framework disclosed herein uses knowledge graph as a guide to arrive at the true correlation structure.",
                                "Table 3 reports a graph convolutional network with partial correlation results. In an example experiment, 17% improvement in R2, 9 times reduction in model complexity and 22% improvement in sparsity of partial correlation over VAR-PC are observed.",
                                "In general, the experiment results show improvement in prediction performance, more computational efficiency, more sparsity on the covariance structure for structured explanation. Sparse granger causality interpretation via linear time model or structured GCNs can be performed.",
                                "A general framework is disclosed for jointly learning forecasting models (e.g., high-dimensional time-series models, GCNs), correlation structures with models based on knowledge graphs under a pseudolikelihood framework. Based on empirical results, the approach leads to improved prediction, reduced model complexity and computational efficiency. Hence, for example, computing and/or memory efficiency of a computer system can be improved.",
                                "FIG. 3 is another diagram illustrating a method in an embodiment. The method can be implemented or run on one or more computer processors, for example, including hardware processors. At 302, time series data is received. For example, data can be received via an API or another data connector, for example, remotely or locally. The data can be stored on a storage device.",
                                "At 304, one or more knowledge graph structures can be received. A knowledge graph structure can include nodes and edges. The nodes represent entities associated with the time series data and the edges representing relationships between the nodes connected by the edges. Nodes can also contain data about entities, e.g., metadata. An example knowledge graph structure is shown in FIG. 2.",
                                "At 306, a machine learning model is structure or generated to forecast a prediction using the time series data. The machine learning model can be structured to integrate the knowledge graph structure as an error term in the machine learning model.",
                                "At 308, the machine learning model is trained to forecast the prediction based on the time series data and the knowledge graph structure. The error term can be regularized for sparsity in training.",
                                "In an aspect, the machine learning model includes a neural network. In another aspect, the machine learning model can include a graph neural network such as, but not limited to, a graph convolutional network.",
                                "In an aspect, the knowledge graph structure is transformed to an inverse covariance matrix of a Gaussian error to be expressed as the error term in the machine learning model. The training in an aspect jointly learns a prediction function of the machine learning model and the knowledge graph structure integrated as the error term represented by the inverse covariance matrix of the Gaussian error.",
                                "In an aspect, regularizing includes using a soft mask including a real value. In another aspect, regularizing includes using a hard mask including a binary value. In an aspect, the machine learning model can be run to predict financial portfolio composition, for example, to optimize an investment portfolio.",
                                "In an aspect, a user interface can be provided for allowing a user to configure a type of the machine learning model, the time series data and the knowledge graph structure.",
                                "FIG. 4 is a diagram illustrating a tool for building a machine learning model in a cloud-based computing environment in an embodiment. Users such as analysts or portfolio managers 402, 404 may access the functionalities of the tool via a user interface and network such as an Internet and/or intranet 406, 408. Data and model repositories 410, 412 can store input and output data, such as the time series data, knowledge graph structure data, and also a plurality of machine learning models. API services 414, 416, 418 provide interfaces to a model service 420 building and/or running a model. A deep learning and/or machine learning computing service engine 422 works with the service 420 and a model builder 424 to provide a requested service, for example, building a machine learning model as described herein, and/or running a built machine learning model. The cloud-based system can be different types of cloud, e.g., as shown at 426. To end users, for example, a knowledge-based portfolio optimization system can be provided for forecasting asset selection, forecasting results and optimized portfolio.",
                                "FIG. 5 is a diagram showing a user interface of a tool for performing forecasting asset selection in an embodiment. The user interface, for example, can be run on a user machine (e.g., shown at 406, 418 in FIG. 5), which can include communication or network capabilities, for instance, for connecting and communicating with one or more API services on a remote system. In another aspect, the user interface can interact with a standalone system, for example, not limited to a cloud-based system. The display screen of the user interface shows an interface for performing forecasting asset selection. For example, asset class, market and sector can be selected for the time series model. Types of knowledge graphs can also be selected or configured. In an embodiment, more than one knowledge graph can be selected. For example, the user can select or directly upload list of assets to forecast its future and construct the portfolio. Running the built model can produce forecast prediction, for example, which can be visualized graphically. For example, a plot of prediction values can be provided along a time line, e.g., a 2-dimensional graph having x-y axis, one axis representing time and another axis representing the prediction value. Learned correlation structure (e.g., knowledge graph structure) among entities associated with the time series data can also be visualized, for example, with nodes and edges connecting the nodes having correlations.",
                                "FIG. 6 is a diagram showing components of a system in one embodiment that can perform knowledge graph-based learning, for example, for time series prediction, in an embodiment. The system, for example, can perform multi-dimensional financial prediction. One or more hardware processors 602 such as a central processing unit (CPU), a graphic process unit (GPU), and/or a Field Programmable Gate Array (FPGA), an application specific integrated circuit (ASIC), and/or another processor, may be coupled with a memory device 604, and generate a prediction model and forecast predictions. A memory device 604 may include random access memory (RAM), read-only memory (ROM) or another memory device, and may store data and/or processor instructions for implementing various functionalities associated with the methods and/or systems described herein. One or more processors 602 may execute computer instructions stored in memory 604 or received from another computer device or medium. A memory device 604 may, for example, store instructions and/or data for functioning of one or more hardware processors 602, and may include an operating system and other program of instructions and/or data. One or more hardware processors 602 may receive input, for example, including time series data and one or more knowledge graphs or knowledge graph structures. For instance, at least one hardware processor 602 may structure a machine learning model to forecast a prediction using the time series data, the machine learning model structured to integrate the knowledge graph structure as an error term in the machine learning model. At least one hardware processor 602 may train the machine learning model to forecast the prediction based on the time series data and the knowledge graph structure, at least one hardware processor 602 configured to regularize the error term for sparsity during training. In one aspect, time series data and/or knowledge graph structure data may be stored in a storage device 606 or received via a network interface 608 from a remote device, and may be temporarily loaded into a memory device 604 for building or generating the prediction model. The learned prediction model may be stored on a memory device 604, for example, for running by one or more hardware processors 602. One or more hardware processors 602 may be coupled with interface devices such as a network interface 608 for communicating with remote systems, for example, via a network, and an input/output interface 610 for communicating with input and/or output devices such as a keyboard, mouse, display, and/or others.",
                                "FIG. 7 illustrates a schematic of an example computer or processing system that may implement a system in one embodiment. The computer system is only one example of a suitable processing system and is not intended to suggest any limitation as to the scope of use or functionality of embodiments of the methodology described herein. The processing system shown may be operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well-known computing systems, environments, and/or configurations that may be suitable for use with the processing system shown in FIG. 7 may include, but are not limited to, personal computer systems, server computer systems, thin clients, thick clients, handheld or laptop devices, multiprocessor systems, microprocessor-based systems, set top boxes, programmable consumer electronics, network PCs, minicomputer systems, mainframe computer systems, and distributed cloud computing environments that include any of the above systems or devices, and the like.",
                                "The computer system may be described in the general context of computer system executable instructions, such as program modules, being run by a computer system. Generally, program modules may include routines, programs, objects, components, logic, data structures, and so on that perform particular tasks or implement particular abstract data types. The computer system may be practiced in distributed cloud computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed cloud computing environment, program modules may be located in both local and remote computer system storage media including memory storage devices.",
                                "The components of computer system may include, but are not limited to, one or more processors or processing units 12, a system memory 16, and a bus 14 that couples various system components including system memory 16 to processor 12. The processor 12 may include a module 30 that performs the methods described herein. The module 30 may be programmed into the integrated circuits of the processor 12, or loaded from memory 16, storage device 18, or network 24 or combinations thereof.",
                                "Bus 14 may represent one or more of any of several types of bus structures, including a memory bus or memory controller, a peripheral bus, an accelerated graphics port, and a processor or local bus using any of a variety of bus architectures. By way of example, and not limitation, such architectures include Industry Standard Architecture (ISA) bus, Micro Channel Architecture (MCA) bus, Enhanced ISA (EISA) bus, Video Electronics Standards Association (VESA) local bus, and Peripheral Component Interconnects (PCI) bus.",
                                "Computer system may include a variety of computer system readable media. Such media may be any available media that is accessible by computer system, and it may include both volatile and non-volatile media, removable and non-removable media.",
                                "System memory 16 can include computer system readable media in the form of volatile memory, such as random access memory (RAM) and/or cache memory or others. Computer system may further include other removable/non-removable, volatile/non-volatile computer system storage media. By way of example only, storage system 18 can be provided for reading from and writing to a non-removable, non-volatile magnetic media (e.g., a \u201chard drive\u201d). Although not shown, a magnetic disk drive for reading from and writing to a removable, non-volatile magnetic disk (e.g., a \u201cfloppy disk\u201d), and an optical disk drive for reading from or writing to a removable, non-volatile optical disk such as a CD-ROM, DVD-ROM or other optical media can be provided. In such instances, each can be connected to bus 14 by one or more data media interfaces.",
                                "Computer system may also communicate with one or more external devices 26 such as a keyboard, a pointing device, a display 28, etc.; one or more devices that enable a user to interact with computer system; and/or any devices (e.g., network card, modem, etc.) that enable computer system to communicate with one or more other computing devices. Such communication can occur via Input/Output (I/O) interfaces 20.",
                                "Still yet, computer system can communicate with one or more networks 24 such as a local area network (LAN), a general wide area network (WAN), and/or a public network (e.g., the Internet) via network adapter 22. As depicted, network adapter 22 communicates with the other components of computer system via bus 14. It should be understood that although not shown, other hardware and/or software components could be used in conjunction with computer system. Examples include, but are not limited to: microcode, device drivers, redundant processing units, external disk drive arrays, RAID systems, tape drives, and data archival storage systems, etc.",
                                "It is understood in advance that although this disclosure may include a description on cloud computing, implementation of the teachings recited herein are not limited to a cloud computing environment. Rather, embodiments of the present invention are capable of being implemented in conjunction with any other type of computing environment now known or later developed. Cloud computing is a model of service delivery for enabling convenient, on-demand network access to a shared pool of configurable computing resources (e.g. networks, network bandwidth, servers, processing, memory, storage, applications, virtual machines, and services) that can be rapidly provisioned and released with minimal management effort or interaction with a provider of the service. This cloud model may include at least five characteristics, at least three service models, and at least four deployment models.",
                                "Characteristics are as follows:",
                                "On-demand self-service: a cloud consumer can unilaterally provision computing capabilities, such as server time and network storage, as needed automatically without requiring human interaction with the service's provider.",
                                "Broad network access: capabilities are available over a network and accessed through standard mechanisms that promote use by heterogeneous thin or thick client platforms (e.g., mobile phones, laptops, and PDAs).",
                                "Resource pooling: the provider's computing resources are pooled to serve multiple consumers using a multi-tenant model, with different physical and virtual resources dynamically assigned and reassigned according to demand. There is a sense of location independence in that the consumer generally has no control or knowledge over the exact location of the provided resources but may be able to specify location at a higher level of abstraction (e.g., country, state, or datacenter).",
                                "Rapid elasticity: capabilities can be rapidly and elastically provisioned, in some cases automatically, to quickly scale out and rapidly released to quickly scale in. To the consumer, the capabilities available for provisioning often appear to be unlimited and can be purchased in any quantity at any time.",
                                "Measured service: cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service (e.g., storage, processing, bandwidth, and active user accounts). Resource usage can be monitored, controlled, and reported providing transparency for both the provider and consumer of the utilized service.",
                                "Service Models are as follows:",
                                "Software as a Service (SaaS): the capability provided to the consumer is to use the provider's applications running on a cloud infrastructure. The applications are accessible from various client devices through a thin client interface such as a web browser (e.g., web-based e-mail). The consumer does not manage or control the underlying cloud infrastructure including network, servers, operating systems, storage, or even individual application capabilities, with the possible exception of limited user-specific application configuration settings.",
                                "Platform as a Service (PaaS): the capability provided to the consumer is to deploy onto the cloud infrastructure consumer-created or acquired applications created using programming languages and tools supported by the provider. The consumer does not manage or control the underlying cloud infrastructure including networks, servers, operating systems, or storage, but has control over the deployed applications and possibly application hosting environment configurations.",
                                "Infrastructure as a Service (IaaS): the capability provided to the consumer is to provision processing, storage, networks, and other fundamental computing resources where the consumer is able to deploy and run arbitrary software, which can include operating systems and applications. The consumer does not manage or control the underlying cloud infrastructure but has control over operating systems, storage, deployed applications, and possibly limited control of select networking components (e.g., host firewalls).",
                                "Deployment Models are as follows:",
                                "Private cloud: the cloud infrastructure is operated solely for an organization. It may be managed by the organization or a third party and may exist on-premises or off-premises.",
                                "Community cloud: the cloud infrastructure is shared by several organizations and supports a specific community that has shared concerns (e.g., mission, security requirements, policy, and compliance considerations). It may be managed by the organizations or a third party and may exist on-premises or off-premises.",
                                "Public cloud: the cloud infrastructure is made available to the general public or a large industry group and is owned by an organization selling cloud services.",
                                "Hybrid cloud: the cloud infrastructure is a composition of two or more clouds (private, community, or public) that remain unique entities but are bound together by standardized or proprietary technology that enables data and application portability (e.g., cloud bursting for load-balancing between clouds).",
                                "A cloud computing environment is service oriented with a focus on statelessness, low coupling, modularity, and semantic interoperability. At the heart of cloud computing is an infrastructure that includes a network of interconnected nodes.",
                                "Referring now to FIG. 8, illustrative cloud computing environment 50 is depicted. As shown, cloud computing environment 50 includes one or more cloud computing nodes 10 with which local computing devices used by cloud consumers, such as, for example, personal digital assistant (PDA) or cellular telephone 54A, desktop computer 54B, laptop computer 54C, and/or automobile computer system 54N may communicate. Nodes 10 may communicate with one another. They may be grouped (not shown) physically or virtually, in one or more networks, such as Private, Community, Public, or Hybrid clouds as described hereinabove, or a combination thereof. This allows cloud computing environment 50 to offer infrastructure, platforms and/or software as services for which a cloud consumer does not need to maintain resources on a local computing device. It is understood that the types of computing devices 54A-N shown in FIG. 8 are intended to be illustrative only and that computing nodes 10 and cloud computing environment 50 can communicate with any type of computerized device over any type of network and/or network addressable connection (e.g., using a web browser).",
                                "Referring now to FIG. 9, a set of functional abstraction layers provided by cloud computing environment 50 (FIG. 8) is shown. It should be understood in advance that the components, layers, and functions shown in FIG. 9 are intended to be illustrative only and embodiments of the invention are not limited thereto. As depicted, the following layers and corresponding functions are provided:",
                                "Hardware and software layer 60 includes hardware and software components. Examples of hardware components include: mainframes 61; RISC (Reduced Instruction Set Computer) architecture based servers 62; servers 63; blade servers 64; storage devices 65; and networks and networking components 66. In some embodiments, software components include network application server software 67 and database software 68.",
                                "Virtualization layer 70 provides an abstraction layer from which the following examples of virtual entities may be provided: virtual servers 71; virtual storage 72; virtual networks 73, including virtual private networks; virtual applications and operating systems 74; and virtual clients 75.",
                                "In one example, management layer 80 may provide the functions described below. Resource provisioning 81 provides dynamic procurement of computing resources and other resources that are utilized to perform tasks within the cloud computing environment. Metering and Pricing 82 provide cost tracking as resources are utilized within the cloud computing environment, and billing or invoicing for consumption of these resources. In one example, these resources may include application software licenses. Security provides identity verification for cloud consumers and tasks, as well as protection for data and other resources. User portal 83 provides access to the cloud computing environment for consumers and system administrators. Service level management 84 provides cloud computing resource allocation and management such that required service levels are met. Service Level Agreement (SLA) planning and fulfillment 85 provide pre-arrangement for, and procurement of, cloud computing resources for which a future requirement is anticipated in accordance with an SLA.",
                                "Workloads layer 90 provides examples of functionality for which the cloud computing environment may be utilized. Examples of workloads and functions which may be provided from this layer include: mapping and navigation 91; software development and lifecycle management 92; virtual classroom education delivery 93; data analytics processing 94; transaction processing 95; and knowledge graph-based learning processing 96.",
                                "The present invention may be a system, a method, and/or a computer program product at any possible technical detail level of integration. The computer program product may include a computer readable storage medium (or media) having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.",
                                "The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be, for example, but is not limited to, an electronic storage device, a magnetic storage device, an optical storage device, an electromagnetic storage device, a semiconductor storage device, or any suitable combination of the foregoing. A non-exhaustive list of more specific examples of the computer readable storage medium includes the following: a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), a static random access memory (SRAM), a portable compact disc read-only memory (CD-ROM), a digital versatile disk (DVD), a memory stick, a floppy disk, a mechanically encoded device such as punch-cards or raised structures in a groove having instructions recorded thereon, and any suitable combination of the foregoing. A computer readable storage medium, as used herein, is not to be construed as being transitory signals per se, such as radio waves or other freely propagating electromagnetic waves, electromagnetic waves propagating through a waveguide or other transmission media (e.g., light pulses passing through a fiber-optic cable), or electrical signals transmitted through a wire.",
                                "Computer readable program instructions described herein can be downloaded to respective computing/processing devices from a computer readable storage medium or to an external computer or external storage device via a network, for example, the Internet, a local area network, a wide area network and/or a wireless network. The network may comprise copper transmission cables, optical transmission fibers, wireless transmission, routers, firewalls, switches, gateway computers and/or edge servers. A network adapter card or network interface in each computing/processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing/processing device.",
                                "Computer readable program instructions for carrying out operations of the present invention may be assembler instructions, instruction-set-architecture (ISA) instructions, machine instructions, machine dependent instructions, microcode, firmware instructions, state-setting data, configuration data for integrated circuitry, or either source code or object code written in any combination of one or more programming languages, including an object oriented programming language such as Smalltalk, C++, or the like, and procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The computer readable program instructions may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider). In some embodiments, electronic circuitry including, for example, programmable logic circuitry, field-programmable gate arrays (FPGA), or programmable logic arrays (PLA) may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry, in order to perform aspects of the present invention.",
                                "Aspects of the present invention are described herein with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems), and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer readable program instructions.",
                                "These computer readable program instructions may be provided to a processor of a computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer, a programmable data processing apparatus, and/or other devices to function in a particular manner, such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function/act specified in the flowchart and/or block diagram block or blocks.",
                                "The computer readable program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other device to cause a series of operational steps to be performed on the computer, other programmable apparatus or other device to produce a computer implemented process, such that the instructions which execute on the computer, other programmable apparatus, or other device implement the functions/acts specified in the flowchart and/or block diagram block or blocks.",
                                "The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods, and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of instructions, which comprises one or more executable instructions for implementing the specified logical function(s). In some alternative implementations, the functions noted in the blocks may occur out of the order noted in the Figures. For example, two blocks shown in succession may, in fact, be accomplished as one step, run concurrently, substantially concurrently, in a partially or wholly temporally overlapping manner, or the blocks may sometimes be run in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.",
                                "The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms \u201ca\u201d, \u201can\u201d and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. As used herein, the term \u201cor\u201d is an inclusive operator and can mean \u201cand/or\u201d, unless the context explicitly or clearly indicates otherwise. It will be further understood that the terms \u201ccomprise\u201d, \u201ccomprises\u201d, \u201ccomprising\u201d, \u201cinclude\u201d, \u201cincludes\u201d, \u201cincluding\u201d, and/or \u201chaving,\u201d when used herein, can specify the presence of stated features, integers, steps, operations, elements, and/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and/or groups thereof. As used herein, the phrase \u201cin an embodiment\u201d does not necessarily refer to the same embodiment, although it may. As used herein, the phrase \u201cin one embodiment\u201d does not necessarily refer to the same embodiment, although it may. As used herein, the phrase \u201cin another embodiment\u201d does not necessarily refer to a different embodiment, although it may. Further, embodiments and/or components of embodiments can be freely combined with each other unless they are mutually exclusive.",
                                "The corresponding structures, materials, acts, and equivalents of all means or step plus function elements, if any, in the claims below are intended to include any structure, material, or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated."
                            ],
                            "subsections": [],
                            "outline_long": [
                                "present results for prediction of daily volatilities residuals",
                                "confirm optimization gains of KG-masked regularizers",
                                "discuss tradeoff between model complexity and computational scalability",
                                "report compact correlation structure of KG-input",
                                "visualize partial correlation sparsity patterns",
                                "demonstrate pseudolikelihood framework using knowledge graph",
                                "report graph convolutional network with partial correlation results",
                                "show improvement in prediction performance",
                                "show computational efficiency",
                                "show sparsity on covariance structure",
                                "discuss sparse Granger causality interpretation",
                                "disclose general framework for jointly learning forecasting models",
                                "illustrate method in an embodiment",
                                "receive time series data",
                                "receive knowledge graph structures",
                                "structure machine learning model to forecast prediction",
                                "integrate knowledge graph structure as error term",
                                "train machine learning model to forecast prediction",
                                "regularize error term for sparsity",
                                "include neural network in machine learning model",
                                "include graph neural network in machine learning model",
                                "transform knowledge graph structure to inverse covariance matrix",
                                "jointly learn prediction function and knowledge graph structure",
                                "use soft mask for regularizing",
                                "use hard mask for regularizing",
                                "run machine learning model to predict financial portfolio composition",
                                "provide user interface for configuring machine learning model",
                                "illustrate tool for building machine learning model",
                                "access functionalities of tool via user interface and network",
                                "store input and output data in data and model repositories",
                                "provide API services for building and running machine learning model",
                                "illustrate user interface of tool for performing forecasting asset selection",
                                "define cloud computing",
                                "describe resource pooling",
                                "describe rapid elasticity",
                                "describe measured service",
                                "introduce service models",
                                "describe software as a service",
                                "describe platform as a service",
                                "describe infrastructure as a service",
                                "introduce deployment models",
                                "describe private cloud",
                                "describe community cloud",
                                "describe public cloud",
                                "describe hybrid cloud",
                                "describe cloud computing environment",
                                "illustrate cloud computing environment",
                                "describe functional abstraction layers",
                                "describe hardware and software layer",
                                "describe virtualization layer",
                                "describe management layer",
                                "describe resource provisioning",
                                "describe metering and pricing",
                                "describe security",
                                "describe user portal",
                                "describe service level management",
                                "describe service level agreement planning",
                                "describe workloads layer",
                                "describe mapping and navigation",
                                "describe software development and lifecycle management",
                                "describe virtual classroom education delivery",
                                "describe data analytics processing",
                                "describe transaction processing",
                                "describe knowledge graph-based learning processing",
                                "describe computer program product",
                                "describe computer readable storage medium"
                            ],
                            "num_characters": 33361,
                            "outline_medium": [
                                "present results for prediction of daily volatilities residuals",
                                "confirm optimization gains of KG-masked regularizers",
                                "discuss tradeoff between model complexity and computational scalability",
                                "report partial correlation sparsity patterns under different regularizers",
                                "visualize correlation heatmaps",
                                "disclose pseudolikelihood framework using knowledge graph",
                                "report graph convolutional network with partial correlation results",
                                "summarize experiment results",
                                "disclose general framework for jointly learning forecasting models and correlation structures",
                                "illustrate method in an embodiment",
                                "receive time series data",
                                "receive knowledge graph structures",
                                "structure machine learning model to forecast prediction",
                                "train machine learning model to forecast prediction",
                                "illustrate tool for building machine learning model in cloud-based computing environment",
                                "illustrate user interface of tool for performing forecasting asset selection",
                                "define cloud computing characteristics",
                                "describe service models",
                                "describe deployment models",
                                "illustrate cloud computing environment",
                                "describe functional abstraction layers",
                                "describe hardware and software layer",
                                "describe virtualization layer",
                                "describe management layer",
                                "describe workloads layer",
                                "describe computer program product",
                                "describe computer readable storage medium",
                                "describe network transmission",
                                "describe computer readable program instructions",
                                "describe flowchart illustrations",
                                "describe block diagrams",
                                "describe computer implemented process",
                                "provide disclaimer and scope of invention"
                            ],
                            "outline_short": [
                                "present results of prediction of daily volatilities residuals",
                                "motivate KG-masked regularizers for faster optimization",
                                "discuss tradeoff between model complexity and computational scalability",
                                "illustrate correlation heatmaps for partial correlation sparsity patterns",
                                "report graph convolutional network with partial correlation results",
                                "summarize experiment results for prediction performance and computational efficiency",
                                "disclose general framework for jointly learning forecasting models and correlation structures",
                                "illustrate method for integrating knowledge graph structure into machine learning model",
                                "define cloud computing characteristics",
                                "describe service models",
                                "describe deployment models",
                                "illustrate cloud computing environment",
                                "describe functional abstraction layers",
                                "describe workloads layer",
                                "describe computer program product",
                                "describe flowchart illustrations and block diagrams"
                            ]
                        }
                    ],
                    "outline_long": [],
                    "num_characters": 0,
                    "outline_medium": [],
                    "outline_short": []
                }
            ],
            "outline_long": [],
            "num_characters": 0,
            "outline_medium": [],
            "outline_short": []
        }
    ],
    "claims": [
        "1. A computer-implemented method of training a machine learning prediction model, comprising:\nreceiving time series data;\nreceiving a knowledge graph structure including nodes and edges, the nodes representing entities associated with the time series data, the edges representing relationships between the nodes connected by the edges;\nstructuring a machine learning model to forecast a prediction using the time series data, the machine learning model structured to integrate the knowledge graph structure as an error term in the machine learning model; and\ntraining the machine learning model to forecast the prediction based on the time series data and the knowledge graph structure, the training including regularizing the error term for sparsity.",
        "2. The method of claim 1, wherein the machine learning model includes a neural network.",
        "3. The method of claim 1, wherein the machine learning model includes a graph neural network.",
        "4. The method of claim 1, wherein the knowledge graph structure is transformed to an inverse covariance matrix of a Gaussian error to be expressed as the error term in the machine learning model.",
        "5. The method of claim 4, wherein the training jointly learns a prediction function of the machine learning model and the knowledge graph structure integrated as the error term represented by the inverse covariance matrix of the Gaussian error.",
        "6. The method of claim 1, wherein the regularizing includes using a soft mask including a real value.",
        "7. The method of claim 1, wherein the regularizing includes using a hard mask including a binary value.",
        "8. The method of claim 1, wherein the prediction includes financial portfolio composition.",
        "9. The method of claim 1, further including providing a user interface for allowing a user to configure a type of the machine learning model, the time series data and the knowledge graph structure.",
        "10. A system comprising:\na processor;\na memory device coupled with the processor;\nthe processor configured to at least:\nreceive time series data;\nreceive a knowledge graph structure including nodes and edges, the nodes representing entities associated with the time series data, the edges representing relationships between the nodes connected by the edges;\nstructure a machine learning model to forecast a prediction using the time series data, the machine learning model structured to integrate the knowledge graph structure as an error term in the machine learning model; and\ntrain the machine learning model to forecast the prediction based on the time series data and the knowledge graph structure, the processor configured to regularize the error term for sparsity during training.",
        "11. The system of claim 10, wherein the machine learning model includes a neural network.",
        "12. The system of claim 10, wherein the machine learning model includes a graph neural network.",
        "13. The system of claim 10, wherein the knowledge graph structure is transformed to an inverse covariance matrix of a Gaussian error to be expressed as the error term in the machine learning model.",
        "14. The system of claim 13, wherein in training the machine learning model, the processor is configured to jointly learns a prediction function of the machine learning model and the knowledge graph structure integrated as the error term represented by the inverse covariance matrix of the Gaussian error.",
        "15. The system of claim 10, wherein the processor configured to regularize the error term using a soft mask including a real value.",
        "16. The system of claim 10, wherein the processor configured to regularize the error term using a hard mask including a binary value.",
        "17. The system of claim 10, wherein the prediction includes financial portfolio composition.",
        "18. The system of claim 10, further including a user interface configured to received from a user a selection of a type of the machine learning model, the time series data and the knowledge graph structure.",
        "19. A computer program product comprising a computer readable storage medium having program instructions embodied therewith, the program instructions readable by a device to cause the device to:\nreceive time series data;\nreceive a knowledge graph structure including nodes and edges, the nodes representing entities associated with the time series data, the edges representing relationships between the nodes connected by the edges;\nstructure a machine learning model to forecast a prediction using the time series data, the machine learning model structured to integrate the knowledge graph structure as an error term in the machine learning model; and\ntrain the machine learning model to forecast the prediction based on the time series data and the knowledge graph structure, the device caused to regularize the error term for sparsity during training.",
        "20. The computer program product of claim 19, wherein the machine learning model includes a neural network.",
        "21. The computer program product of claim 19, wherein the machine learning model includes a graph neural network.",
        "22. The computer program product of claim 19, wherein the knowledge graph structure is transformed to an inverse covariance matrix of a Gaussian error to be expressed as the error term in the machine learning model.",
        "23. The computer program product of claim 22, wherein in training the machine learning model, the device is caused to jointly learn a prediction function of the machine learning model and the knowledge graph structure integrated as the error term represented by the inverse covariance matrix of the Gaussian error.",
        "24. The computer program product of claim 19, wherein the prediction includes financial portfolio composition.",
        "25. A computer-implemented method of training a neural network model, comprising:\nreceiving financial time series data;\nreceiving a knowledge graph structure including nodes and edges, the nodes representing entities associated with the financial time series data, the edges representing relationships between the nodes connected by the edges;\nstructuring a neural network to forecast a prediction associated with a financial portfolio composition, using the financial time series data, the neural network structured to integrate the knowledge graph structure as an error term; and\ntraining the neural network to forecast the prediction based on the financial time series data and the knowledge graph structure, the training including regularizing the error term for sparsity,\nwherein the training jointly learns a prediction function of neural network and the knowledge graph structure integrated as the error term represented by an inverse covariance matrix of the Gaussian error."
    ]
}