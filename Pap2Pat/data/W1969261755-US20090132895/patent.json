{
    "id": "US20090132895",
    "authors": [
        "Anxiao Jiang",
        "Moshe Schwartz",
        "Jehoshua Bruck"
    ],
    "title": "ERROR CORRECTING CODES FOR RANK MODULATION",
    "date": "2008-11-20 00:00:00",
    "abstract": "We investigate error-correcting codes for a novel storage technology, which we call the rank-modulation scheme. In this scheme, a set of n cells stores information in the permutation induced by the different levels of the individual cells. The resulting scheme eliminates the need for discrete cell levels, and overshoot errors when programming cells (a serious problem that reduces the writing speed), as well as mitigates the problem of asymmetric errors. In this discussion, the properties of error correction in rank modulation codes are studied. We show that the adjacency graph of permutations is a subgraph of a multi-dimensional array of a special size, a property that enables code designs based on Lee-metric codes and L1-metric codes. We present a one-error-correcting code whose size is at least half of the optimal size. We also present additional error-correcting codes and some related bounds.",
    "sections": [
        {
            "title": "DESCRIPTION",
            "paragraphs": [],
            "subsections": [
                {
                    "title": "BACKGROUND",
                    "paragraphs": [
                        "The present invention relates to data storage devices and, more particularly, to error correction in data storage devices such as flash memory devices.",
                        "Flash memories are by far the most important type of electronic non-volatile memories (NVMs), accounting for nearly 90% of the NVM market. See, for example, the Web site of Saifun Semiconductors Ltd. (available at www.saifun.com) and Web-Feet Research, Inc. (available at www.web-feetresearch.com). Today, billions of flash memories are used in mobile, embedded, and mass-storage systems, mainly because of their high performance and physical durability. See, for example, P. Cappelletti et al., Chapter 5, \u201cMemory Architecture and Related Issues\u201d in Flash memories, Kluwer Academic Publishers, 1st Edition, 1999; and E. Gal and S. Toledo, ACM Computing Surveys, 37(2): 138-163 (2005). Well-known applications of flash memories include cell phones, digital cameras, USB flash drives, computers, sensors, and many more. They are now also replacing magnetic disks as hard disks, such as the 64 GB hard disk by SanDisk (see \u201cSanDisk launches 64 gigabyte solid state drives for notebook PCs, meeting needs for higher capacity,\u201d available at the Web site URL of http://biz.yahoo.com/cnw/070604/sandisk.html?.v=1). See also the Web article on the 256 GB hard disk by PQI (\u201cPQI unveils 256 GB solid state drive,\u201d available at the URL of www.guru3d.com/newsitem.php?id=5392). Based on the popular floating-gate technology, the dominance of flash memories is likely to continue.",
                        "However, there exist critical problems limiting the improvement of flash memories with respect to their speed, reliability, longevity, and storage capacity. Flash memories have a limited lifetime due to the quality degradation caused by block erasures; a flash memory can endure only about 105\u02dc106 block erasures before it becomes no longer usable (see S. Aritome et al., Proceedings of the IEEE, 81(5):776-788 (1993), and P. Cappelletti et al., ibid. Removing charge from any single cell for data modification requires the block to be erased and all the 105 or so cells in it to be reprogrammed (or programmed to another block). The writing speed is constrained by a conservative cell-programming process that is about ten times slower than reading. The purpose of such conservative programming is to avoid over-programming, a serious error correctable only by block erasure and reprogramming. Data reliability is limited by errors caused by charge leakage, disturbs, and the like. See S. Aritome et al., ibid; P. Cappelletti et al., ibid; and P. Pavan et al., Proceedings of The IEEE, 85(8):1248-1271 (August 1997). The errors become more common when multi-level cells are used to increase the storage capacity.",
                        "New data storage modulation techniques that make more efficient use of the data storage cells in memory devices would be useful. Such new techniques should reduce the ill effects of over-programming of cells and increase the speed of data access.",
                        "New data storage modulation techniques will generate different types of error modalities as compared with conventional data storage modulation schemes. Systems that implement new data storage techniques will require error correction techniques tailored for the new modulation techniques.",
                        "From the discussion above, it should be apparent that there is a need for new error correction techniques that can recover from transmission errors resulting from new data modulation techniques and from errors in charge levels. The present invention satisfies these needs."
                    ],
                    "subsections": [],
                    "outline_long": [
                        "introduce flash memories",
                        "describe market share",
                        "discuss applications",
                        "describe limitations",
                        "explain block erasures",
                        "discuss writing speed constraints",
                        "motivate new modulation techniques"
                    ],
                    "num_characters": 3548,
                    "outline_medium": [
                        "introduce flash memories",
                        "limitations of flash memories",
                        "need for new data storage modulation techniques"
                    ],
                    "outline_short": [
                        "motivate flash memory limitations"
                    ]
                },
                {
                    "title": "SUMMARY",
                    "paragraphs": [
                        "In view of the above circumstances, a new scheme, the rank modulation scheme, for storing data in flash memories is provided. It aims at eliminating the risk of cell over-programming, and reducing the effect of asymmetric errors. Given a set of n cells with distinct charge levels, the rank of a cell indicates the relative position of its own charge level, and the ranks of the n cells induces a permutation of {1, 2, . . . , n}. The rank modulation scheme uses this permutation to store information. To write data into the n cells, we first program the cell with the lowest rank, then the cell with the second lowest rank, and finally the cell with the highest rank. While programming the cell with rank i (1\u2266i\u2266n), the only requirement is to make its charge level be above that of the cell with rank i\u22121.",
                        "Devices that operate in accordance with the rank modulation scheme decode a codeword received over an information channel from a source, wherein the codeword indicates n cell values that comprise a virtual cell in which relative rank ordering of the n cell values determines a permutation comprising one of n! permutations. Such devices determine if the received codeword comprises a valid codeword of a rank modulation code wherein if the received codeword is determined to be a valid codeword, then a corresponding value for the codeword is computed, and if the received codeword is determined not to be a valid codeword, then a corrected codeword is determined that differs from the received codeword by a value r, where r is the number of errors in a codeword that the rank modulation code can correct, and a corresponding value for the corrected codeword is computed.",
                        "Devices that operate in accordance with the rank modulation scheme encode a data value to be encoded into a codeword, wherein the codeword indicates n cell values that comprise a virtual cell in which relative rank ordering of the n cell values determines a permutation comprising one of n! permutations. Such devices encode by generating a permutation A corresponding to the codeword, wherein A is given by A=[a1, a2, . . . , an] integer values such that the [a1, a2, . . . , an] permutation conforms to a rank modulation scheme for data representation, and providing the permutation to a data destination over an information channel. Such encoding can be performed by determining coordinates that correspond to a codeword, wherein the coordinates specify a value that can correct erroneously read coordinates that differs from the correct coordinates by a distance r. Thus, encoding can be accomplished with a modulation code capable of correcting r errors in a received codeword.",
                        "The rank modulation scheme eliminates the need to use the actual values of cell levels to store information. Instead, the relative ranks of cell levels are used. Since there is no risk of over-programming and the cell charge levels can take continuous values, a substantially less conservative cell programming method can be used and the writing speed can be improved. In addition, asymmetric errors become less serious, because when cell levels drift in the same direction, their ranks are not affected as much as their absolute values. This way both the writing speed and the data reliability can be improved. The cell levels can be represented by, for example, charge levels in memory cells and signal features of a transmitted signal, wherein the signal features can comprise signal frequency, magnitude, or time duration. The cell values are modulated in accordance with the rank modulation scheme so that a group of cell values comprise a virtual cell in which relative rank ordering defines a permutation.",
                        "An error-correcting code for the rank modulation scheme can be produced by generating n! permutations, wherein the data storage device is configured to operate such that n cells of the storage device comprise a virtual cell in which relative rank ordering of the n cells determines a permutation of the n! permutations, selecting one of the n! permutations as a starting permutation, and retaining only the generated permutations having a distance greater than or equal to (2r+1), wherein the retained generated permutations comprise a rank modulation codeword alphabet that define a modulation code capable of correcting r errors in a transmitted codeword.",
                        "Other features and advantages of the present invention should be apparent from the following description of exemplary embodiments, which illustrate, by way of example, aspects of the invention."
                    ],
                    "subsections": [],
                    "outline_long": [
                        "introduce rank modulation scheme",
                        "describe cell programming",
                        "explain permutation-based data storage",
                        "describe decoding process",
                        "describe encoding process",
                        "explain benefits of rank modulation",
                        "describe error correction capabilities",
                        "discuss modulation code generation",
                        "preview other features and advantages"
                    ],
                    "num_characters": 4532,
                    "outline_medium": [
                        "introduce rank modulation scheme",
                        "describe decoding process",
                        "describe encoding process",
                        "advantages of rank modulation scheme"
                    ],
                    "outline_short": [
                        "introduce rank modulation scheme",
                        "describe error correction capabilities"
                    ]
                },
                {
                    "title": "DETAILED DESCRIPTION",
                    "paragraphs": [
                        "The contents of this Detailed Description are organized under the following headings:\n\n\n- - I. Introduction to Rank Modulation\n  - II. Definitions and Notation\n  - III. Properties and Bounds\n  - IV. Error Correction\n  - V. Designing Error Correcting Rank Modulation Codes\n  - VI. More Codes and Embodiments"
                    ],
                    "subsections": [
                        {
                            "title": "I. INTRODUCTION TO RANK MODULATION",
                            "paragraphs": [
                                "A novel data storage modulation scheme called the rank-modulation scheme is described further in a co-pending U.S. patent application by Anxiao Jiang, et al. (see \u201cRank Modulation for Memory Devices\u201d by A. Jiang et al. filed Nov. 20, 2008). The contents of that application are incorporated herein by reference.",
                                "The rank modulation scheme organizes a set of memory cells into a \u201cvirtual cell\u201d such that each virtual cell stores information in a permutation determined by the different charge levels of the individual cells in the set. That is, the relative rank of the charge levels in the cells of a single set determines a permutation ordering that represents a codeword. The resulting data storage scheme eliminates the need for determining discrete cell charge levels to determine codewords. Therefore, overshoot errors when programming cells (a serious problem that reduces the writing speed of conventional flash memories) are eliminated, and problems with asymmetric errors are mitigated.",
                                "In the rank modulation scheme, a set of n cells is grouped into a single virtual cell such that each of the n cells has a distinct charge level, and the relative charge level of a cell indicates its rank in the group. The set of n cells determines a permutation {1, 2, 3, . . . , n} that corresponds to a codeword. Thus, the permutation is used to store information. In a set of cells, the cell with the highest level has the highest (first) rank and is first in the permutation, the second-highest cell has the next rank, and so forth to define a permutation in order from highest level cell to lowest level cell, such as {3, 2, 1, 4} in the case of four cells. Thus, each permutation can correspond to a different codeword and thereby represent data.",
                                "FIG. 1 is a schematic representation of a memory cell arrangement in accordance with the rank modulation scheme wherein each rectangular box of FIG. 1 represents a conventional multilevel memory cell. FIG. 1 shows only four memory cells, for simplicity of illustration, but it should be understood that a typical data storage device, such as a flash memory device, will contain many more cells than illustrated in FIG. 1. The four memory cells in FIG. 1 are designated A1, A2, A3, A4 and represent a grouping of memory cells wherein the set of four cells determines a permutation given by A=[A1, A2, A3, A4] such that stored charge levels in the cells correspond to a codeword. For example, in FIG. 1, the cell A3 has the highest charge level, as indicated by the cross-hatching within the A3 box. The cell A2 has the next highest charge level, followed by A1 and then by A4. Thus, FIG. 1 represents a permutation of [3, 2, 1, 4].",
                                "For devices that store data in accordance with the rank modulation scheme, errors in reading data in the information channel (e.g., transmission errors between the memory cells and decoder) and errors in charge levels will generally involve transpositions of the relative rankings of the cells within a set of cells. For example, a set of cells might have charge levels that provide a stored permutation that might be read as [3, 1, 2, 4] rather than the correct permutation of [3, 2, 1, 4], thereby creating an error. In that erroneous reading, the positions of the \u201c1\u201d cell and the \u201c2\u201d cell are transposed. That is, cell \u201c1\u201d was read as having a greater charge level than cell \u201c2\u201d rather than the correct order, which would have reversed the two.",
                                "The rank modulation scheme is especially suited for multilevel cell constructions, such as multilevel flash memory devices. Error correction techniques for multilevel flash memory devices are quite well-known. Such techniques, however, are not very effective for the errors encountered with different modulation schemes, such as the rank modulation scheme. Errors in conventional flash memory devices involve correction of discrete charge level readings from cells. Errors in devices that use a rank modulation data scheme will not involve correction of discrete charge level, but will involve correction of transposition errors in the relative ranking of the cells within a set of cells.",
                                "A. Concepts and Motivation for Rank Modulation",
                                "As noted above, rank modulation uses the order (i.e., ranks) of cell levels, instead of their actual values. For example, if the charge levels of three cells are \u03c51=1.2, \u03c52=1.5, \u03c53=1.0, then the order of cell levels is [2, 1, 3], meaning that the \u201c2\u201d cell has the highest level and the \u201c3\u201d cell has the lowest level. If their levels are \u03c51=1.25, \u03c52=1.48, \u03c53=1.1, then the order is still [2, 1, 3] even though the actual cell levels have changed. Using cell rank order to represent data makes writing and rewriting much simpler, and the cell levels do not have to take discrete values. Instead, they can be continuous. In the above example, the full order of cell levels is used. As a more general (and powerful) scheme, we can use the partial order of cell levels to represent data.",
                                "A rank modulation coding scheme defines a mapping from the (partial) order of a set of cells' levels to data. It also defines a procedure for rewriting data. To change the cell levels from one order to another order, some cells' levels are raised, and they are raised with an important property: when a cell's level is being raised, the only requirement for its targeted level is that the targeted level is higher than some other cell's level. Because of this property, clearly over-programming will never happen in the rank modulation scheme. We will now illustrate rank modulation coding with an example."
                            ],
                            "subsections": [],
                            "outline_long": [
                                "motivate rank modulation",
                                "describe rank modulation scheme",
                                "explain virtual cell concept",
                                "illustrate permutation ordering",
                                "describe error correction challenges",
                                "introduce concepts and motivation for rank modulation",
                                "illustrate rank modulation coding scheme",
                                "describe rewriting procedure",
                                "highlight advantages of rank modulation coding",
                                "discuss error correction and joint coding",
                                "introduce error-correcting codes for rank modulation"
                            ],
                            "num_characters": 5562,
                            "outline_medium": [
                                "motivate rank modulation",
                                "describe rank modulation scheme",
                                "illustrate rank modulation scheme with example",
                                "discuss advantages of rank modulation",
                                "introduce error correction in rank modulation"
                            ],
                            "outline_short": [
                                "motivate rank modulation",
                                "describe rank modulation scheme"
                            ]
                        },
                        {
                            "title": "EXAMPLE 1",
                            "paragraphs": [
                                "FIGS. 2, 3, and 4 illustrate a rank modulation coding scheme that uses three cells to represent a ternary variable. The mapping from the order of cell levels to the variable is shown in FIG. 2. The procedure for rewriting is illustrated in FIG. 3. It is actually relatively simple by examination of the drawings; in a grouping of cells, if a variable's value is changed from i to j, then the j-th cell's level is raised to be the highest level. That is, in the example, if the data to be stored is \u201c1\u201d, then the level of the first cell is raised to be the highest level (pushed to the top); if the data to be stored is \u201c2\u201d, then the level of the second cell is pushed to the top; if the data to be stored is \u201c3\u201d, then the level of the third cell is pushed to the top. An example of rewriting is shown in FIGS. 4A, 4B, and 4C, where the represented variable changes as from 3\u21922\u21921, and the order of the cell levels changes as (3, 2, 1)\u2192(2, 3, 1)\u2192(1, 2, 3). FIG. 4A represents (3, 2, 1), with cell \u201c3\u201d having the highest charge; FIG. 4B represents (2, 3, 1); FIG. 4C represents (1, 2, 3). It should be noted that, for each change in ordering (and for each change in variable represented), only one cell is changed in value, so that it becomes the highest level (i.e., is pushed to the top). None of the other cell values are changed during a rewrite operation. The dotted lines represent the original charge levels of the respective cells.",
                                "It should be apparent that the data cannot be modified infinitely many times without any block erasure, because there is a finite maximum value for the cell level. The optimization objective of rank modulation coding is to achieve the optimal tradeoff between (1) storage capacity, and (2) the number of times data can be modified before the block erasure is needed. Rank modulation code features related to this objective are described further below and in the above-referenced co-pending U.S. patent application by Anxiao Jiang, et al. (see the U.S. patent application entitled \u201cRank Modulation for Memory Devices\u201d by A. Jiang et al. filed Nov. 20, 2008).",
                                "The advantages of rank modulation coding include: (1) Over-programming cannot happen. Consequently, cells can be safely programmed in a much less conservative way, and the writing speed can be substantially improved. Also, there will be no block erasure caused by over-programming; (2) Tolerating charge leakage. Charge leakage is a major problem for flash memories as it causes all cells to gradually lose charge. Since all the cell levels decrease, it changes the absolute values of cell levels substantially faster than it changes the order of cell levels. Actually, we can even intentionally introduce charge leakage. If it is well controlled, the data will remain unchanged when the cell levels decrease together, and block erasure will be significantly reduced, or possibly totally eliminated. (3) Improving storage capacity. Since cells can tolerate charge leakage better, the margin between cell levels can be set smaller, which improves the storage capacity.",
                                "Rank modulation coding provides a new way to program and store data. We can further improve this scheme by using the joint coding of data to improve load balance, and use error-correcting codes to improve data reliability. In addition, we can intentionally use controlled charge leakage to lower the cell levels uniformly without changing their ranks, thus reducing or even eliminating the need to erase blocks for rewriting data. The details on these topics will be further described below.",
                                "In this description, error-correcting codes for rank modulation are studied. Even though asymmetric drifts of cell levels are tolerated better by rank modulation, errors can still happen because the cell levels do not necessarily drift at the same rate. The above-referenced patent application (A. Jiang, et al., \u201cRank Modulation for Memory Devices\u201d filed Nov. 20, 2008) studies Gray codes and encoding/decoding algorithms for the rank modulation scheme.",
                                "We explore the properties associated with error-correcting rank-modulation codes. We show that the adjacency graph of permutations for n cells, which is induced by the error model, is a subgraph of a [2\u00d73\u00d7 . . . \u00d7n] linear array. This observation establishes a general method for designing error-correcting rank-modulation codes using Lee-metric error-correcting codes. We present a single-error-correcting code whose size is at least half of the maximum size. We also present results on additional error-correcting codes and some related bounds.",
                                "The rest of the description is organized as follows. In Section II some notations are defined. We continue in Section III, to investigate properties associated with permutations and error correction. In Section IV some code constructions are presented, and in Section V, more results on codes are presented. In Section VI, additional codes and embodiments are described."
                            ],
                            "subsections": [],
                            "outline_long": [
                                "illustrate rank modulation coding scheme",
                                "show mapping from order to variable",
                                "describe rewriting procedure",
                                "illustrate rewriting example",
                                "highlight single cell change",
                                "illustrate charge levels",
                                "describe rewriting process",
                                "show variable change",
                                "illustrate final charge levels"
                            ],
                            "num_characters": 4933,
                            "outline_medium": [
                                "illustrate rank modulation coding scheme",
                                "describe procedure for rewriting data",
                                "show example of rewriting data",
                                "discuss optimization objective of rank modulation coding"
                            ],
                            "outline_short": [
                                "illustrate rank modulation coding scheme",
                                "describe rewriting procedure"
                            ]
                        },
                        {
                            "title": "II. DEFINITIONS AND NOTATION",
                            "paragraphs": [
                                "Let n flash memory cells be denoted by cells numbered 1, 2, . . . , n. For 1\u2266i\u2266n, let Ci\u03b5 denote the charge level of cell i. The ranks of the n cells is a permutation of {1, 2, . . . , n}. If the permutation is [a1, a2, . . . , an], then ca1>ca2> . . . >can. Here the cell a1 has the highest rank and the cell an has the lowest rank.",
                                "A rank-modulation scheme uses the ranks (i.e, the permutation) to store information. Let Sn denote the set of n! permutations. Let Q={1, 2, . . . , q} denote the alphabet of the symbol stored in the n cells. The rank-modulation scheme defines a mapping D: Sn\u2192X Q.",
                                "Given a permutation, an adjacent transposition is the local exchange of two adjacent elements in the permutation, so that: [a1, . . . , ai\u22121, ai, ai+1, ai+2, . . . , an] is changed to [a1, . . . , ai\u22121, ai+1, ai, ai+2, . . . , an].",
                                "In this model of representation, the minimal change to a permutation caused by charge-level drift is a single adjacent transposition. We measure the number of errors by the minimum number of adjacent transpositions needed to change the permutation from its original value to its erroneous value. For example, if the errors change the permutation from [2, 1, 3, 4] to [2, 3, 4, 1], the number of errors is two, because at least two adjacent transpositions are needed to change one into the other: [2, 1, 3, 4]\u2192[2, 3, 1, 4]\u2192[2, 3, 4, 1].",
                                "For two permutations A and B, define their distance, d(A, B), as the minimal number of adjacent transposition; needed to change A into B. This distance measure is called the Kendall Tau Distance in the statistics and machine-learning community, and it induces a metric over Sn. See, for example, Kendall M. et al., Rank correlation methods, Chapter 1 and Chapter 2, Oxford University Press, NY, (1990). If d(A, B)=1, then A and B are called adjacent. Any two permutations of Sn are at distance at most",
                                "\\(\\frac{n\ue8a0\\left( {n - 1} \\right)}{2}\\)",
                                "from each other. Two permutations of maximum distance are a reverse of each other. The distance between permutations is symmetric and satisfies the triangle inequality, so it is a metric. It equals the number of inversions for the two permutations.",
                                "Given the definition of distance, the size of errors (also called the number of errors) can also be defined as follows. Consider rank modulation codes that use the full order of n cell levels to represent data. The full order is a permutation of 1, 2, . . . , n, as described earlier. Errors make the permutation change through a sequence of adjacent transpositions. So the size of errors can be defined in the following way. Given two permutations A and B, as described earlier, the distance between them, d(A, B), is defined as the minimum number of adjacent transpositions needed to change one into the other. For example, the distance between (2, 1, 3, 4) and (1, 4, 2, 3) is three, because at least three adjacent transpositions are needed to change one into the other:\n\n\n- - (2, 1, 3, 4)\n    (1, 2, 3, 4)\n    (1, 2, 4, 3)\n    (1, 4, 2, 3).  \n    If errors cause a permutation A to become B, we define the size of\n    the errors to be d(A, B).",
                                "Define the Permutation Transition Graph as follows: the graph has n! vertices, which correspond to the n! permutations; two vertices are adjacent if and only if their distance is one. Two examples of the graph are shown in FIG. 5A and FIG. 5B for n=3 and n=4, respectively. The permutation transition graph will also be referred to as the permutation adjacency graph, and will be described further below.",
                                "We have proved the following theorem (in this discussion, theorems, constructions, propositions, and the like will be numbered consecutively).",
                                "Theorem 1: The Permutation Transition Graph is a sub-graph of a 2\u00d73\u00d7 . . . \u00d7n array.",
                                "An example is shown in FIG. 5D for n=4, and the coordinates assigned to the permutation vertices are shown in FIG. 5C. The theorem leads to the following corollary.",
                                "Corollary 2: Any L1 error-correcting code in the 2\u00d73\u00d7 . . . \u00d7n array with minimum distance d is also an error-correcting code in the Permutation Transition Graph with minimum distance at least d.",
                                "Therefore, L1-metric codes and Lee-metric codes can be used for designing error-correcting rank modulation codes. The construction of error correcting codes for rank modulation coding will be described further below."
                            ],
                            "subsections": [],
                            "outline_long": [
                                "define flash memory cells",
                                "define charge levels",
                                "define ranks of cells",
                                "define permutation",
                                "define adjacent transposition",
                                "define distance between permutations",
                                "define Kendall Tau Distance",
                                "define size of errors"
                            ],
                            "num_characters": 4328,
                            "outline_medium": [
                                "define notations for flash memory cells",
                                "define rank-modulation scheme",
                                "define adjacent transposition and distance between permutations",
                                "define permutation transition graph"
                            ],
                            "outline_short": [
                                "define notations for flash memory cells",
                                "define rank-modulation scheme and mapping"
                            ]
                        },
                        {
                            "title": "III. PROPERTIES AND BOUNDS",
                            "paragraphs": [
                                "In this section, we study the distance between permutations and the coordinate representation of permutations. We then study the sizes of balls, and derive an upper bound on the cardinality of error-correcting rank-modulation codes.",
                                "Theorem 3. Let A=[a1, a2, . . . , an] and B=[b1, b2 . . . , bn] be two permutations of length n. Suppose that bp=an for some 1\u2266p\u2266n. Let A\u2032=[a1, a2, . . . , an\u22121] and B\u2032=[b1 . . . , bp\u22121, bp+1, . . . , bn]. Then,",
                                "d(A,B)=d(A\u2032,B\u2032)+n\u2212p.",
                                "Proof: Let T be a sequence of d(A, B) adjacent transpositions that change A into B. Divide T into two subsequences T1 and T2, such that T1 contains those adjacent transpositions that involve an, and T2 contains those adjacent transpositions that do not involve an. (For instance, let us use t(ai, aj) to denote an adjacent transposition that exchanges the two numbers ai and aj. Suppose, for example, A=[2, 3, 1, 4], B=[3, 4, 1, 2], and the minimum number of adjacent transpositions change A into B as [2, 3, 1, 4]\u2192[3, 2, 1, 4]\u2192[3, 2, 4, 1]\u2192[3, 4, 2, 1]\u2192[3, 4, 1, 2]. Then T is t(2, 3), t(1, 4), t(2, 4), t(2, 1), T1 is t(2, 3), t(2, 1), and T2 is t(1, 4), t(2, 4).) Let |T|, |T1| and |T2| denote the number of adjacent transpositions in T, T1 and T2, respectively. Clearly, |T|=|T1|+|T2|.",
                                "It is not hard to see that T2 can also change A\u2032 into B\u2032. That is because for any ai\u2260an and aj\u2260an, an adjacent transposition in T1, which involves an, does not change the relative positions of ai and aj in A\u2032 (and its changed version). Meanwhile, an adjacent transposition t(ai, aj) in T2 changes the relative positions of ai and aj the same way for A and A\u2032(and their changed versions). Therefore, |T2|\u2267d(A\u2032, B\u2032). It can also be seen that |T1|\u2267n\u2212p, because every adjacent transposition moves an forward in the permutation by one position, and from A to B an has moved n\u2212p positions. So d(A,B)=|T|=|T1|+|T2|\u2267d(A\u2032,B\u2032)+n\u2212p.",
                                "Now we show that d(A, B)\u2266d(A\u2032, B\u2032)+n\u2212p. Consider such a sequence of d(A\u2032, B\u2032)+n\u2212p adjacent transpositions: the first d(A\u2032, B\u2032) of them change A=[A\u2032, an] into [B\u2032, an], and the next n\u2212p of them keep moving an forward and thus change [B\u2032, an] into B. So d(A, B)\u2266d(A\u2032, B\u2032)+n\u2212p. It follows that d(A, B)=d(A\u2032, B\u2032)+n\u2212p.",
                                "The above theorem (Theorem 3) shows a recursive algorithm for computing the distance between two permutations. Let A=[a1, a2, . . . , an] and B=[b1, b2 . . . , bn] be two permutations. For 1\u2266i\u2266n, let Ai denote [a1, a2, . . . , ai], let Bi denote the subsequence of B that contains only those numbers in Ai, and let pi denote the position of ai in Bi. Then, since d(A1, B1)=0 and d(Ai, Bi)=d(Ai\u22121, Bi\u22121)+i\u2212pi, for i=2, 3, . . . , n, we get",
                                "\\({d\ue8a0\\left( {A,B} \\right)} = {{d\ue8a0\\left( {A_{n},B_{n}} \\right)} = {\\frac{\\left( {n - 1} \\right)\ue89e\\left( {n + 2} \\right)}{2} - {\\sum\\limits_{i = 2}^{n}\ue89e\\; \ue89e{P_{i}.}}}}\\)",
                                "We now define a coordinate system for permutations. We fix A=[1, 2, . . . , n]. For every permutation B=[b1, b2, . . . , bn], we define its coordinates as XB=(2\u2212p2, 3\u2212p3, . . . , n\u2212pn). Here pi is defined as above for 2\u2266i\u2266n regarding the position of ai in the subsequence Bi. Clearly, if XB=(x1, x2, . . . , xn\u22121), then 0\u2266xi\u2266i for 1\u2266i\u2266n\u22121."
                            ],
                            "subsections": [],
                            "outline_long": [
                                "study distance between permutations",
                                "study coordinate representation",
                                "study sizes of balls",
                                "derive upper bound on error-correcting codes",
                                "prove theorem on distance between permutations",
                                "illustrate recursive algorithm for computing distance"
                            ],
                            "num_characters": 3145,
                            "outline_medium": [
                                "study distance between permutations",
                                "study coordinate representation of permutations",
                                "derive upper bound on cardinality of error-correcting rank-modulation codes"
                            ],
                            "outline_short": [
                                "study distance between permutations and coordinate representation"
                            ]
                        },
                        {
                            "title": "EXAMPLE 2",
                            "paragraphs": [
                                "Let A=[1, 2, 3, 4, 5]. Then XA=(0, 0, 0, 0). If B=[3, 4, 2, 1, 5], then XB=(1, 2, 2, 0). If B=[5, 4, 3, 2, 1], then XB=(1, 2, 3, 4). The full set of permutations and their respective coordinates are shown in FIGS. 6A, 6B for the case of n=3 and in FIGS. 7A, 7B for the case of n=4.",
                                "The details of how to determine coordinates from a permutation will be explained further for n=5 in Example 2 above. The example permutation is given as B=[3, 4, 2, 1, 5]. For the first subsequence B2, involving \u201c2\u201d, the subsequence B2 in the permutation is [2, 1], so p2=1, and (2\u2212p2)=1. For the next subsequence, involving \u201c3\u201d, the B3 permutation subsequence is [3, 2, 1], so p3=1, and 3\u2212p3=2. For the subsequence involving \u201c4\u201d, the B4 subsequence is [3, 4, 2, 1], so p4=2, and 4\u2212p4=2. Lastly, for \u201c5\u201d, the subsequence is [3, 4, 2, 1, 5], so p5=5, and 5\u2212p5=0. Therefore, the coordinates of the permutation [3, 4, 2, 1, 5] are given by (1, 2, 2, 0). For the next case in the example, the example permutation is given as B=[5, 4, 3, 2, 1]. For the first subsequence \u201c2\u201d, the subsequence B2 in the permutation is \u201c2, 1\u201d, so p2=1, and 2\u2212p2=1. For \u201c3\u201d, the subsequence is \u201c3, 2, 1\u201d, so p3=1, and 3\u2212p3=2. For \u201c4\u201d, the subsequence is \u201c4, 3, 2, 1\u201d, so p4=1, and therefore 4\u2212p4=3. For \u201c5\u201d, the subsequence is \u201c5, 4, 3, 2, 1\u201d, so p5=1, and 5\u2212p5=4. And therefore the coordinates of the permutation [5, 4, 3, 2, 1] are given by (1, 2, 3, 4), as shown in Example 2.",
                                "The notions of permutations and corresponding coordinates lead us to the following useful theorem.",
                                "Theorem 4. Two permutations are identical if and only if they have the same coordinates.",
                                "Proof: It should be readily apparent that identical permutations will have the same coordinates. For the other direction, let B and B\u2032 be two permutations with the same coordinates. By induction, for i=2, 3, . . . , n, since Bi\u22121 and B\u2032i\u22121 are identical and pi=p\u2032i, it follows that ai has the same position in Bi and B\u2032i, so Bi is identical to B\u2032i. (Here Bi, B\u2032i, etc., are defined similarly as before.) That leads to the conclusion.",
                                "Theorem 5. Any vector (y1, y2, . . . , yn\u22121), 0\u2266yi\u2266i for 1\u2266i\u2266n\u22121, is a coordinate of some permutation in Sn.",
                                "Proof: The claim follows easily by noting that there are exactly n! such vectors, and n! permutations (each with a distinct coordinate vector, by the previous theorem).",
                                "Let A \u03b5Sn be a permutation. For any",
                                "\\({0 \\leq r \\leq \\frac{n\ue8a0\\left( {n - 1} \\right)}{2}},\\)",
                                "the set Br(A)={B\u03b5Sn|d(A, B)\u2266r} is a ball of radius r centered at A. A simple relabeling argument suffices to show that the size of a ball does not depend on the choice of center. We use |Br| to denote |Br(A)| for any A\u03b5S. We are interested in finding the value of |Br|. The following theorem presents a way to compute the size of a ball using polynomial multiplication.",
                                "Theorem 6. For",
                                "\\({0 \\leq r \\leq \\frac{n\ue8a0\\left( {n - 1} \\right)}{2}},\\)",
                                "let er denote the coefficient of xr in the polynomial",
                                "\\({\\Pi_{i = 1}^{n - 1}\ue89e{\\frac{x^{i + 1} - 1}{x - 1}.\\mspace{14mu} \ue89e{Then}}\ue89e\\mspace{14mu} \ue89e{\uf603B_{r}\uf604}} = {\\sum\\limits_{i = 0}^{r}\ue89e\\; \ue89e{e_{r}.}}\\)",
                                "Proof: Let A=[1, 2, . . . , n]. Let B=[b1, b2, . . . , bn] be a generic permutation. Let XB=(y1, y2, . . . , yn\u22121) be the coordinates of B. Then by the definition of coordinates, we get d(A, B)=\u03a3i=1n\u22121yi. By Theorems 4 and 5, the number of permutations at distance r from A equals the number of integer solutions to \u03a3i=1n\u22121yi=r such that 0\u2266yi\u2266i. That is equal to the coefficient of xr in the polynomial",
                                "\\({\\Pi_{i = 1}^{n - 1}\ue8a0\\left( {x^{i} + x^{i - 1} + \\ldots + 1} \\right)} = {\\Pi_{i = 1}^{n - 1}\ue89e{\\frac{x^{i + 1} - 1}{x - 1}.}}\\)",
                                "Thus, there are exactly er permutations at distance r from A, and |Br|=\u03a3i=0rer.",
                                "Polynomial multiplication is a well-studied area, and efficient algorithms exist. Theorem 4 induces an upper bound for the sizes of error-correcting rank-modulation codes. By the sphere-packing principle, for such a code that can correct r errors, its size (number of codewords) cannot exceed n!/|Br|. A higher number of errors correlates with a smaller number of codewords."
                            ],
                            "subsections": [],
                            "outline_long": [
                                "introduce permutation examples",
                                "calculate coordinates from permutations",
                                "explain theorem 4",
                                "prove theorem 4",
                                "explain theorem 5",
                                "prove theorem 5",
                                "introduce theorem 6",
                                "prove theorem 6"
                            ],
                            "num_characters": 4071,
                            "outline_medium": [
                                "illustrate permutation coordinates",
                                "derive coordinates from permutation",
                                "prove theorem on identical permutations",
                                "prove theorem on coordinate existence"
                            ],
                            "outline_short": [
                                "illustrate permutation coordinates",
                                "derive coordinates from permutation"
                            ]
                        },
                        {
                            "title": "IV. ERROR CORRECTION",
                            "paragraphs": [
                                "Rank modulation coding naturally tolerates errors better in two ways, compared to the traditional approach of using the absolute values of cell levels to represent data. First, the ranks of cell levels are more robust to the charge leakage problem, where all cells gradually lose charge and consequently, their levels all gradually decrease, as discussed earlier. Charge leakage exists in all flash memories, and is a major reliability issue. See, for example, S. Aritome et al., ibid; and P. Cappelletti et al., ibid. However, when the cell levels are lowered together, their ranks do not change as much as their absolute values. In the ideal case, the ranks may not change at all. Second, the ranks can tolerate single-cell errors better. Let \u0394 denote the minimum margin between two cell levels. If one cell level has an error, then that error has to have a magnitude of \u0394 or more to change the ranks. If the absolute values of cell levels are used to represent data, then only an error of magnitude \u0394/2 or less can be tolerated.",
                                "To reliably store data, error correction is an essential function of a storage system. In flash memories, errors can be caused by charge leakage, disturbs, or inaccurate reading. See, for example, S. Aritome et al., ibid; P. Cappelletti et al., ibid; and P. Pavan et al., ibid. Many kinds of errors in flash memories have asymmetric properties, including the charge-leakage problem (a major long-term mechanism that lowers cell levels) and numerous disturb problems. See, for example, S. Aritome et al., ibid; and P. Cappelletti et al., ibid. There are also other errors, including misreading and cell failure. For rank modulation coding, the symptom of errors is that the ranks of cell levels are changed. To correct errors, redundancy must be used.",
                                "The following example illustrates the concept of error correction code using the rank modulation scheme. Consider a rank modulation code that uses the full order of four cells' levels to modulate data. The full order is a permutation of 1, 2, 3, and 4. For a permutation, an adjacent transposition is the exchange of positions of two adjacent numbers. For example, for the permutation {2, 3, 1, 4}, an adjacent transposition can change it to be {3, 2, 1, 4}, {2, 1, 3, 4}, or {2, 3, 4, 1}. Errors cause adjacent transpositions. We study an error-correcting coding scheme that can correct one adjacent transposition, which is a very useful case in practice. The scheme is to use a subset of permutations, called codewords, to modulate data. We can choose the following five codewords:\n\n\n- - {1, 2, 4, 3}, {3, 1, 4, 2}, {3, 2, 4, 1}, {4, 1, 3, 2}, {4, 2, 3, 1}",
                                "When the error pattern causes an adjacent transposition in a codeword, we say that the distorted permutation is at distance one from the codeword. It is straightforward to verify that any of the 4!=24 permutations is within distance one from at most one of the five codewords. So the code can correct any single adjacent transposition. Error correction is important not only for data reliability, but also for storage capacity and cell programming speed, because there is always a tradeoff between the three. The strongest error-correcting codes can help achieve the optimal tradeoff.",
                                "We explore the properties associated with error-correcting rank-modulation codes. We show that the adjacency graph of permutations for n cells, which is induced by the error model, is a subgraph of a [2\u00d73\u00d7 . . . \u00d7n] linear array. This observation establishes a general method for designing error-correcting rank-modulation codes using Lee-metric error-correcting codes and L1-metric error-correcting codes. We present a single-error-correcting code whose size is at least half of the maximum size. We also present results on additional error-correcting codes and some related bounds."
                            ],
                            "subsections": [],
                            "outline_long": [
                                "motivate rank modulation coding",
                                "explain error tolerance",
                                "discuss error correction necessity",
                                "introduce error correction concept",
                                "illustrate error correction example",
                                "discuss error-correcting code properties",
                                "present error-correcting code results"
                            ],
                            "num_characters": 3814,
                            "outline_medium": [
                                "motivate rank modulation coding",
                                "describe error correction concept",
                                "illustrate error correction code example"
                            ],
                            "outline_short": [
                                "motivate error correction in rank modulation coding"
                            ]
                        },
                        {
                            "title": "V. ERROR-CORRECTING RANK MODULATION CODES",
                            "paragraphs": [
                                "In this section, we first study the topology of permutations, and use the result to derive a general construction for error-correcting rank-modulation codes based on Lee-metric codes and L1-metric codes. Next, we present a family of one-error-correcting codes whose size is at least half of the optimal size.",
                                "A. Embedding of Permutation Adjacency Graph",
                                "Define the adjacency graph of permutations, G=(V, E), as follows. The graph G has |v|=n! vertices, which represent the n! permutations. Two vertices u, v\u03b5V are adjacent if and only if d(u,v)=1. G is a regular undirected graph with degree n\u22121 and diameter",
                                "\\(\\frac{n\ue8a0\\left( {n - 1} \\right)}{2}.\\)",
                                "To study the topology of G, we begin with the following theorem.",
                                "Theorem 7. For two permutations A=[a1, a2, . . . , an] and B=[b1, b2, . . . , bn], let their coordinates be XA=(x1, x2, . . . , xn\u22121) and XB=(y1, y2, . . . , yn\u22121). A and B are adjacent if and only if they satisfy the following two conditions:",
                                "Condition 1: \u03a3i=1n\u22121|xi\u2212yi|=1.",
                                "Condition 2: There do not exist i, j\u03b5{1, 2, . . . , n}, where i<j\u22121, such that (1) ai=bj, aj=bi; (2) for any k where k\u2260i and k\u2260j, ak=bk; (3) for any k where i\u2266k\u2266j, ak>bi and ak>bj.",
                                "Proof. The proof is by induction. When n=2, the theorem is easily true. That serves as the base case. Now assume that the theorem is true for n=2, 3, . . . , N\u22121. We will prove that it is also true when n=N. First, we will show that if the two permutations are adjacent, then \u03a3i=1N\u22121|xi\u2212yi|=1.",
                                "Suppose A and B are adjacent. Consider the two integers z1, z2 such that the z1-th element in A and the z2-th element in B are both N. There are two cases. Case 1: z1=z2. In this case, xN\u22121=yN\u22121 by definition. Since the two permutations are adjacent, which means that we can change one into the other by switching two numbers in adjacent positions, those two positions cannot include z1=z2. So if we remove the number N from the two permutations A, B, the two shorter permutations are also adjacent. The coordinates of those shorter permutations are (x1, x2, . . . , xN\u22122) and (y1, y2, . . . , yN\u22122). By induction, \u03a3i=1N\u22122|xi\u2212yi|=1. Since |xN\u22121\u2212yN\u22121|=0, we get \u03a3i=1N\u22121|xi\u2212yi|=1. Case 2: z1\u2260z2. In this case, since A, B are adjacent, A can be changed into B by switching the z1-th number and the z2-th number. Then |z1\u2212z2|=1, and therefore, |xN\u22121\u2212yN\u22121=1, and for any z\u2260z1, z2, we have xz=yz. So \u03a3i=1N\u22121|xi\u2212yi|=1. Thus, if the two permutations A and B are adjacent, Condition 1 is true.",
                                "If A and B are adjacent, then Condition 2 is also true, for the following simple reason: if the two integers i, j described in Condition 2 exist, then there would be no way to switch ai and aj with only one adjacent transposition in order to change A into B. That would be a contradiction.",
                                "Now we prove the other direction: if the two conditions are true, then A and B are adjacent. Assume that the two conditions are true. Then, since \u03a3i=1N\u22121|xi\u2212yi|=1, there are two cases. Case 1: |xN\u22121\u2212yN\u22121|=1 and for any z<N\u22121, xz=yz. In this case, by switching the number N and a number beside it in the permutation A, we can get the permutation B. Hence, the two permutations are adjacent. Case 2: |xN\u22121\u2212yN\u22121|=0 and \u03a3i=1N\u22122|xi\u2212yi|=1. In this case, if we take away the number N from A and B, we get two shorter permutations satisfying the two conditions, so by induction, the two shorter permutations are adjacent. Assume that we can switch the k-th number and the (k+1)-th number in the first short permutation to get the second short permutation. For both A and B, since Condition 2 is true, the number N cannot be between those switched numbers. So we can still switch those two numbers as an adjacent transposition to change A into B. Thus A, B are adjacent, and the other direction of the conclusion is also true.",
                                "Let Ln=(VL, EL) denote a [2\u00d73\u00d7 . . . \u00d7n] linear array graph. Ln has n! vertices VL. Each vertex is assigned integer coordinates (x1, x2, . . . , xn\u22121), where 0\u2266xi\u2266i for 1\u2266i\u2266n\u22121. The distance between vertices of Ln is the L1 distance, and two vertices are adjacent (i.e., have an edge between them) if and only if their distance is one.",
                                "We now build a bijective map P: V\u2192VL. Here V is the vertex set of the adjacency graph of permutations G=(V, E). For any u\u03b5V and v\u03b5VL, P(u)=v if and only if u, v have the same coordinates. By Theorem 7, if two permutations are adjacent, their coordinates are adjacent in Ln, and we get:",
                                "Theorem 8. The adjacency graph of permutations is a subgraph of the [2\u00d73\u00d7 . . . \u00d7n] linear array.",
                                "Two examples of the permutations adjacency graph for n=3 and n=4 are shown, respectively, in FIGS. 6A, 6B and FIGS. 7A, 7B. In these drawing figures, each vertex is represented by the coordinate assigned to the permutation vertex. The solid lines in the drawing figures are the edges in both the adjacency graph of permutation G and in the [2\u00d73\u00d7 . . . \u00d7n] linear array graph Ln, while the dotted lines are the edges only in the [2\u00d73\u00d7 . . . \u00d7n] linear array graph Ln. Thus, FIG. 6B shows how the adjacency graph G for n=3 is embedded in the linear array graph Ln. By traversing the FIG. 6B vertices via only the solid lines for the adjacency graph G shows that a change of coordinates in G corresponds to a change in the permutations of FIG. 6A that require only a single adjacency change (that is, one exchange of two adjacent numbers in the permutation to obtain a new permutation). It can be seen that while each permutation has n\u22121 adjacent permutations, a vertex in the array can have a varied degree from n\u22121 to 2n\u22123. Some edges of the array do not exist in the adjacency graph of permutations because they violate Condition 2 in Theorem 7.",
                                "Proposition 9. If two vertices are adjacent in the array Ln, their distance in the adjacency graph of permutations, G, is at most 2n\u22123, and this bound is tight.",
                                "Proof. Let A and B be two permutations such that XA and XB are adjacent in Ln. If they are not adjacent permutations, then they must violate Condition 2 in Theorem 7. Without loss of generality, assume",
                                "A=[a1, . . . , ai\u22121, ai, ai+1, . . . , aj\u22121, aj, aj+1, . . . , an],",
                                "B=[a1, . . . , ai\u22121, aj, ai+1, . . . , aj\u22121, ai, aj+1, . . . , an].",
                                "Clearly, a minimum of (j\u2212i)+(j\u2212i\u22121)=2j\u22122i\u22121 adjacency transpositions are needed to switch ai and aj in order to change A into B. When i=1, j=n, 2j\u22122i\u22121 reaches the maximum value 2n\u22123. Hence, d(A, B)\u22662n\u22123. To see that the bound is tight, consider A=[1, 3, 4, . . . n, 2] and B=[2, 3, 4, . . . , n, 1].",
                                "The observation above that the adjacency graph for a permutation is a subgraph of a linear array shows an approach to designing error-correcting rank-modulation codes based on Lee-metric codes and L1-metric codes. We skip its proof due to its simplicity.",
                                "Theorem 10. Let C be a Lee-metric or L1-metric error-correcting code of length n\u22121, alphabet size no less than n, and minimum distance d. Let C\u2032 be the subset of codewords of C that are contained in the array Ln. Then C\u2032 is an error-correcting rank-modulation code with minimum distance at least d.",
                                "Thus, the discussion above shows that codes (sets of codewords) can be generated for rank modulation schemes by generating coordinates of permutations having a desired permutation size n, such that the coordinates can be generated according to the number r of errors in a codeword that the code is desired to correct. The coordinates provide a topology based solution for selecting error correcting codewords. For codes generated in this manner, verifying the validity of a codeword can be achieved by verifying the validity of the corresponding coordinates of the codeword.",
                                "**Single-Error-Correcting Rank-Modulation Code**",
                                "We now present a family of rank-modulation codes that can correct one error. The code is based on the perfect sphere packing in the Lee-metric space. See, for example, Golomb, S. W. et al., SIAM J. Appl. Math., 18(2):302-317 (January 1970). The code construction is as follows.",
                                "Construction 11. (Single-error-correcting rank-modulation code) Let C1, C2 denote two rank-modulation codes constructed as follows. Let A be a general permutation whose coordinates are (x1, x2, . . . , xn\u22121). Then A is a codeword in C1 if and only if the following equation is satisfied.",
                                "\\({\\sum\\limits_{i = 1}^{n - 1}\ue89e\\; \ue89e{ix}_{i}} \\equiv {0\ue89e{\\left( {{{mod}\ue89e\\mspace{11mu} \ue89e2\ue89en} - 1}\ue89e\\; \\right).}}\\)",
                                "A is a codeword in C2 if and only if the following equation is satisfied:",
                                "\\({{\\sum\\limits_{i = 1}^{n - 2}\ue89e\\; \ue89e{ix}_{i}} + {\\left( {n - 1} \\right) \\cdot \\left( {- x_{n - 1}} \\right)}} \\equiv {0\ue89e\\; \ue89e{\\left( {{{mod}\ue89e{\\; \ue89e\\;}\ue89e2\ue89en} - 1}\ue89e\\; \\right).}}\\)",
                                "Between C1 and C2, choose the code with more codewords as the final output.",
                                "We analyze the code size of a code generated from using Construction 11.",
                                "Lemma 12. The rank-modulation code built in Construction 11 has a minimum cardinality of",
                                "\\(\\frac{\\left( {n - 1} \\right)!}{2}.\\)",
                                "Proof. Let H=(VH, EH) be a [2\u00d73\u00d7 . . . \u00d7(n\u22121)\u00d7(2n\u22121)] linear array. Every vertex in H has integer coordinates (x1, x2, . . . , xn\u22121), where 0\u2266xi\u2266i for 1\u2266i\u2266n\u22122, and \u2212n+1\u2266xn\u22121\u2266n\u22121.",
                                "Given any choice of (x1, x2, . . . , xn\u22122) of the coordinates, we would like to see if there is a solution to xn\u22121 (note that \u2212n+1\u2266xn\u22121\u2266n\u22121) that satisfies the following equation:",
                                "\\({\\sum\\limits_{i = 1}^{n - 1}\ue89e\\; \ue89e{ix}_{i}} \\equiv {0\ue89e\\left( {{{mod}\ue89e\\mspace{11mu} \ue89e2\ue89en} - 1}\ue89e\\; \\right)}\\)",
                                "Since \u03a3i=1n\u22121ixi=(n\u22121)xn\u22121+\u03a3i=1n\u22122ixi, and n\u22121 and 2n\u22121 are co-prime integers, there is exactly one solution to xn\u22121 that satisfies the above equation. If xn\u22121\u22670, clearly (x1, x2, . . . , xn\u22121) are the coordinates of a codeword in the code C1. If xn\u22121\u22660, then,",
                                "\\({{{\\sum\\limits_{i = 1}^{n - 2}\ue89e\\; \ue89e{ix}_{i}} + {\\left( {n - 1} \\right) \\cdot \\left\\lbrack {- \\left( {- x_{n - 1}} \\right)} \\right\\rbrack}} \\equiv {0\ue89e\\; \ue89e\\left( {{{mod}\ue89e{\\; \ue89e\\;}\ue89e2\ue89en} - 1}\ue89e\\; \\right)}},\\)",
                                "so (x1, x2, . . . , xn\u22122, \u2212xn\u22121) are the coordinates of a codeword in the code C2.",
                                "Since 0\u2266xi\u2266i for 1\u2266i\u2266n\u22122, there are (n\u22121)! ways to choose x1, x2, . . . , xn\u22122. Each choice generates a codeword that belongs either to C1 or C2. Therefore, at least one of C1 and C2 has cardinality no less than",
                                "\\(\\frac{\\left( {n - 1} \\right)!}{2}.\\)",
                                "Lemma 13. The rank-modulation code built in Construction 11 can correct one error.",
                                "Proof. It has been shown that for an infinite k-dimensional array, vertices whose coordinates (x1, x2, . . . , xk) satisfy the condition \u03a3i=1kixi\u22610 (mod 2k+1) have a minimum L1 distance of 3. Let k=n\u22121. See, for example, Golomb, S. W. et al., ibid. Note that in Construction 11, the codewords of C1 are a subset of the above vertices, while the codewords in C2 are a subset of the mirrored image of the above vertices, where the last coordinate xn\u22121 is mapped to \u2212xn\u22121. Since the adjacency graph of the permutations is a subgraph of the array, the minimum distance of C1 and C2 is at least three. Hence, the code built in Construction 11 can correct one error.",
                                "Theorem 14. The code built in Construction 11 is a single-error-correcting rank-modulation code whose cardinality is at least half of optimal.",
                                "Proof. Every permutation has n\u22121 adjacent permutations, so the size of a radius\u22121 ball, |Br|, is n. By the sphere packing bound, a single-error-correcting rank-modulation code can have at most",
                                "\\(\\frac{n!}{n} = {\\left( {n - 1} \\right)!}\\)",
                                "codewords. The code in Construction 11 has at least (n\u22121)!/2 codewords."
                            ],
                            "subsections": [],
                            "outline_long": [
                                "define permutation adjacency graph",
                                "study topology of permutations",
                                "derive general construction for error-correcting rank-modulation codes",
                                "present family of one-error-correcting codes",
                                "define adjacency graph of permutations",
                                "prove theorem 7",
                                "prove other direction of theorem 7",
                                "define linear array graph",
                                "build bijective map between permutation vertices and linear array vertices",
                                "prove theorem 8",
                                "illustrate permutation adjacency graph for n=3 and n=4",
                                "prove proposition 9",
                                "show approach to designing error-correcting rank-modulation codes",
                                "prove theorem 10",
                                "generate error-correcting codes for rank modulation schemes",
                                "present single-error-correcting rank-modulation code",
                                "construct code C1",
                                "construct code C2",
                                "analyze code size of construction 11",
                                "prove lemma 12",
                                "prove lemma 13",
                                "prove theorem 14"
                            ],
                            "num_characters": 11314,
                            "outline_medium": [
                                "define permutation adjacency graph",
                                "motivate theorem 7",
                                "prove theorem 7",
                                "define linear array graph",
                                "build bijective map between permutation graph and linear array graph",
                                "state theorem 8",
                                "illustrate permutation adjacency graph for n=3 and n=4",
                                "state proposition 9",
                                "construct single-error-correcting rank-modulation code",
                                "analyze code size of constructed code",
                                "prove error-correcting capability of constructed code"
                            ],
                            "outline_short": [
                                "define permutation adjacency graph",
                                "study topology of permutations",
                                "derive error-correcting rank-modulation codes",
                                "present single-error-correcting rank-modulation code",
                                "analyze code size and correctness"
                            ]
                        },
                        {
                            "title": "VI. MORE CODES AND EMBODIMENTS",
                            "paragraphs": [
                                "It has been shown that the single-error-correcting code built by Construction 11 has a size within half of optimal. There exist code constructions that can build larger codes in many cases. We report here some error correcting codes built using ad hoc constructions, and compare them with the sphere-packing upper bound and the half-optimal code:\n\n\n- - When n=3, a single-error-correcting code with two codewords\u2014\\[1, 2,\n    3\\] and \\[3, 2, 1\\]\u2014can be easily found. The same code is built by\n    Construction 11, and the size meets the sphere-packing upper bound.\n  - When n=4, an ad hoc construction generates a single-error-correcting\n    code with five codewords: \\[1, 2, 4, 3\\], \\[3, 1, 4, 2\\], \\[3, 2, 4,\n    1\\], \\[4, 1, 3, 2\\] and \\[4, 2, 3, 1\\]. The code output by\n    Construction 10 has size four. The sphere-packing bound is six. It\n    can be shown that the code of size five is optimal.\n  - When n=5, 6, 7, an ad hoc construction generates\n    single-error-correcting codes with 18, 90, and 526 codewords,\n    respectively. The codes output by Construction 11 have size 14, 66,\n    and 388, respectively. The sphere-packing upper bound is 24, 120,\n    and 720, respectively.\n  - When n=5, 6, 7, there exist two-error-correcting codes of size 6,\n    23, and 110, three-error-correcting codes of size 2, 10, 34, and\n    four error-correcting codes of size 2, 4, and 14, respectively. All\n    the above codes have a size that is at least one half of the optimal\n    size.",
                                "The ad hoc techniques can be implemented as operations that provide a \u201cbrute force\u201d methodology that iteratively generates and tests permutations for suitability as error correcting codes. Permutations are suitable only if they correct a desired number of errors in a transmitted codeword. That is, only permutations that have a distance from all other permutations that is greater than or equal to (2r+1) are retained, wherein the retained generated permutations comprise a rank modulation codeword alphabet that defines a modulation code capable of correcting r errors in a transmitted codeword. All other generated permutations that are less than (2r+1) from other permutations, will be eliminated as codewords for error correction. Those skilled in the art will understand how such ad hoc schemes can be implemented, in view of the description herein.",
                                "Conventional desktop or laptop computers can be used for generating permutations and testing them via the ad hoc techniques. It has been found that ad hoc techniques for generating error correcting codes suitable for use with rank modulation schemes can require as little as one or two minutes to generate suitable error correcting codes for 3-cell or 4-cell permutations, but can require upwards of seven hours or more for ad hoc generating of codes suitable for 7-cell permutations (that is, where the codeword permutations A comprise permutations A=[A1, A2, A3, . . . , A7]. In contrast, the technique of Construction 11 can provide a suitable error correcting code in a matter of minutes, even for memory device constructions on the order of seven cells or more. Thus, the methodology of Construction 11 is much more efficient at generating error correcting codes for use with rank modulation schemes.",
                                "FIG. 8 shows the operations performed for generating a rank modulation code that is suitable for correcting r errors in a code constructed starting with n! permutations. In the first operation, indicated by the flow diagram box numbered 802, the n! permutations are generated. Thus, the codeword alphabet will be suitable for use with a data storage device that is configured to operate such that n cells of the storage device comprise a virtual cell in which relative rank ordering of the n cells determines a permutation of the n! permutations. As noted above, not all the possible n! permutations will be suitable for the codeword alphabet and not all of the n! permutations will be used.",
                                "In the next operation, indicated by the FIG. 8 box numbered 804, one of the n! permutations is selected as a starting permutation. In the technique of Construction 11, the starting permutation is generally a permutation corresponding to a relative ranking of the cells in sequence. That is, for an n-cell codeword alphabet A, the starting permutation of A will be given by [A1, A2, A3, . . . , An], which corresponds to the first cell of a group having the highest relative charge, or rank, with the second cell of the group having the next highest charge, and so forth, for a cell construction such as illustrated in FIG. 1. The starting permutation then has a corresponding coordinate X=(x1, x2, . . . , xn) in the adjacency permutation graph that is equal to X=(0, 0, . . . , 0). In the case of the ad hoc technique for generating an alphabet, the starting permutation may be arbitrarily chosen. It is generally convenient to select the same starting permutation as the Construction 11 technique.",
                                "The Construction 11 technique generates coordinates of the permutations such that the coordinates can be tested to determine if they satisfy the conditions for indicating a valid codeword. These conditions are the summations expressions described above. Thus, the operation of box 804 in using the Construction 11 technique performs operations that include generating a coordinate set XB=(x1, x2, . . . , xn\u22121) for a permutation B of the n cells according to an initial permutation A=[a1, a2, . . . , an]=[1, 2, . . . , n] and the permutation B=[b1, b2, . . . , bn] wherein for 1\u2266i\u2266n, the permutation Ai denotes a subsequence of the permutation A such that Ai=[a1, a2, . . . , ai], Bi denotes a subsequence of permutation B that contains only those numbers in Ai, and pi denotes the position of ai in Bi, then for every permutation B=[b1, b2, . . . , bn,] and the coordinates of the coordinate set XB are given by XB=(2\u2212p2, 3\u2212p3, . . . , n\u2212pn) for 2\u2266i\u2266n. Next, B is determined to be a codeword in a first codeword alphabet C1 if and only if:",
                                "\\({\\sum\\limits_{i = 1}^{n - 1}\ue89e{ix}_{i}} \\equiv {0\ue89e\\left( {{{mod}\ue89e\\mspace{14mu} \ue89e2\ue89en} - 1} \\right)}\\)",
                                "and B is determined to be a codeword in a second codeword alphabet C2 if and only if",
                                "\\({{\\sum\\limits_{i = 1}^{n - 2}\ue89e{ix}_{i}} + {\\left( {n - 1} \\right) \\cdot \\left( {- x_{n - 1}} \\right)}} \\equiv {0\ue89e\\; \ue89e{\\left( {{{mod}\ue89e\\mspace{14mu} \ue89e2\ue89e\\; \ue89en} - 1} \\right).}}\\)",
                                "The operations of generating and determining are repeated for the n values.",
                                "In the next operation, indicated by the box numbered 806, only the generated permutations having a distance greater than or equal to (2r+1) are retained as codewords, wherein the retained generated permutations comprise a rank modulation codeword alphabet that define a modulation code capable of correcting r errors in a transmitted codeword. In the Construction 11 technique, the operation of retaining in box 806 is carried out by selecting either the first alphabet C1 or the second alphabet C2 as the set of permutations B according to the alphabet containing the greater number of codewords.",
                                "The operations of FIG. 8 for generating a suitable error correcting code may be performed by a conventional desktop, server, or laptop computer or the like available today. For example, any computer system capable of supporting an operating environment such as one of the \u201cWindows\u201d series of operating systems by Microsoft Corporation or the \u201cMacintosh\u201d operating systems by Apple, Inc., and various UNIX and Linux distributions, will have sufficient computing resources to perform the functions described herein for generating error correction codes in rank modulation schemes. A software application for generating a suitable code typically receives as input the parameters necessary to specify the error correcting code, in particular, the desired n and r parameters for alphabet size and number of errors to be corrected, respectively. Those skilled in the art will understand how to provide a suitable user interface to receive such parameters. The operations of FIG. 8 are then performed using the received n and r parameters.",
                                "FIG. 9 is a flow diagram that shows the operations performed by a device for decoding a codeword received over an information channel. The device may comprise an external memory device such as a flash memory device that stores data in accordance with the rank modulation technique, or the device may comprise a device that incorporates memory that is implemented in accordance with the rank modulation technique. The device may comprise a decoder for the purpose of determining data values that correspond to the received codeword. The FIG. 9 operations will compensate for noise in the channel by determining the likely codeword alphabet (permutation) that corresponds to the received symbol.",
                                "In the first operation, indicated by the flow diagram box numbered 902, the device receives a rank modulation codeword. The receiving operation generally comprises receiving a codeword over an information channel from a source, wherein the codeword indicates n cell values that comprise a virtual cell in which relative rank ordering of the n cell values determines a permutation comprising one of n! permutations. The information channel may comprise a variety of constructions, such as a data bus in a computing device, a circuit connection with a source of the codeword, or a data connection between a source and the decoder, or a wireless communication link between the source and the decoder, as described further below.",
                                "In the next operation, represented by the box 904, the device determines if the received codeword comprises a valid codeword of the rank modulation code. If the rank modulation code incorporating error correction as described herein was generated according to a code construction technique such as the Construction 11 technique, then determining a valid codeword can conveniently involve a reverse operation to determine if the codeword under investigation satisfies the conditions for having been generated by the code construction technique. For example, if the codeword was generated using the Construction 111 technique to correct r errors where r=1, then the device can determine if the received codeword satisfies the Construction 11 conditions for being a valid coordinate such as given by the adjacency permutation graph. Other validation-determining schemes have been described above, such as validation of coordinate representations and table look-up techniques, all of which may be performed for the box 904 operations.",
                                "Exemplary details of the operations of box 904 are as follows. For a rank modulation scheme using codewords generated according to Construction 11, to verify that a received codeword permutation comprises a valid codeword, the operations of box 904 utilize the fact that a permutation is a valid codeword if and only if it satisfies the equation in Construction 11 (the construction for \u201csingle-error-correcting\u201d rank modulation code). Two equations are given in Construction 11, but only one equation is followed to define the error correction code, as noted in Construction 11 above. In this example, it will be assumed that the first equation was used to define the codewords:",
                                "\\({\\sum\\limits_{i = 1}^{n - 1}\ue89e{ix}_{i}} \\equiv {0\ue89e{\\left( {{{mod}\ue89e\\mspace{14mu} \ue89e2\ue89e\\; \ue89en} - 1} \\right).}}\\)",
                                "Those of skill in the art will readily understand how to determine valid codewords if the alternate equation of Construction 11 was used to generate the code. For this example, assume n=5. Thus, the permutations of the received codewords will be given by A, where A=[a1, a2, a3, a4, a5] and the coordinates will be given by X, where X=(x1, x2, x3, x4)",
                                "Assume the received codeword is a permutation given by [5, 1, 3, 2, 4]. The coordinates of the permutation are given by (0, 1, 0, 4). That is, xi=0, x2=1, x3=0, x4=4. So the summation expression from the first condition of Construction 11 evaluates to: 1\u00d70\u00b12\u00d71\u00b13\u00d70\u00b14\u00d74=18=0 (mod 9). Thus, the evaluation of the received codeword [5, 1, 3, 2, 4] equals zero and therefore it satisfies the equation from Construction 11 and is a valid codeword.",
                                "Next, assume the received codeword is a permutation given by [5, 3, 1, 2, 4]. The coordinates of the permutation are (0, 2, 0, 4). That is, x1=0, x2=2, x3=0, x4=4. So the summation expression from Construction 11 evaluates to: 1\u00d70\u00b12\u00d72\u00b13\u00d70\u00b14\u00d74=20=2 (mod 9). Thus, the received codeword [5, 3, 1, 2, 4] does not satisfy the equation and therefore it is not a valid codeword.",
                                "The next operation illustrated in FIG. 9, the decision box 906, represents the device determination as to whether the received codeword is a valid codeword. If the received codeword is determined to be valid, a \u201cyes\u201d outcome at box 906, then operation proceeds to box 908, where the corresponding value of the codeword can be determined and further operations can be continued. Typically, valid codewords are mapped to predetermined corresponding values, such that simple table look-up techniques can be used to retrieve the proper value. Other operations may be carried out to retrieve the proper values to which valid codewords are mapped, in accordance with the rank modulation scheme for the information channel.",
                                "If the received codeword is determined not to be a valid codeword, a \u201cno\u201d outcome at the decision box 906, then operation proceeds to box 910, where a valid codeword is determined by checking against permutations that differ from the received codeword by a value r, where r is the number of errors in a codeword that the rank modulation code can correct. That is, a codeword is determined to be valid or not valid, and if determined to be not valid, a corrected codeword can be determined in place of the received codeword. We next describe an example of the box 910 processing.",
                                "Continuing with the example above, where the received codeword [5, 3, 1, 2, 4] was found not to be valid, a correct codeword must be determined. Recall that the received codeword [5, 3, 1, 2, 4] corresponds to coordinates (0, 2, 0, 4). To correct the received codeword, we check the valid coordinates that differ from (0, 2, 0, 4) by one (plus one or minus one, being +/\u2212r). Recall that valid coordinates have the property that the first position can only assume the values (0, 1), the second position can only assume the values (0, 1, 2), the third position can only assume the values (0, 1, 2, 3), and so forth. That is, for a coordinate X, the nth coordinate must be selected from (0, 1, 2, . . . , n) so that the xn coordinate position cannot be greater than n. Therefore, the valid coordinates to be checked for this example comprise the set (1, 2, 0, 4), (0, 1, 0, 4), (0, 2, 1, 4), and (0, 2, 0, 3). The operations comprising box 906 include such checking for valid coordinates.",
                                "For the first candidate set of coordinates (1, 2, 0, 4) that might be used to replace the received permutation, the summation expression from Construction 11 evaluates to 1\u00d71\u00b12\u00d72+3\u00d70\u00b14\u00d74=21=3 (mod 9). Thus, the result is non-zero and therefore the coordinate set (1, 2, 0, 4) is not a valid codeword. For the second set of coordinates (0, 1, 0, 4), the summation expression from Construction 11 evaluates to 1\u00d70\u00b12\u00d71\u00b13\u00d70\u00b14\u00d74=18=0 (mod 9). So the coordinate set (0, 1, 0, 4) corresponds to a valid codeword. According to the Construction 11 technique, (0, 1, 0, 4) is the only possible valid set of coordinates for the received codeword and the process for determining a corrected codeword is complete. For purposes of illustration, the remaining coordinates will be checked. For (0, 2, 1, 4), the summation expression from Construction 11 evaluates to 1\u00d70\u00b12\u00d72\u00b13\u00d71\u00b14\u00d74=23=5 (mod 9). So it is not a valid codeword. For (0, 2, 0, 3), the summation expression from Construction 11 evaluates to 1\u00d70\u00b12\u00d72\u00b13\u00d70\u00b14\u00d73=16=7 (mod 9). So it is not a valid codeword. So of the four possibilities considered for this example, the only valid \u201cneighboring coordinates\u201d for the received permutation are (0, 1, 0, 4), which corresponds to the permutation (5, 1, 3, 2, 4). Therefore, the processing of box 906 according to this example shows that, if we receive the permutation (5, 3, 1, 2, 4) over the information channel, we can easily determine that the received permutation is invalid and we can check the set of possible valid coordinates and identify the correct neighboring coordinates (0, 1, 0, 4) and then determine the corresponding valid permutation (5, 1, 3, 2, 4).",
                                "In this way, the operation of box 910 shows that if the received codeword was determined to be a valid codeword, then a corresponding value for the permutation is determined, and if the received codeword is determined not to be a valid codeword, then a codeword is determined that differs from the received codeword by a value r, where r is the number of errors in a codeword that the rank modulation code can correct. Processing of the device then continues with other operations.",
                                "In general, the processing of FIG. 9 for decoding a codeword may be described as involving receiving the codeword from a storage device memory that is configured to operate such that n cells of the storage device comprise a virtual cell in which relative rank ordering of the n cells determines a permutation comprising one of n! permutations; that is, the memory is operated according to a rank modulation scheme as described herein. Next, the FIG. 9 processing determines if the received codeword comprises a valid codeword of a rank modulation code, wherein if the received codeword is determined to be a valid codeword, then the device determines a corresponding value for the codeword. If the received codeword is determined not to be a valid codeword, then the device determines a codeword that differs from the received codeword by a value r, where r is the number of errors in a codeword that the rank modulation code can correct.",
                                "FIG. 10 is a flow diagram that shows the operations performed by a device for encoding a data value to be encoded into a codeword. The device may comprise an external data storage device such as a flash memory device that receives data from a host device, such as a computer, and stores the data in accordance with the rank modulation technique, or the device may comprise a device that incorporates memory implemented in accordance with the rank modulation technique. For example, the device may comprise a computer or other processor device provided with semiconductor memory organized according to the rank modulation scheme, or the device may comprise an encoder for the purpose of processing data values and producing corresponding codewords.",
                                "In the first operation, represented by the flow diagram box 1002, a data value to be encoded into a codeword is received, wherein the codeword indicates n cell values that comprise a virtual cell in which relative rank ordering of the n cell values determines a permutation comprising one of n! permutations. The data is generally received over an information channel from a source, wherein the codeword indicates n cell values that comprise a virtual cell in which relative rank ordering of the n cell values determines a permutation comprising one of n! permutations. The source may comprise, for example, a host computer or memory of a device or a transmitter of data. The information channel may comprise a variety of constructions, such as a data bus in a computing device, a circuit connection, or a data connection between a source and the encoder, or a wireless communication link between the source and the encoder, as described further below.",
                                "In the next encoding operation, indicated by box 1004, a permutation A is generated corresponding to the codeword, wherein A is given by A=[a1, a2, . . . , an] integer values such that the [a1, a2, . . . , an] permutation conforms to a rank modulation scheme for data representation. At box 1006, the permutation is provided to a data destination over the information channel. For example, the permutation may be stored into memory cells of a data device, or provided to memory of a host device, or transmitted to an external destination. Processing of the device then continues with other operations.",
                                "The encoding operations may be performed using lookup table techniques. Consider a data value received for storing into a storage device configured to operate according to a rank modulation scheme. For example, in FIGS. 2, 3, and 4, a data value of \u201c3\u201d was mapped to the permutation [3, 2, 1]. Thus, the storage device may receive a data value of \u201c3\u201d and may check a lookup table of the storage device to determine that \u201c3\u201d maps to [3, 2, 1]. The storage device will therefore adjust appropriate memory cell levels to correspond to the [3, 2, 1] permutation. Though in the example of FIGS. 2, 3 and 4, each data value is mapped to two permutations, it should be apparent that for the error-correcting rank modulation codes, to maximize the storage capacity, every codeword can be mapped to a distinct data value. For the error-correcting code generated using the Construction 11 technique, the codewords can be ordered alphabetically either according to their coordinates [x1, x2, . . . , xn\u22121] or according to their permutations [b1, b2, . . . , bn], to allow efficient lookup of the codewords and the data values they represent.",
                                "FIG. 11 is an illustration of a memory device constructed in accordance with the present invention. FIG. 11 shows a memory 1102 that is accessed by a memory controller 1104 that communicates with a host device 1106. The memory 1102 is used for storing data that is represented in accordance with a rank modulation coding scheme. The memory may be implemented, for example, as a Flash memory having multilevel cells. The memory 1102 and memory controller 1104 together comprise a memory device 1108 that may be external to the host device or may be integrated with the host device into a single component or system. For example, the memory device 1108 may comprise a Flash memory device that communicates with a host computer via a USB connection. Alternatively, the memory device may be integrated with a suitable host device to comprise a single system or component, such as a smart phone or network router or MP3 player or the like.",
                                "The memory controller 1104 operates under control of a microcontroller 1110, which manages communications with the memory 1102 via a memory interface 1115 and manages communications with the host device via a host interface 1114. Thus, the memory controller supervises data transfers from the host 1106 to the memory 1102 and from the memory 1102 to the host 1106. The memory controller 1104 also includes a data buffer 1116 in which data values may be temporarily stored for transmission over the data channel connection between the memory 1102 and the host 1106. The memory controller also includes an ECC block 1118 in which data for the ECC is maintained. For example, the ECC block 1118 may comprise data and program code to perform the error correction operations of FIG. 9 using the error-correcting code generated as described herein. The ECC block 1118 may contain parameters for the error correction code to be used for the memory 1102, such as programmed operations for translating between received symbols and error-corrected symbols, or the ECC block may contain lookup tables for codewords or other data, or the like. The memory controller 1104 performs the operations described above for decoding data, such as illustrated in FIG. 9, and performs the operations described above for encoding data, such as illustrated in FIG. 10.",
                                "An error correcting code as described herein can be generated from the operations depicted in FIG. 8, which can be performed by a conventional computer apparatus. The processing components such as the controller 1104 and microcontroller 1110 may be implemented in the form of control logic in software or hardware or a combination of both, and may comprise processors that execute software program instructions from program memory, or as firmware, or the like. The host device 1106 may comprise a conventional computer apparatus. A conventional computer apparatus also may carry out the operations of FIGS. 8, 9, and 10. FIG. 12 is a block diagram of a computer apparatus 1200 sufficient to perform as a host device and sufficient to perform the operations of FIG. 8. In addition, the computer apparatus can comprise the host device for communicating with a memory device such as depicted in FIG. 11.",
                                "FIG. 12 is a block diagram of a computer system 1200 that may incorporate embodiments of the present invention and perform the operations described herein. The computer system 1200 typically includes one or more processors 1205, a system bus 1210, storage subsystem 1215 that includes a memory subsystem 1220 and a file storage subsystem 1225, user interface output devices 1230, user interface input devices 1235, a communications subsystem 1240, and the like.",
                                "In various embodiments, the computer system 1200 typically includes conventional computer components such as the one or more processors 1205. The file storage subsystem 1225 can include a variety of memory storage devices, such as a read only memory (ROM) 1245 and random access memory (RAM) 1250 in the memory subsystem 1220, and disk drives.",
                                "The user interface output devices 1230 can comprise a variety of devices including flat panel displays, touchscreens, indicator lights, audio devices, force feedback devices, and the like. The user interface input devices 1235 can comprise a variety of devices including a computer mouse, trackball, trackpad, joystick, wireless remote, drawing tablet, voice command system, eye tracking system, and the like. The user interface input devices 1235 typically allow a user to select objects, icons, text and the like that appear on the user interface output devices 1230 via a command such as a click of a button or the like.",
                                "Embodiments of the communication subsystem 1240 typically include an Ethernet card, a modem (telephone, satellite, cable, ISDN), (asynchronous) digital subscriber line (DSL) unit, FireWire (IEEE 1394) interface, USB interface, and the like. For example, the communications subsystem 1240 may be coupled to communications networks and other external systems 1255 (e.g., a network such as a LAN or the Internet), to a FireWire bus, or the like. In other embodiments, the communications subsystem 1240 may be physically integrated on the motherboard of the computer system 1200, may be a software program, such as soft DSL, or the like.",
                                "The RAM 1250 and the file storage subsystem 1225 are examples of tangible media configured to store data such as error-correcting code parameters, codewords, and program instructions to perform the operations described herein when executed by the one or more processors, including executable computer code, human readable code, or the like. Other types of tangible media include program product media such as floppy disks, removable hard disks, optical storage media such as CDs, DVDs, and bar code media, semiconductor memories such as flash memories, read-only-memories (ROMs), battery-backed volatile memories, networked storage devices, and the like. The file storage subsystem 1225 includes reader subsystems that can transfer data from the program product media to the storage subsystem 1215 for operation and execution by the processors 1205.",
                                "The computer system 1200 may also include software that enables communications over a network (e.g., the communications network 1255) such as the DNS, TCP/IP, UDP/IP, and HTTP/HTTPS protocols, and the like. In alternative embodiments, other communications software and transfer protocols may also be used, for example IPX, or the like.",
                                "It will be readily apparent to one of ordinary skill in the art that many other hardware and software configurations are suitable for use with the present invention. For example, the computer system 1200 may be a desktop, portable, rack-mounted, or tablet configuration. Additionally, the computer system 1200 may be a series of networked computers. Further, a variety of microprocessors are contemplated and are suitable for the one or more processors 1205, such as PENTIUM\u2122 microprocessors from Intel Corporation of Santa Clara, Calif., USA; OPTERON\u2122 or ATHLON XP\u2122 microprocessors from Advanced Micro Devices, Inc. of Sunnyvale, Calif., USA; and the like. Further, a variety of operating systems are contemplated and are suitable, such as WINDOWS\u00ae, WINDOWS XP\u00ae, WINDOWS VISTA\u00ae, or the like from Microsoft Corporation of Redmond, Wash., USA, SOLARIS\u00ae from Sun Microsystems, Inc. of Santa Clara, Calif., USA, various Linux and UNIX distributions, and the like. In still other embodiments, the techniques described above may be implemented upon a chip or an auxiliary processing board (e.g., a programmable logic device or graphics processor unit).",
                                "The present invention can be implemented in the form of control logic in software or hardware or a combination of both. The control logic may be stored in an information storage medium as a plurality of instructions adapted to direct an information-processing device to perform a set of steps disclosed in embodiments of the present invention. Based on the disclosure and teachings provided herein, a person of ordinary skill in the art will appreciate other ways and/or methods to implement the present invention.",
                                "The rank modulation scheme described herein can be implemented in a variety of systems for encoding and decoding data for transmission and storage. That is, codewords are received from a source over an information channel according to a rank modulation scheme and are decoded into their corresponding data values and provided to a destination, such as a memory or a processor, and data values for storage or transmission are received from a source over an information channel and are encoded into a rank modulation scheme.",
                                "The operations of encoding and decoding data according to the rank modulation scheme can be illustrated as in FIG. 13, which shows data flow in a memory device 1302 that operates according to the rank modulation scheme described herein. In FIG. 13, the memory device includes a Rank Modulation (RM) controller 1304 that stores and retrieves information values 1306. The RM controller 1304 includes an encoder and decoder 1308 for encoding data values into codewords and decoding codewords into data values. The RM controller encodes data values and provides codewords to the source/destination block 1310, and decodes codewords from the source/destination and provides corresponding data values. The two-way nature of the data flow is indicated by the double-ended arrows labeled \u201cdata values\u201d and \u201ccodewords\u201d. The RM controller includes interfaces through which the RM controller receives and provides the data values and the information values (codewords). The details of such interfaces will be known to those skilled in the art.",
                                "The information values 1306 comprise the means for physically representing the data values and codewords. For example, the information values 1306 may represent charge levels of memory cells, such that multiple cells are configured to operate as a virtual cell in which charge levels of the cells determine a permutation of the rank modulation code. Data values are received and encoded to permutations of a rank modulation code and charge levels of cells are adjusted accordingly, and rank modulation codewords are determined according to cell charge levels, from which a corresponding data value is determined. Alternatively, the information values 1306 may represent features of a transmitted signal, such as signal frequency, magnitude, or duration, such that the cells or bins are defined by the signal features and determine a permutation of the rank modulation code. For example, rank ordering of detected cell frequency changes over time can determine a permutation, wherein the highest signal frequency denotes the highest cell level. Other schemes for physical representation of the cells will occur to those skilled in the art, in view of the description herein.",
                                "For information values 1306 in the case of cell charge levels, the source/destination 1310 comprises memory cells in which n memory cells provide n cell values whose charge levels define a rank modulation permutation. For storing a codeword, the memory cells receive an encoded codeword and comprise a destination, and for reading a codeword, the memory cells provide a codeword for decoding and comprise a source. In the case of data transmission, the source/destination 1310 may comprise a transmitter/receiver that processes a signal with signal features such as frequency, magnitude, or duration that define cells or bins such that the signal features determine a permutation. That is, signal components comprising signal frequency, magnitude, or duration may be controlled and modulated by the transmitter such that a highest signal frequency component or greatest magnitude component or greatest time component corresponds to a highest cell level, followed by signal component values that correspond to other cell values and thereby define a permutation of the rank modulation code. When the source/destination 1310 receives a codeword from the controller 1304, the source/destination comprises a transmitter of the device 1302 for sending an encoded signal. When the source/destination provides a codeword to the controller 1304 from a received signal, the source/destination comprises a receiver of the device for receiving an encoded signal. Those skilled in the art will understand how to suitably modulate signal components of the transmitted signal to define rank modulation code permutations, in view of the description herein."
                            ],
                            "subsections": [],
                            "outline_long": [
                                "report error correcting codes built using ad hoc constructions",
                                "compare ad hoc constructions with sphere-packing upper bound and half-optimal code",
                                "describe single-error-correcting code with two codewords for n=3",
                                "describe ad hoc construction for single-error-correcting code with five codewords for n=4",
                                "compare ad hoc construction with Construction 10 for n=4",
                                "describe ad hoc constructions for single-error-correcting codes for n=5, 6, 7",
                                "compare ad hoc constructions with Construction 11 for n=5, 6, 7",
                                "describe two-error-correcting codes for n=5, 6, 7",
                                "describe three-error-correcting codes for n=5, 6, 7",
                                "describe four-error-correcting codes for n=5, 6, 7",
                                "implement ad hoc techniques as operations",
                                "generate and test permutations for suitability as error correcting codes",
                                "retain permutations that correct a desired number of errors",
                                "use conventional desktop or laptop computers for generating permutations",
                                "compare efficiency of ad hoc techniques with Construction 11",
                                "show operations for generating a rank modulation code",
                                "generate n! permutations",
                                "select a starting permutation",
                                "generate coordinates of permutations",
                                "test coordinates to determine if they satisfy conditions for indicating a valid codeword",
                                "retain generated permutations having a distance greater than or equal to (2r+1)",
                                "perform operations using a conventional desktop, server, or laptop computer",
                                "show operations for decoding a codeword received over an information channel",
                                "receive a rank modulation codeword",
                                "determine if the received codeword comprises a valid codeword",
                                "verify that a received codeword permutation comprises a valid codeword",
                                "determine a valid codeword by checking against permutations that differ from the received codeword by a value r",
                                "introduce rank modulation scheme",
                                "describe decoding process",
                                "determine valid codeword",
                                "illustrate decoding process with example",
                                "describe encoding process",
                                "generate permutation corresponding to codeword",
                                "provide permutation to data destination",
                                "describe lookup table techniques for encoding",
                                "illustrate memory device constructed according to rank modulation scheme",
                                "describe memory controller operations",
                                "describe error correcting code generation",
                                "illustrate computer apparatus for performing operations",
                                "describe computer system components",
                                "describe user interface output devices",
                                "describe user interface input devices",
                                "describe communication subsystem",
                                "describe file storage subsystem",
                                "describe RAM and file storage subsystem",
                                "describe software for communications over network",
                                "describe various hardware and software configurations",
                                "describe implementation of rank modulation scheme",
                                "describe control logic in software or hardware",
                                "describe information storage medium",
                                "describe implementation in various systems",
                                "illustrate data flow in memory device",
                                "describe rank modulation controller operations",
                                "describe interfaces for receiving and providing data values and codewords",
                                "describe information values for physically representing data values and codewords",
                                "describe memory cells for storing codewords",
                                "describe transmitter/receiver for transmitting and receiving encoded signals",
                                "describe modulation of signal components to define rank modulation code permutations",
                                "describe error correction operations",
                                "describe decoding operations",
                                "describe encoding operations",
                                "describe lookup table techniques",
                                "describe memory device construction",
                                "describe memory controller operations",
                                "describe error correcting code generation",
                                "describe implementation of rank modulation scheme"
                            ],
                            "num_characters": 33756,
                            "outline_medium": [
                                "report error correcting codes built using ad hoc constructions",
                                "compare ad hoc constructions with sphere-packing upper bound and half-optimal code",
                                "describe ad hoc techniques for generating error correcting codes",
                                "illustrate operations for generating a rank modulation code",
                                "generate n! permutations",
                                "select starting permutation",
                                "generate coordinates of permutations",
                                "test coordinates to determine valid codewords",
                                "retain generated permutations having a distance greater than or equal to (2r+1)",
                                "describe operations for decoding a codeword received over an information channel",
                                "receive rank modulation codeword",
                                "determine if received codeword comprises a valid codeword",
                                "determine corresponding value of valid codeword",
                                "describe decoding process for received codeword",
                                "check valid coordinates for correct codeword",
                                "determine corresponding permutation for valid codeword",
                                "describe encoding process for data value",
                                "generate permutation corresponding to codeword",
                                "provide permutation to data destination",
                                "describe lookup table technique for encoding",
                                "illustrate memory device constructed according to rank modulation scheme",
                                "describe memory controller operations",
                                "describe error correcting code generation",
                                "describe computer apparatus for performing operations",
                                "describe user interface output and input devices",
                                "describe communication subsystem",
                                "describe file storage subsystem",
                                "describe RAM and program product media",
                                "describe software for network communications",
                                "describe various hardware and software configurations",
                                "describe implementation of rank modulation scheme",
                                "illustrate data flow in memory device according to rank modulation scheme"
                            ],
                            "outline_short": [
                                "report ad hoc constructions of error correcting codes",
                                "compare ad hoc constructions with sphere-packing upper bound",
                                "describe implementation of ad hoc techniques",
                                "illustrate operations for generating rank modulation code",
                                "describe operations for decoding received codeword",
                                "determine valid codeword and correct errors",
                                "describe decoding process",
                                "describe encoding process",
                                "illustrate memory device constructed according to rank modulation scheme",
                                "describe computer apparatus sufficient to perform operations",
                                "describe error correcting code generation",
                                "describe memory controller operations",
                                "illustrate data flow in memory device",
                                "describe physical representation of information values",
                                "describe source/destination operations"
                            ]
                        }
                    ],
                    "outline_long": [
                        "introduce rank modulation scheme"
                    ],
                    "num_characters": 306,
                    "outline_medium": [
                        "introduce rank modulation scheme"
                    ],
                    "outline_short": [
                        "introduce rank modulation scheme"
                    ]
                },
                {
                    "title": "CONCLUSION",
                    "paragraphs": [
                        "In this paper, we propose a novel data storage scheme useful for flash memories, a scheme called the rank-modulation scheme. It can eliminate cell over-programming and also be more robust to asymmetric errors. A rank-modulation scheme uses a new tool\u2014the permutation of cell ranks\u2014to represent data. Consequently, new error-correcting techniques suitable for permutations are needed. We study the properties associated with error-correcting rank-modulation codes, and show that the permutation adjacency graph, which describes the topology of permutations, is a subgraph of a multi-dimensional linear array. As a result, the error-correcting codes for rank modulation can be designed using Lee-metric codes and L1-metric codes. We present a family of one-error-correcting codes whose size is within half of the optimal size, and also show the results of some other (more ad hoc) code constructions.",
                        "Other developments that may be possible with rank modulation will be to extend the code construction in this paper to design codes that correct two or more errors, by using new Lee-metric codes, L1-metric codes, or suitable lattice interleavers. See, for example, Blaum, M. et al., IEEE Transactions on Information Theory, 44(2):730-743 (110108). The codes can also be improved by a better utilization of the sphere packing in the permutation adjacency graph, which is sparser than the array Ln. In addition, it will be interesting to combine the error-correcting codes with data rewriting schemes as described in Jiang, A. et al., Proceedings of the 2007 IEEE International Symposium on Information Theory, ISIT2007, Nice, France, pp. 1166-1170 (June 2007).",
                        "The embodiments discussed herein are illustrative of one or more examples of the present invention. As these embodiments of the present invention are described with reference to illustrations, various modifications or adaptations of the methods and/or specific structures described may become apparent to those skilled in the art. All such modifications, adaptations, or variations that rely upon the teachings of the present invention, and through which these teachings have advanced the art, are considered to be within the scope of the present invention. Hence, the present descriptions and drawings should not be considered in a limiting sense, as it is understood that the present invention is in no way limited to only the embodiments illustrated."
                    ],
                    "subsections": [],
                    "outline_long": [
                        "propose rank-modulation scheme",
                        "discuss error-correcting codes",
                        "suggest future developments",
                        "claim scope of invention"
                    ],
                    "num_characters": 2413,
                    "outline_medium": [
                        "summarize rank-modulation scheme",
                        "future developments and scope"
                    ],
                    "outline_short": [
                        "summarize rank-modulation scheme"
                    ]
                }
            ],
            "outline_long": [],
            "num_characters": 0,
            "outline_medium": [],
            "outline_short": []
        }
    ],
    "claims": [
        "1. A computer method of decoding a codeword, the method comprising:\nreceiving the codeword over an information channel from a source, wherein the codeword indicates n cell values that comprise a virtual cell in which relative rank ordering of the n cell values determines a permutation comprising one of n! permutations;\ndetermining if the received codeword comprises a valid codeword of a rank modulation code wherein\nif the received codeword is determined to be a valid codeword, then computing a corresponding value for the codeword, and\nif the received codeword is determined not to be a valid codeword, then determining a corrected codeword that differs from the received codeword by a value r, where r is the number of errors in a codeword that the rank modulation code can correct, and computing a corresponding value for the corrected codeword.",
        "2. A method as in claim 1, wherein the source comprises a memory in a data device and the information channel comprises a data connection of the data device.",
        "3. A method as in claim 2, wherein the n cell values comprise charge levels of n memory cells of the data device.",
        "4. A method as in claim 1, wherein the source comprises a transmitter that transmits a signal containing the codewords and the information channel comprises a communication channel over which the transmitter transmits the signal.",
        "5. A method as in claim 4, wherein the n cell values comprise a feature of the signal, the feature selected from among signal features comprising signal frequency or signal magnitude or signal duration.",
        "6. A method as in claim 1, wherein determining if the received codeword is valid comprises:\ndetermining coordinates of the received codeword in an adjacency graph for the n! permutations, wherein for a received codeword permutation B given by B=[b1, b2, . . . , bn], for 2\u2266i\u2266n, the coordinates are determined according to a permutation Bi, where Bi denotes a subsequence of permutation B that contains only those numbers in {1, 2, . . . , i} for a value of the i, and pi denotes the position of i in Bi, such that for every permutation B, the coordinates of a coordinate set XB are given by XB=(x1, x2, xn\u22121)=(2\u2212p2, 3\u2212p3, . . . , n\u2212pn); and\ndetermining if the coordinates of the codeword are valid.",
        "7. A method as in claim 6, wherein the coordinates are determined to be valid if and only if the coordinates satisfy a selected one of the following summation expressions:\n\n\\({{\\sum\\limits_{i = 1}^{n - 1}\ue89e{ix}_{i}} \\equiv {0\ue89e\\left( {{{mod}\ue89e\\mspace{14mu} \ue89e2\ue89en} - 1} \\right)}},\\mspace{14mu} \ue89e{or}\\)\n\\({{{\\sum\\limits_{i = 1}^{n - 2}\ue89e{ix}_{i}} + {\\left( {n - 1} \\right) \\cdot \\left( {- x_{n - 1}} \\right)}} \\equiv {0\ue89e\\left( {{{mod}\ue89e\\mspace{14mu} \ue89e2\ue89en} - 1} \\right)}},\\)\n\nsuch that the summation expression is selected in accordance with a predetermined one of the summation expressions that corresponds to the rank modulation code, so that the corresponding received codeword is valid if one of the summation expressions is true; and\notherwise the received codeword is determined to be not valid.",
        "8. A method as in claim 6, wherein determining if the coordinates are valid further comprises correcting a received codeword determined to be not valid, such that correcting comprises:\ndetermining the set of valid coordinates that differ from the coordinates of the received codeword by distance r,\nselecting one of the valid coordinates; and\ncomputing a codeword that corresponds to the selected valid coordinate.",
        "9. A method as in claim 8, wherein:\nthe distance r is given by r=1, such that the coordinates are determined to be valid if and only if the coordinates satisfy a selected one of the following summation expressions\n\n\n\\({{\\sum\\limits_{i = 1}^{n - 1}\ue89e{ix}_{i}} \\equiv {0\ue89e\\left( {{{mod}\ue89e\\mspace{14mu} \ue89e2\ue89en} - 1} \\right)}},\\mspace{14mu} \ue89e{or}\\)\n\\({{{\\sum\\limits_{i = 1}^{n - 2}\ue89e{ix}_{i}} + {\\left( {n - 1} \\right) \\cdot \\left( {- x_{n - 1}} \\right)}} \\equiv {0\ue89e\\left( {{{mod}\ue89e\\mspace{14mu} \ue89e2\ue89en} - 1} \\right)}},\\)\n\nsuch that the summation expression is selected in accordance with a predetermined one of the summation expressions that corresponds to the rank modulation code, so that the corresponding received codeword is valid if one of the summation expressions is true; and\ncomputing a codeword comprises changing the value of the received codeword to be equal to a corrected codeword that corresponds to the valid coordinates.",
        "10. A computer method of encoding a codeword, the method comprising:\nreceiving a data value to be encoded into a codeword, wherein the codeword indicates n cell values that comprise a virtual cell in which relative rank ordering of the n cell values determines a permutation comprising one of n! permutations;\ngenerating a permutation A corresponding to the codeword, wherein A is given by A=[a1, a2, . . . , an] integer values such that the [a1, a2, . . . , an] permutation conforms to a rank modulation scheme for data representation, wherein the permutation A corresponds to a set of coordinates in an adjacency graph for the n! permutations, such that for A=[a1, a2, . . . , an], for 2\u2266i\u2266n, the coordinates are determined according to a permutation Ai, where the Ai denotes a subsequence of permutation A that contains only those numbers in {1, 2, . . . , i} for a value of the i, and pi denotes the position of i in Ai, such that for every permutation A, the coordinates of a coordinate set XA are given by XA=(x1, x2, . . . , xn\u22121)=(2\u2212p2, 3\u2212p3, . . . , n\u2212pn), and wherein the coordinates specify a value that can correct erroneously read coordinates that differs from the coordinates by a distance r; and\nproviding the permutation to a data destination over an information channel.",
        "11. A method as in claim 10, wherein the distance r is given by r=1, such that the coordinates satisfy a selected one of the following summation expressions\n\n\\({{\\sum\\limits_{i = 1}^{n - 1}\ue89e{ix}_{i}} \\equiv {0\ue89e\\left( {{{mod}\ue89e\\mspace{14mu} \ue89e2\ue89en} - 1} \\right)}},\\mspace{14mu} \ue89e{or}\\)\n\\({{\\sum\\limits_{i = 1}^{n - 2}\ue89e{ix}_{i}} + {\\left( {n - 1} \\right) \\cdot \\left( {- x_{n - 1}} \\right)}} \\equiv {0\ue89e{\\left( {{{mod}\ue89e\\mspace{14mu} \ue89e2\ue89en} - 1} \\right).}}\\)",
        "12. A method as in claim 10, wherein the receiver comprises a memory in a data device and the information channel comprises a data connection of the data device.",
        "13. A method as in claim 12, wherein the n cell values comprise charge levels of n memory cells of the data device.",
        "14. A method as in claim 10, wherein the data destination comprises a transmitter that transmits a signal containing the codewords and the information channel comprises a communication channel over which the transmitter transmits the signal.",
        "15. A method as in claim 14, wherein the n cell values comprise a feature of the signal, selected from among signal features comprising signal frequency or signal magnitude or signal duration.",
        "16. A method as in claim 10, wherein generating a permutation A comprises performing a table lookup operation to identify a permutation stored in a permutation data table and generating the stored permutation as the permutation A.",
        "17. A device that stores data, the device comprising:\na memory for storing the data;\na microcontroller that encodes the data such that n cells of the memory comprise a virtual cell in which relative rank ordering of the n cells determines a permutation comprising one of n! permutations, wherein the microcontroller determines a permutation A corresponding to the data for storing the permutation A in the n cells wherein A=[a1, a2, . . . , an] such that the [a1, a2, . . . , an] permutation conforms to a rank modulation scheme for data representation.",
        "18. A device as in claim 17, wherein the microcontroller determines the permutation A in a table lookup operation to identify a permutation mapped to the data for storing in the device.",
        "19. A device as in claim 17, wherein the permutation A corresponds to a set of coordinates in an adjacency graph for the n! permutations, such that for A=[a1, a2, . . . , an], for 2\u2266i\u2266n, the coordinates are determined according to a permutation Ai, where the Ai denotes a subsequence of permutation A that contains only those numbers in {1, 2, . . . , i} for a value of the i, and pi denotes the position of i in Ai, such that for every permutation A, the coordinates of a coordinate set XA are given by XA=(x1, x2, . . . xn\u22121)=(2\u2212p2, 3\u2212p3, . . . , n\u2212pn).",
        "20. A device as in claim 17, wherein the coordinates specify a value that can correct erroneously read coordinates that differs from the coordinates by a distance r.",
        "21. A device as in claim 20, wherein the distance r is given by r=1, and such that the coordinates satisfy a selected one of the following summation expressions\n\n\\({\\sum\\limits_{i = 1}^{n - 1}\ue89e{ix}_{i}} \\equiv {0\ue89e\\left( {{{mod}\ue89e\\mspace{14mu} \ue89e2\ue89en} - 1} \\right)\ue89e\\mspace{14mu} \ue89e{or}}\\)\n\\({{\\sum\\limits_{i = 1}^{n - 2}\ue89e{ix}_{i}} + {\\left( {n - 1} \\right) \\cdot \\left( {- x_{n - 1}} \\right)}} \\equiv {0\ue89e{\\left( {{{mod}\ue89e\\mspace{14mu} \ue89e2\ue89en} - 1} \\right).}}\\)",
        "22. A device as in claim 17, wherein the microcontroller receives the data over an information channel comprising a data connection of the device.",
        "23. A device as in claim 22, wherein the n cell values comprise charge levels of n memory cells of the device.",
        "24. A device as in claim 17, wherein the device further includes a transmitter that transmits a signal containing the codewords over an information channel that comprises a communication channel over which the transmitter transmits the signal.",
        "25. A device as in claim 24, wherein the n cell values comprise a feature of the signal, the feature selected from among signal features comprising signal frequency or signal magnitude or signal duration.",
        "26. A data device comprising:\nan interface configured to receive and provide information values and data values;\na microcontroller configured to receive data values from the interface and determine corresponding rank modulation codewords and configured to receive information values comprising rank modulation codewords from the interface and determine corresponding data values, wherein the microcontroller performs operations to encode a data value into a rank modulation codeword such that the codeword is represented by a permutation of n cells that comprise a virtual cell in which relative rank ordering of a level associated with each of the n cells determines a permutation comprising one of n! permutations, wherein the microcontroller determines a permutation A corresponding to the data value for storing the permutation A in the n cells wherein A=[a1, a2, . . . , an] such that the [a1, a2, . . . , an] permutation conforms to a rank modulation scheme for data representation, and the microcontroller performs operations to decode a received rank modulation codeword into a permutation and determine a corresponding data value.",
        "27. A device as in claim 26, wherein the microcontroller is configured to determine if a received codeword is valid by determining coordinates of the received codeword in an adjacency graph for the n! permutations, wherein for a received codeword permutation A given by A=[a1, a2, . . . , an], for 2\u2266i\u2266n, the coordinates are determined according to a permutation Ai, where Ai denotes a subsequence of permutation A that contains only those numbers in {1, 2, . . . , i} for a value of the i, and pi denotes the position of i in Ai, such that for every permutation A, the coordinates of a coordinate set XA are given by XA=(x1, x2, . . . , xn\u22121)=(2\u2212p2, 3\u2212p3, . . . , n\u2212pn), and the microcontroller further determines whether the coordinates are valid.",
        "28. A device as in claim 27, wherein the coordinates are determined to be valid if and only if the coordinates satisfy a selected one of the following summation expressions\n\n\\({\\sum\\limits_{i = 1}^{n - 1}\ue89e{ix}_{i}} \\equiv {0\ue89e\\left( {{{mod}\ue89e\\mspace{14mu} \ue89e2\ue89en} - 1} \\right)\ue89e\\mspace{14mu} \ue89e{or}}\\)\n\\({{\\sum\\limits_{i = 1}^{n - 2}\ue89e{ix}_{i}} + {\\left( {n - 1} \\right) \\cdot \\left( {- x_{n - 1}} \\right)}} \\equiv {0\ue89e\\left( {{{mod}\ue89e\\mspace{14mu} \ue89e2\ue89en} - 1} \\right)}\\)\n\nsuch that the summation expression is selected in accordance with a predetermined one of the summation expressions that corresponds to the rank modulation code, so that the corresponding received codeword is valid if one of the summation expressions is true, and otherwise the received codeword is determined to be not valid.",
        "29. A device as in claim 27, wherein the microcontroller corrects a codeword determined to be not valid by performing operations comprising:\ndetermining the set of valid coordinates that differ from the coordinates of the received codeword by distance r,\nselecting one of the valid coordinates; and\ncomputing a codeword that corresponds to the selected valid coordinate.",
        "30. A device as in claim 29, wherein the distance r is given by r=1, such that the coordinates are determined to be valid if and only if the coordinates satisfy a selected one of the following summation expressions\n\n\\({\\sum\\limits_{i = 1}^{n - 1}\ue89e{ix}_{i}} \\equiv {0\ue89e\\left( {{{mod}\ue89e\\mspace{14mu} \ue89e2\ue89en} - 1} \\right)\ue89e\\mspace{14mu} \ue89e{or}}\\)\n\\({{{\\sum\\limits_{i = 1}^{n - 2}\ue89e{ix}_{i}} + {\\left( {n - 1} \\right) \\cdot \\left( {- x_{n - 1}} \\right)}} \\equiv {0\ue89e\\left( {{{mod}\ue89e\\mspace{14mu} \ue89e2\ue89en} - 1} \\right)}},\\)\n\nsuch that the summation expression is selected in accordance with a predetermined one of the summation expressions that corresponds to the rank modulation code, so that the corresponding received codeword is valid if one of the summation expressions is true; and wherein\nthe microcontroller changes the value of the received codeword to be equal to a corrected codeword that corresponds to the selected one of the valid coordinates.",
        "31. A device as in claim 26, wherein the interface provides communication with a memory of the device configured to store the information values.",
        "32. A device as in claim 31, wherein the n cell values comprise charge levels of n memory cells of the device.",
        "33. A device as in claim 26, wherein the interface provides communication with a transmitter that transmits a signal containing the information values.",
        "34. A device as in claim 33, wherein the n cell values comprise a feature of the signal, the feature selected from among signal features comprising signal frequency or signal magnitude or signal duration.",
        "35. A computer method of generating a modulation code for use with a data storage device, the method comprising:\ngenerating n! permutations, wherein the data storage device is configured to operate such that n cells of the storage device comprise a virtual cell in which relative rank ordering of the n cells determines a permutation of the n! permutations;\nselecting one of the n! permutations as a starting permutation;\nretaining only the generated permutations having a distance greater than or equal to (2r+1), wherein the retained generated permutations comprise a rank modulation codeword alphabet that define a modulation code capable of correcting r errors in a transmitted codeword.",
        "36. A computer method as in claim 35, wherein retaining comprises:\ncomputing the distance for each pair of the generated permutations beginning with the selected permutation and each remaining permutation;\nretaining only the permutations having a distance greater than or equal to the (2r+1) distance; and\nrepeating the computing and retaining for all the n! permutations.",
        "37. A computer method as in claim 35, wherein generating comprises generating a coordinate set XB=(x1, x2, . . . , xn\u22121) for a permutation B of the n cells, wherein the permutation B comprises the n! permutations given by B=[b1, b2, . . . , bn], and the coordinates XB are defined as XB=(2\u2212p2, 3\u2212p3, . . . , n\u2212pn) where for 2\u2266i\u2266n, the value pi is the position of i in the subsequence of B that contains only those numbers in {1, 2, . . . , i}.",
        "38. A computer method as in claim 37, wherein r is given by r=1 and B is determined to be a codeword in a first codeword alphabet C1 if and only if:\n\n\\({{\\sum\\limits_{i = 1}^{n - 1}\ue89e{ix}_{i}} \\equiv {0\ue89e\\left( {{{mod}\ue89e\\mspace{14mu} \ue89e2\ue89e\\; \ue89en} - 1} \\right)}},\\mspace{14mu} \ue89e{and}\\)\nB is determined to be a codeword in a second codeword alphabet C2 if and only if\n\n\n\\({{{\\sum\\limits_{i = 1}^{n - 2}\ue89e{ix}_{i}} + {\\left( {n - 1} \\right) \\cdot \\left( {- x_{n - 1}} \\right)}} \\equiv {0\ue89e\\left( {{{mod}\ue89e\\mspace{14mu} \ue89e2\ue89en} - 1} \\right)}};\\mspace{14mu} \ue89e{and}\\)\nwherein retaining comprises:\nselecting either the first alphabet C1 or the second alphabet C2 as the set of permutations B according to the alphabet containing the greater number of codewords.",
        "39. A computer method as in claim 38, wherein generating the coordinate set XB is performed according to an initial permutation A=[a1, a2, . . . , an]=[1, 2, . . . , n] and the permutation B=[b1, b2, . . . , bn], wherein for 1\u2266i\u2266n, the permutation Ai denotes a subsequence of the permutation A such that Ai=[a1, a2, . . . , an], Bi denotes a subsequence of permutation B that contains only those numbers in Ai, and pi denotes the position of ai in Bi, then for every permutation B=[b1, b2, . . . , bn], the coordinates of the first coordinate set XB=(2\u2212p2, 3\u2212p3, . . . , n\u2212pn) for 2\u2266i\u2266n.",
        "40. A computer method as in claim 35, further comprising:\nreceiving n at a computer input interface, n comprising the number of cells with which the modulation code will be used;\nreceiving r at a computer input interface, such that r comprises the number of errors in a transmitted codeword to be corrected by the modulation code; and\nperforming the generating, selecting, and retaining in accordance with the received n and r.",
        "41. A computer method for generating a modulation code for use with a data storage device, the method comprising:\nreceiving n at a computer input interface, wherein the data storage device is configured to operate such that n cells of the storage device comprise a virtual cell in which relative rank ordering of the n cells determines a codeword value for a rank modulation code;\nreceiving r at the computer input interface, such that r comprises the number of errors in a transmitted codeword to be corrected by the rank modulation code;\ngenerating a coordinate set XB=(x1, x2, . . . , xn\u22121) for a permutation B of the n cells according to an initial permutation A=[a1, a2, . . . , an]=[1, 2, . . . , n] and the permutation B=[b1, b2, . . . , bn], wherein for 1\u2266i\u2266n, the permutation Ai denotes a subsequence of the permutation A such that Ai=[a1, a2, . . . , ai], Bi denotes a subsequence of permutation B that contains only those numbers in Ai, and pi denotes the position of ai in Bi, then for every permutation B=[b1, b2, . . . , bn], the coordinates of the first coordinate set XB are given by XB=(2\u2212p2, 3\u2212p3, . . . , n\u2212pn) for 2\u2266i\u2266n; and\ndetermining that B is a codeword if the coordinates XB are valid.",
        "42. A computer method as in claim 41, wherein the received r value is given by r=1 and B is determined to be a codeword in a first codeword alphabet C1 if and only if:\n\n\\({\\sum\\limits_{i = 1}^{n - 1}\ue89e{ix}_{i}} \\equiv {0\ue89e\\left( {{{mod}\ue89e\\mspace{14mu} \ue89e2\ue89en} - 1} \\right)\ue89e\\mspace{14mu} \ue89e{and}}\\)\nB is determined to be a codeword in a second codeword alphabet C2 if and only if\n\n\n\\({{{\\sum\\limits_{i = 1}^{n - 2}\ue89e{ix}_{i}} + {\\left( {n - 1} \\right) \\cdot \\left( {- x_{n - 1}} \\right)}} \\equiv {0\ue89e\\left( {{{mod}\ue89e\\mspace{14mu} \ue89e2\ue89en} - 1} \\right)}};\\)\nthe method further including:\nrepeating the generating and determining for the n values; and\nselecting either the first alphabet C1 or the second alphabet C2 as the set of permutations B according to the alphabet containing the greater number of codewords."
    ]
}