{
    "id": "US20180203848",
    "authors": [
        "Julien Perez",
        "Scott Nowson",
        "Fei Liu"
    ],
    "title": "AUTHOR PERSONALITY TRAIT RECOGNITION FROM SHORT TEXTS WITH A DEEP COMPOSITIONAL LEARNING APPROACH",
    "date": "2017-01-17 00:00:00",
    "abstract": "A method for trait prediction includes receiving a text sequence and generating character embeddings for characters of the text sequence. Word representations for words of the text sequence are generated with a trained character sequence model, based on the character embeddings. A sequence representation is generated for the text sequence with a trained word sequence model, based on the word representations. At least one trait prediction is generated with a trained trait model, based on the sequence representation.",
    "sections": [
        {
            "title": "DESCRIPTION",
            "paragraphs": [],
            "subsections": [
                {
                    "title": "BACKGROUND",
                    "paragraphs": [
                        "Aspects of the exemplary embodiment relate to extracting information from text and find particular application in connection with a system and method for recognizing personality traits based on short text sequences.",
                        "Exploring the relationship between word use and psychometric traits has provided significant insight into aspects of human behavior (Pennebaker, et al., \u201cPsychological aspects of natural language use: Our words, our selves,\u201d Annual Rev. Psychol., 54:547-577, 2003). Different levels of representation of language have been used, such as syntactic, semantic, and higher-order such as the psychologically-derived lexica of the Linguistic Inquiry and Word Count tool (Pennebaker, et al., \u201cThe development and psychometric properties of LIWC2015,\u201d LIWC2015 Development Manual, Austin, Tex.: University of Texas at Austin, pp. 1-25, 2015, hereinafter, Pennebaker 2015). The study of personality traits based on analysis of text has often used a bag-of-words (BOW) type of approach in which each word in a vocabulary is associated with a respective feature-based word representation. A representation of a sequence of text can then be built by aggregating the word level representations. An example of this method is the Open Vocabulary approach (Schwartz, et al., \u201cPersonality, Gender, and Age in the Language of Social Media: The Open-Vocabulary Approach,\u201d PLOS ONE, 8(9), pp. 1-16, 2013, hereinafter, Schwartz 2013). Given a set of personality traits, such as Extroversion, Emotional Stability, Agreeableness, Conscientiousness, and Openness, the sequence representation can be used to predict the personality traits of the author of the text.",
                        "One drawback of this bag-of-linguistic-features approach is that considerable effort can be spent on feature engineering. Another is that it relies on an assumption that these features, like the traits to which they relate, are similarly stable: the same language features always indicate the same traits. However, the relationship between language and personality is not consistent across all forms of communication (Nowson, et al., \u201cLook! Who's Talking? Projection of Extraversion Across Different Social Contexts,\u201d Proc. WCPR14, Workshop on Computational Personality Recognition at ACMM (22nd ACM Int'l Conf. on Multimedia), 2014, hereinafter, Nowson 2014). As an example, the use of negative emotion language (in particular, words relating to \u2018anger\u2019) is a strong indicator of Extraversion in conversational data, but this is not the case in the medium of video blogging.",
                        "Classification of short sequences of text, such as tweets and text messages, tends to be particularly challenging, due to the specific uses of language of the user, driven by the message length limitation of the platforms, e.g., 140 characters in Twitter. For example, abbreviated and made-up words tend to be used, which are not in the vocabulary and therefore lack a word representation.",
                        "Early work on computational personality recognition used SVM-based approaches and manipulated lexical and grammatical feature sets (Argamon, et al., \u201cLexical predictors of personality type,\u201d Proc. 2005 Joint Annual Meeting of the Interface and the Classification Society of North America, pp. 1-16, 2005; Nowson, et al., \u201cThe Identity of Bloggers: Openness and gender in personal weblogs,\u201d AAAI Spring Symp., Computational Approaches to Analyzing Weblogs, pp. 163-167, 2006). Data labelled with personality data is sparse (Nowson 2014) and there has been more interest in reporting novel feature sets. For example, surface forms, syntactic features, such as POS tags and dependency relations, analysis of punctuation and emoticon use, use of latent semantic analysis for topic modeling, and the use of external resources such as Linguistic Inquiry and Word Count (LIWC) (Pennebaker 2015) have been investigated. When applied to tweets, however, LIWC requires further cleaning of the data.",
                        "Deep-learning based approaches to personality trait recognition have also been investigated. A neural network based approach to personality prediction of users is described in Kalghatgi, et al., \u201cA neural network approach to personality prediction based on the big-five model,\u201d Int'l J. Innovative Research in Advanced Engineering (IJIRAE), 2(8):56-63. 2015. In this model, a Multilayer Perceptron (MLP) takes as input a collection of hand-crafted grammatical and social behavioral features from each user and assigns a label to each of the five personality traits. A Recurrent Neural Network (RNN) based system, exploiting the turn-taking of conversation for personality trait prediction, is described in Su, et al., \u201cExploiting turn-taking temporal evolution for personality trait perception in dyadic conversations,\u201d IEEE/ACM Trans. on Audio, Speech, and Language Processing, 24(4):733-744, 2016. In this approach, RNNs are employed to model the temporal evolution of dialog, taking as input LIWC-based and grammatical features. The output of the RNNs is then used for the prediction of personality trait scores of the participants of the conversations. Both of these approaches utilize hand-crafted features which rely heavily on domain expertise. Also they focus on the prediction of trait scores at the user level, given all the available text from a user.",
                        "For applying deep learning models to NLP problems, word lookup tables may be used, where each word is represented by a dense real-valued vector in a low-dimensional space (Socher, et al., \u201cRecursive deep models for semantic compositionality over a sentiment Treebank,\u201d Proc. EMNLP, pp. 1631-1642, 2013; Kalchbrenner, et al., \u201cA convolutional neural network for modelling sentences,\u201d Proc. ACL, pp. 655-665, 2014; Yoon Kim, \u201cConvolutional neural networks for sentence classification,\u201d Proc. EMNLP, pp. 1746-1751, 2014). In order to obtain a sensible set of embeddings, a large corpus may be used for training the mode; in an unsupervised fashion, e.g., using Word2Vec representations (Mikolov, et al., \u201cEfficient estimation of word representations in vector space,\u201d Int'l Conf. on Learning Representations (ICLR 2013), 2013; Mikolov, et al., \u201cDistributed representations of words and phrases and their compositionality,\u201d Proc. 27th Annual Conf. on Neural Information Processing Systems (NIPS 2013), pp 3111-3119, 2013) and GloVe (Pennington, et al., Glove: Global vectors for word representation,\u201d Proc. 2014 Conf. on Empirical Methods in Natural Language Processing (EMNLP 2014), pp. 1532-1543, 2014).",
                        "Despite the success in capturing syntactic and semantic information with such word vectors, there are two practical problems with such an approach (Ling, et al., \u201cFinding function in form: Compositional character models for open vocabulary word representation,\u201d Proc. 2015 Conf. on Empirical Methods in Natural Language Processing, pp. 1520-1530, 2015, hereinafter, Ling 2015). First, due to the flexibility of language, previously unseen words are bound to occur regardless of how large the unsupervised training corpus is. The problem is particularly serious for text extracted from social media platforms, such as Twitter and Facebook, due to the noisy nature of user-generated text, e.g., typos, ad hoc acronyms and abbreviations, phonetic substitutions, and even meaningless strings (Han, et al., \u201cLexical normalisation of short text messages: Makn sens a #twitter,\u201d Proc. 49th Annual Meeting of the ACL: Human Language Technologies, pp. 368-378, 2011). Second, the number of parameters for a model to learn is overwhelmingly large. Assuming that each word is represented by a vector of d dimensions, the total size of the word lookup table is d\u00d7|V|, where |V| is the size of the vocabulary, which tends to scale to the order of hundreds and thousands. Again, this problem is even more pronounced in noisier domains, such as short text generated by online users.",
                        "A compositional character-to-sequence model is described herein which addresses some of these problems."
                    ],
                    "subsections": [],
                    "outline_long": [
                        "introduce personality trait recognition",
                        "motivate word use and psychometric traits",
                        "summarize linguistic inquiry and word count tool",
                        "describe bag-of-words approach",
                        "limitations of bag-of-linguistic-features approach",
                        "motivate classification of short sequences of text",
                        "describe early work on computational personality recognition",
                        "summarize SVM-based approaches",
                        "motivate deep-learning based approaches",
                        "describe neural network based approach",
                        "describe recurrent neural network based system",
                        "motivate word lookup tables",
                        "describe compositional character models",
                        "limitations of word vectors",
                        "motivate compositional character-to-sequence model"
                    ],
                    "num_characters": 7956,
                    "outline_medium": [
                        "introduce personality trait recognition",
                        "motivate bag-of-words approach",
                        "limitations of bag-of-words approach",
                        "introduce deep-learning based approaches",
                        "motivate neural network approach",
                        "limitations of neural network approach",
                        "motivate compositional character-to-sequence model"
                    ],
                    "outline_short": [
                        "motivate personality trait recognition",
                        "limitations of bag-of-words approach",
                        "overview of deep learning approaches"
                    ]
                },
                {
                    "title": "BRIEF DESCRIPTION",
                    "paragraphs": [
                        "In accordance with one aspect of the exemplary embodiment, a method for trait prediction includes receiving a text sequence and generating character, embeddings for characters of the text sequence. Word representations for words of the text sequence are generated with a trained character sequence model, based on the character embeddings. A sequence representation is generated for the text sequence with a trained word sequence model, based on the word representations. At least one trait prediction is generated with a trained trait model, based on the sequence representation.",
                        "At least one of the generating character embeddings, generating word representations, generating the sequence representation, and generating at least one trait prediction may be performed with a processor.",
                        "In accordance with another aspect of the exemplary embodiment, a system for trait prediction includes a hierarchical prediction model which includes a character sequence model, which generates word representations for words of the text sequence, based on respective character embeddings, a word sequence model, which generates a sequence representation for the text sequence, based on the word representations, and a trait model, which generates at least one trait prediction, based on the sequence representation. A character embedding component generates character embeddings for characters of an input text sequence. A modeling component inputs the character embeddings for each word into the hierarchical prediction model. A processor implements the character embedding component and modeling component.",
                        "In accordance with another aspect of the exemplary embodiment, a method for representing a text sequence includes receiving a text sequence including a sequence of words, each of the words comprising a sequence of at least one character, at least some of the words comprising more than one character. With a character embedding component, character embeddings are generated for characters of the input text sequence. The character embeddings are input to a hierarchical prediction model which includes a character sequence model, which generates word representations for words of the text sequence, based on respective character embeddings, and a word sequence model, which generates a sequence representation for the text sequence, based on the word representations. Information regarding an author of the text sequence is output, based on the sequence representation.",
                        "At least one of the generating character embeddings and inputting the character embeddings into a hierarchical prediction model may be performed with a processor."
                    ],
                    "subsections": [],
                    "outline_long": [
                        "introduce trait prediction method",
                        "generate character embeddings",
                        "generate word representations",
                        "generate sequence representation",
                        "generate trait prediction"
                    ],
                    "num_characters": 2631,
                    "outline_medium": [
                        "describe trait prediction method",
                        "describe system for trait prediction"
                    ],
                    "outline_short": [
                        "outline trait prediction method"
                    ]
                },
                {
                    "title": "DETAILED DESCRIPTION",
                    "paragraphs": [
                        "Aspects of the exemplary embodiment relate to a system and method for predicting personality traits with a deep-learning model for personality recognition. The prediction involves a supervised sequence classification, which is based on a joint atomic representation of the text, based on both characters and words. The system is flexible enough to be able to predict trait scores from a single short text, such as a tweet. The system can also be used to infer the personality of a user, given a collection of short texts.",
                        "An automatic latent representation inference based on a parse-free input representation of the text can balance the bias and variance of a typically sparse dataset.",
                        "As used herein, a \u201ccharacter\u201d is a single symbol in a predefined, finite alphabet of characters (e.g., a subset of the ASCII character set). No character in the alphabet includes more than one symbol. A \u201cword\u201d includes a set of characters drawn from the alphabet, and although some words may consist of a single character, at least some of the words in a text sequence include at least two, or at least three, or at least four of the characters. As defined herein, \u201cwords\u201d can include number sequences, punctuation, and the like, and need not be defined in a dictionary, such as words made up by an author. A \u201ctext sequence\u201d is a sequence of words and while some text sequences may consist of a single word, at least some text sequences include at least two, or at least three, or at least four words.",
                        "With reference to FIG. 1, a functional block diagram of a computer-implemented system 10 for personality trait prediction is shown. The illustrated computer system 10 includes memory 12 which stores software instructions 14 for performing the method illustrated in FIG. 2 and a processor 16 in communication with the memory for executing the instructions. The system 10 also includes one or more input/output (I/O) devices, such as a network interface 18 and/or a user input output interface 20. The I/O interface 20 may communicate with one or more of a display 22, for displaying information to users, speakers, and a user input device 24, such as a keyboard or touch or writable screen, and/or a cursor control device, such as mouse, trackball, or the like, for inputting text and for communicating user input information and command selections to the processor device 16. The various hardware components 12, 16, 18, 20 of the system 10 may all be connected by a data/control bus 28.",
                        "The computer system 10 may include one or more computing devices 30, such as a PC, such as a desktop, a laptop, palmtop computer, portable digital assistant (PDA), server computer, cellular telephone, tablet computer, pager, combination thereof, or other computing device capable of executing instructions for performing the exemplary method.",
                        "The memory 12 may represent any type of non-transitory computer readable medium such as random access memory (RAM), read only memory (ROM), magnetic disk or tape, optical disk, flash memory, or holographic memory. In one embodiment, the memory 12 comprises a combination of random access memory and read only memory. In some embodiments, the processor 16 and memory 12 may be combined in a single chip. Memory 12 stores instructions for performing the exemplary method as well as the processed data.",
                        "The network interface 18 allows the computer to communicate with other devices via a computer network 32, such as a local area network (LAN) or wide area network (WAN), telephone network, or the internet, and may comprise a modulator/demodulator (MODEM) a router, a cable, and/or Ethernet port.",
                        "The digital processor device 16 can be variously embodied, such as by a single-core processor, a dual-core processor (or more generally by a multiple-core processor), a digital processor and cooperating math coprocessor, a digital controller, or the like. The digital processor 16, in addition to executing instructions 14 may also control the operation of the computer 30.",
                        "The term \u201csoftware,\u201d as used herein, is intended to encompass any collection or set of instructions executable by a computer or other digital system so as to configure the computer or other digital system to perform the task that is the intent of the software. The term \u201csoftware\u201d as used herein is intended to encompass such instructions stored in storage medium such as RAM, a hard disk, optical disk, or the like, and is also intended to encompass so-called \u201cfirmware\u201d that is software stored on a ROM or the like. Such software may be organized in various ways, and may include software components organized as libraries, Internet-based programs stored on a remote server or so forth, source code, interpretive code, object code, directly executable code, and so forth. It is contemplated that the software may invoke system-level code or calls to other software residing on a server or other location to perform certain functions.",
                        "The illustrated software instructions 14 include a learning component 36, a text preprocessing component 38, a character embedding component 40, a modeling component 42 including a sequence representation component 44, a prediction component 46, and an output component 48.",
                        "The learning component 36 learns a prediction model or models 50. Model 50 is a compositional model including a sequence embedding model 52 and a trait prediction model 54. The sequence embedding model 52 includes a character sequence model 56 and a word sequence model 58. The learning component 36 has access to a training collection 60 of text sequences that are each labeled with a personality trait label. Each personality trait label may include a value for each, or at least one, of a predefined set of personality traits. The exemplary set of personality traits, sometimes referred to as the Big 5, includes the traits Extroversion (EXT), Emotional Stability (STA), Agreeableness (AGR), Conscientiousness (CON), and Openness (OPN). Low values for the traits indicate their inverse or lack of these traits, i.e., introversion, neuroticism, disagreeableness, carelessness, and reticence, respectively. However, fewer, more, or different personality traits may be in the set, which may be specific to the end use of the prediction. In one embodiment, a separate model is learned for each personality trait. In another embodiment, a multitask model is learned which outputs predictions for two or more traits. Once the prediction model(s) 50 has/have been learned, the learning component 36 may be omitted. Alternatively, model learning may be performed on a separate computing device.",
                        "The optional text preprocessing component 38 receives and decomposes an input text sequence 62 into a sequence of words composed of characters drawn from an alphabet, i.e., a predefined, finite set of characters. Characters which are not in the alphabet may be ignored, assigned to an \u201cunknown\u201d character, or converted to the closest character, e.g., accented characters may be converted to the corresponding un-accented ones.",
                        "The character embedding component 40 generates a character-level representation 64 (multi-dimensional vector) for each character in each word of the text sequence 62 (or in a set of text sequences) associated with an author.",
                        "The sequence representation component 44 of the modeling component inputs the set of character-level representations 64 for each word of the text sequence 62 into the learned model 50. First, the character sequence model 56 generates a word representation 66 (multi-dimensional vector) for each of the words in the text sequence, based on the respective character-level representations 64. The set of word representations 66 are then input to the word sequence model 58, which outputs a sequence representation 68 based thereon, i.e., a multidimensional representation of the input sequence 62 of words. The prediction component 46 inputs the sequence representation 68 into the learned trait model 54, which outputs a trait prediction 70 based thereon. The output 70 of the model 50 may be a prediction with respect to at least one personality trait for the author of the text sequence 62. As will be appreciated, trait predictions for a group of sequences from the same author (or even a set of authors) may be aggregated into an overall prediction. Additionally, while the sequence representation component 44 and prediction component 46 are shown as separate components they may operate as a single modeling component 42.",
                        "The output component 48 outputs the trait prediction 70, or information based thereon, to an output device 74, e.g., to a client computing device, display device 22, printer, external memory device, or the like. In some embodiments, the output component 48 generates information based on the trait prediction 70, such as whether the author is predicted to be a good candidate for a certain role, e.g., in employee hiring or job seeking, what the author's views on a certain topic are predicted to be, a recommendation for the author, such as groups to join or products/services that the author may be interested in, or the like.",
                        "FIG. 2 illustrates a method for trait prediction which can be performed with the system of FIG. 1. The method begins at S100.",
                        "At S102, one or more prediction model(s) 50 is learned using the set of trait-labeled training samples 60, by the learning component 36, and stored in memory 12. With reference also to FIG. 3, model learning may include preprocessing the training text sequences 60 (S202), embedding characters of each training sequence in an embedding space (in the same manner as for an input sequence 62) (S204), passing the embedded character representations through the model 50, and using a computed error between the trait label and the prediction output from the model to progressively adapt the parameters of the model 50 (S204). The learned parameters of the model 50 may be stored in computer memory, such as memory 12. As will be appreciated, given a learned model 50, step S102 can be omitted.",
                        "At S104, an input text sequence 62 is received, and may undergo preprocessing, by the preprocessing component 38 (as for S202).",
                        "At S106, a character-level embedding 64 is generated for each character in the optionally preprocessed text sequence, by the character embedding component 40 (as for S204).",
                        "At S108, the set of character-level embeddings of each word are input to the character sequence model 56 of the model 50, by the sequence representation component 44. A word-level representation 66 is generated and output for each word in the optionally preprocessed text sequence, by the model 56.",
                        "At S110, the set of word-level embeddings output at S108 are input to the word sequence model 58, by the sequence representation component 44. A sequence-level representation 68 is generated and output for the input text sequence, by the model 58.",
                        "At S112, the sequence-level representation 68 is input to the trait model 54, by the prediction component 46. A prediction 70, such as a score, for at least one trait is output by the prediction model.",
                        "At S114, the trait prediction 70, or information based thereon, is output from the system 10 by the output component 48.",
                        "The method ends at S116.",
                        "The method illustrated in FIGS. 2 and/or 3 may be implemented in a computer program product (or products) that may be executed on a computer (or computers). The computer program product may comprise a non-transitory computer-readable recording medium on which a control program is recorded (stored), such as a disk, hard drive, or the like. Common forms of non-transitory computer-readable media include, for example, floppy disks, flexible disks, hard disks, magnetic tape, or any other magnetic storage medium, CD-ROM, DVD, or any other optical medium, a RAM, a PROM, an EPROM, a FLASH-EPROM, or other memory chip or cartridge, or any other non-transitory medium from which a computer can read and use. The computer program product may be integral with the computer 30, (for example, an internal hard drive of RAM), or may be separate (for example, an external hard drive operatively connected with the computer 30), or may be separate and accessed via a digital data network such as a local area network (LAN) or the Internet (for example, as a redundant array of inexpensive or independent disks (RAID) or other network server storage that is indirectly accessed by the computer 30, via a digital network).",
                        "Alternatively, the method may be implemented in transitory media, such as a transmittable carrier wave in which the control program is embodied as a data signal using transmission media, such as acoustic or light waves, such as those generated during radio wave and infrared data communications, and the like.",
                        "The exemplary method may be implemented on one or more general purpose computers, special purpose computer(s), a programmed microprocessor or microcontroller and peripheral integrated circuit elements, an ASIC or other integrated circuit, a digital signal processor, a hardwired electronic or logic circuit such as a discrete element circuit, a programmable logic device such as a PLD, PLA, FPGA, Graphics card CPU (GPU), or PAL, or the like. In general, any device, capable of implementing a finite state machine that is in turn capable of implementing the flowchart shown in FIGS. 2 and/or 3, can be used to implement the method for trait prediction. As will be appreciated, while the steps of the method may all be computer implemented, in some embodiments one or more of the steps may be at least partially performed manually. As will also be appreciated, the steps of the method need not all proceed in the order illustrated and fewer, more, or different steps may be performed.",
                        "Further details of the system and method will now be described."
                    ],
                    "subsections": [
                        {
                            "title": "Sequence Preprocessing (S104, S202)",
                            "paragraphs": [
                                "The input text sequence 62 may be a short message, such as a sentence or a sorter or longer sequence, e.g., one which is limited to a maximum number of characters, such as a tweet. In some embodiments, longer sequences may be split into two or more shorter ones, such as sentences, which may be processed separately. While sequences 62 of as few as one word may be considered, in general, an input text sequence 62 includes two or more words, and in general, at least three words.",
                                "The input sequence may undergo some limited preprocessing. In particular, the sequence may be tokenized to identify a sequence of words. An input sequence, for example, could be \u201cSaw u by the elev8r @JohnSmith,\u201d with the words (saw, u, by, etc.) being identified by the white spaces between them. As will be appreciated, the words are not n-grams in that they are not limited to any fixed size n. Tokenization, in the case of tweets, may be performed using Twokenizer (see, Owoputi, et al., \u201cImproved part-of-speech tagging for online conversational text with word clusters,\u201d Proc. NAACL, pp. 380-390, 2013), in order to normalize hashtag-preceded topics, user mentions, and/or uniform resource locators (URLs). Unlike the majority of the language used in a tweet, URLs and mentions are used for their targets, and not their surface forms. The text can be normalized by mapping these features to single characters (e.g., @username\u2192@; http://t.co/\u2192\u0302; and #topic\u2192#). Thus, the sequence above may be processed to generate the word sequence \u201cSaw u by the elev8r @\u201d. This limits the risk of modeling the character usage (e.g., in JohnSmith) which was not directly influenced by the personality of the author.",
                                "Each word wi is decomposed into a sequence of characters {c1, c2, . . . , cj, . . . , cn}, drawn from a predefined alphabet C of characters, where n is the number of characters in the word. The number of characters in the alphabet is represented by |C|. In practice, some or most of the words include two or more characters, although some may have only one. The exemplary alphabet may include an entry for each uppercase and lowercase letter as well as numbers and punctuation and those used to represent generic placeholders, such as @, \u0302, and #. In some languages, accented characters may also be included in the alphabet. Unrecognized characters may all be assigned to a common representative character, such as *, or ignored."
                            ],
                            "subsections": [],
                            "outline_long": [
                                "describe input text sequence",
                                "describe tokenization",
                                "describe normalization",
                                "describe word decomposition"
                            ],
                            "num_characters": 2416,
                            "outline_medium": [
                                "describe input text sequence",
                                "describe tokenization and normalization of input sequence"
                            ],
                            "outline_short": [
                                "preprocess input text sequence: tokenization, normalization"
                            ]
                        },
                        {
                            "title": "Character Embedding (S106)",
                            "paragraphs": [
                                "The character embedding component 40 outputs a character embedding 64 for each character in the input, optionally preprocessed, text sequence 62. Specifically, suppose the text sequence 62 is a sentence s consisting of a sequence of words {w1, w2, . . . , wi, . . . , wm}, where m is the number of words in the text sequence 62. A function c(wi,j) is defined which takes as input a word wi, together with an index j and returns the one-hot vector representation of the jth character of the word wi. This is a binary vector of length |C|(the size of the character alphabet), having a 1 at the index cj of the character and where all other entries are 0. An embedding ci,j of the character, c(wi,j) is generated with a transformation Ec that converts the one hot vector to a d-dimensional vector: ci,j=Ecc(wi,j), where Ec\u03f5d\u00d7|C| (Ec. is a learnt parameter matrix of the model 50). This multiplies the one hot vector by a d\u00d7|C| matrix Ec to generate a vector of dimensionality d. d may be for example, at least 10 or at least 20 and in some embodiments may be up to 1000 or up to 100, such as 50. In the next stage, in order to construct the representation of word wi, the sequence of character embeddings {ci,1, . . . , ci,n}, is taken as input to the model 50.",
                                "In one embodiment, a look up table 76, or other data structure may be generated, which stores the character embeddings 64 for characters in the alphabet. The look up table 76 may be stored in memory 12, avoiding the need to compute the character embeddings on the fly."
                            ],
                            "subsections": [],
                            "outline_long": [
                                "describe character embedding component",
                                "describe one-hot vector representation",
                                "describe embedding transformation"
                            ],
                            "num_characters": 1528,
                            "outline_medium": [
                                "describe character embedding component"
                            ],
                            "outline_short": [
                                "generate character embedding: one-hot vector representation, transformation to d-dimensional vector"
                            ]
                        },
                        {
                            "title": "Sequence Representation and Prediction",
                            "paragraphs": [
                                "An exemplary prediction model 50 is illustrated in FIG. 4, where dotted boxes indicate concatenation. The compositional model 50 operates hierarchically at the character, word and sentence level, while being capable of harnessing personality-sensitive signals buried as deep as the character level. During training, the model 50 learns the embeddings of characters and how they can be used to construct words. The exemplary model includes a hierarchy of recurrent neural networks (RNN) 56, 58, 54, stacked one on top of the other.",
                                "In the exemplary model 50, the representation 66 of each word is constructed, at S108 (and similarly, during the training phase), by the character sequence model 56, from its constituent character embeddings 64. The illustrated character sequence model 56 is a first neural network, such as character-level bi-directional recurrent neural network (Char-Bi-RNN). While a single Char-Bi-RNN 56 is illustrated in FIG. 4, each word in the sequence is separately passed through the Char-Bi-RNN. The constructed word representations 66 are then fed, at S110, to the word sequence model 58, which can be a second neural network, such as a word-level bi-directional RNN (Word-Bi-RNN).",
                                "Each RNN model 56, 58 is composed of a number of recurrent units (or cells), each having parameters that are iteratively adapted, in training, by applying a sequence of updates. In the case of the RNN model 56, forward and backward character RNNs 80, 82, each composed of a sequence of the recurrent units 88, 90, 92 and 94, 96, 98, generate a respective output hidden state as a function of a respective character embedding and a hidden state generated for previously seen characters. The number of hidden states generated corresponds to the number of characters in the word being considered. Each word is represented by the concatenation of the last hidden states of the forward and backward character-RNNs 80, 82 respectively. In the case of the RNN model 58, forward and backward word RNNs 84, 86, each composed of a sequence of the recurrent units 100, 102, 104 and 106, 108, 110, generate a respective output hidden state as a function of a respective word embedding and a hidden state generated for previously-seen words. The number of hidden states generated corresponds to the number of words in the sequence being considered. The sentence 62 is represented by the concatenation 68 of the last hidden states of the forward and backward Word-RNNs 84, 86 respectively.",
                                "Each hidden state may be a vector of at least 20 dimensions, such as at least 64, or at least 128, or at least 256 dimensions. Hidden states of the RNNs 56, 58 may have the same number, or a different number, of dimensions.",
                                "Subsequently, at S112, the prediction model 54, such as a feedforward neural network, takes as input the representation 68 of a sentence output by the RNN model 58 and returns a prediction 70, e.g., as scalar score, for a specific personality trait (or in a multitask model, for more than one trait, such as for at least two, or at least three, or up to twenty, or up to ten traits, such as five traits). The entire model 50 is referred to in the examples below as a Character to Word to Sentence for Personality Trait (C2W2S4PT) model.",
                                "The character sequence model (e.g., Char-Bi-RNN) 56 can be constructed similarly to the character-level word representation learning (C2 W) model of Ling 2015. This model is based on the assumption that character sequences are syntactically and semantically informative of the words they compose. In one embodiment, the model 56 includes a bi-directional long short-term memory (LSTM) network, as described, for example, in Hochreiter, et al., \u201cLong short-term memory,\u201d Neural computation, 9(8):1735-1780, 1997. In another embodiment, a gated recurrent unit (GRU) network is used, as described for example in Chung, et al., \u201cEmpirical evaluation of gated recurrent neural networks on sequence modeling,\u201d arXiv:1412.3555, 2014; Kumar, et al., \u201cAsk me anything: Dynamic memory networks for natural language processing,\u201d arXiv:1506.07285, 2015; and Jozefowicz, et al., \u201cAn empirical exploration of recurrent network architectures,\u201d Proc. 32nd Int'l Conf. on Machine Learning (ICML 2015), pp. 2342-2350, 2015.",
                                "The model 58 may be configured similarly to that of the character level model 56, e.g., as an LSTM or GRU network, but in this case, takes as input the word-level representations 66, with the output 68 being at the sentence level. Both layers may include forward and backward RNNs 80, 82 and 84, 86, respectively.",
                                "In order to construct the representation of word wi, the sequence of character embeddings 64 {ci,1, . . . , ci,n}, where n is the number of characters in wi, is taken as input to the Char-Bi-RNN 56. As an example, in the case of a gated recurrent unit (GRU) as the recurrent unit in the Bi-RNNs, the forward pass 80 of the Char-Bi-RNN is carried out using the following updates for each GRU unit 88, 90, 92:",
                                "{right arrow over (z)}i,jc=\u03c3({right arrow over (W)}zcci,j+{right arrow over (U)}hzc{right arrow over (h)}i,j-1c+{right arrow over (b)}zc)\u2003\u2003(1)",
                                "{right arrow over (r)}i,jc=\u03c3({right arrow over (W)}rcci,j+{right arrow over (U)}hrc{right arrow over (h)}i,j-1c+{right arrow over (b)}rc)\u2003\u2003(2)",
                                "{right arrow over ({tilde over (h)})}i,jc=tanh({right arrow over (W)}hcci,j+{right arrow over (r)}i,jc\u2299{right arrow over (U)}hhc{right arrow over (h)}i,j-1c+{right arrow over (b)}hc)\u2003\u2003(3)",
                                "{right arrow over (h)}i,jc={right arrow over (z)}i,jc\u2299{right arrow over (h)}i,j-1c+(1\u2212{right arrow over (z)}i,jc)\u2299{right arrow over ({tilde over (h)})}i,jc\u2003\u2003(4)",
                                "where \u03c3 represents point-wise nonlinearities such as a sigmoid or hyperbolic tangent function (e.g., a sigmoid function), \u2299 is the element-wise product, tank is the hyperbolic tangent, {right arrow over (W)}zc, {right arrow over (W)}rc, {right arrow over (W)}hc, {right arrow over (U)}hzc, {right arrow over (U)}hrc, {right arrow over (U)}hhc are the parameters for the model to learn (weight matrices), and {right arrow over (b)}zc, {right arrow over (b)}rc, {right arrow over (b)}hc are the bias terms (weight vectors). {right arrow over (h)}i,j-1c is the input hidden state, {right arrow over (h)}i,jc is the output hidden state, and {right arrow over ({tilde over (h)})}i,jc is an intermediate hidden state. The bias terms may be vectors having the same number of dimensions as the hidden states, and may be selected by cross validation or learned during training. The weight matrices have the same number of dimensions as the hidden states and bias terms in one direction and twice that number in the other direction, e.g., a 512\u00d7256 element matrix.",
                                "Each GRU (or LSTM) cell 88, 90, 92 of the forward pass 80 takes as input the representation of the next character in the word being represented, going from left to right (i.e., in the reading direction). Eqns. (1)-(4) are then computed. Except for the first cell, Eqns. (1) and (2) take as input the hidden state representation {right arrow over (h)}i,j-1c generated as the output of Eqn. (4) in the previous cell, in addition to the character embedding ci,j 64. For the first cell 88, corresponding to the first letter in the word, a predefined {right arrow over (h)}i,j-1c is used, since there is no prior cell. Thus for example, if the word to be represented is cat, the first cell 88 takes as input the embedding of the first character c as ci,j and Eqn. (4) outputs a hidden state {right arrow over (h)}i,jc for that letter. This is input to Eqns. (1) and (2) in the second cell 90 as {right arrow over (h)}i,j-1c and the embedding of the letter a is input as ci,j. The embedding of the last letter t of the word is input to the final cell 92, whose output {right arrow over (h)}i,jc is used to generate the word embedding 66.",
                                "The backward pass 82, the hidden state of which is symbolized by , is performed similarly, although with a different set of GRU weight matrices , , , , ,  and bias terms , , . It should be noted that both the forward and backward passes of the Char-RNN 56 share the same character embeddings. Thus, for example, in the case of the word cat, the first cell 94 of the backward pass takes as input the embedding ci,j of the character t and a predefined . Eqn. (4) outputs , which is input, to the next cell 96 in the sequence, as along with the embedding ci,j of the letter a, and so forth, with the hidden state , of the final cell 98, being used to generate the word embedding 66.",
                                "As illustrated in FIG. 4, wi is represented by the concatenation of the last hidden states {right arrow over (h)}i,nc and  of the forward and backward Char-RNNs 80, 82. Specifically, the word representation ew=[{right arrow over (h)}i,nc; ]T, where T represents the transpose operator.",
                                "In some embodiments, word embeddings 66 for some commonly-used words may be precomputed with the model 56 and stored in a data structure, such as a look-up table, in memory 12 so that they do not need to be recomputed for each new text sequence 62.",
                                "Once all the word representations ewfor i\u03f5[1,n] (the words in the input sequence) have been constructed from their constituent characters, they are then processed by the Word-Bi-RNN 58, which is similar to the Char-Bi-RNN but on the word level with word rather than character embeddings:",
                                "{right arrow over (z)}iw=\u03c3({right arrow over (W)}zwew+{right arrow over (U)}hzw{right arrow over (h)}i-1w+{right arrow over (b)}zw)\u2003\u2003(5)",
                                "{right arrow over (r)}iw=\u03c3({right arrow over (W)}rwew+{right arrow over (U)}hrw{right arrow over (h)}i-1w+{right arrow over (b)}rw)\u2003\u2003(6)",
                                "{right arrow over ({tilde over (h)})}iw=tanh({right arrow over (W)}hwew+{right arrow over (r)}iw\u2299{right arrow over (U)}hhw{right arrow over (h)}i-1w+{right arrow over (b)}hw)\u2003\u2003(7)",
                                "{right arrow over (h)}iw={right arrow over (z)}iw\u2299{right arrow over (h)}i-1w+(1\u2212{right arrow over (z)}iw)\u2299{right arrow over ({tilde over (h)})}iw\u2003\u2003(8)",
                                "for the forward pass 84, where {right arrow over (W)}zw, {right arrow over (W)}rw, {right arrow over (W)}hw, {right arrow over (U)}hzw, {right arrow over (U)}hrw, {right arrow over (U)}hhw are the parameters (matrices) for the model to learn, and {right arrow over (b)}zw, {right arrow over (b)}rw, {right arrow over (b)}hw are the bias terms (vectors). In a similar fashion to how a word is represented, the sentence embedding is constructed by concatenation: es=[{right arrow over (h)}mw; ]T. Here, the input to Eqn. (5) of the first cell 100 in the forward pass is the word embedding ewof the first word in the sequence. For example, for the sequence \u201cthe cat sat\u201d, the word embedding of the, output by the Character-Bi-RNN 56, is input to Eqn. (5), together with a predefined {right arrow over (h)}i-1w, and so forth, in a similar manner as for the character RNN 56. The backward pass is performed using the same equations for each cell in the reverse word order (\u201csat cat the\u201d), with the respective set of backward parameter matrices and bias terms.",
                                "In the case of an LSTM, rather than a GRU, specific gates are used:",
                                "{right arrow over (l)}t\u03c3({right arrow over (W)}xxt+{right arrow over (W)}hi{right arrow over (h)}t-1+{right arrow over (W)}ci{right arrow over (c)}t-1+{right arrow over (b)}i)\u2003\u2003(9)",
                                "{right arrow over (f)}t\u03c3({right arrow over (W)}xxt+{right arrow over (W)}hf{right arrow over (h)}t-1+{right arrow over (W)}cf{right arrow over (c)}t-1+{right arrow over (b)}f)\u2003\u2003(10)",
                                "{right arrow over (c)}t=ft{right arrow over (c)}t-1+it tanh({right arrow over (W)}xxt+{right arrow over (W)}hc{right arrow over (h)}t-1+{right arrow over (b)}c)\u2003\u2003(11)",
                                "{right arrow over (o)}t=\u03c3({right arrow over (W)}xxt+{right arrow over (W)}ho{right arrow over (h)}t-1+{right arrow over (W)}co{right arrow over (c)}t+{right arrow over (b)}o)\u2003\u2003(12)",
                                "{right arrow over (h)}t={right arrow over (o)}t tanh {right arrow over (c)}t\u2003\u2003(13)",
                                "where {right arrow over (lt)}, {right arrow over (ot)}, and {right arrow over (ft)} are the respective input, output, and forget gates, {right arrow over (ot)} and tanh are the element-wise sigmoid and hyperbolic tangent activation functions, x the input and b the bias term. Backward LSTMs are similarly constructed.",
                                "In the exemplary embodiment, to estimate the score for a particular personality trait, the Word-Bi-RNN 58 is topped with a Multi-Layer Perceptron (MLP) 54 which takes as input the sentence embedding es output by the word Word-Bi-RNN 58 and returns the estimated score \u0177s for a given trait. In a first layer 112 of the model 54, the sentence embedding es 68 is passed through a REctified Linear Unit (ReLU). This applies an activation function of the form hs=ReLU(Wehes+bh), where ReLU is the REctified Linear Unit defined as ReLU(x)=max(0, x), that assigns a value of 0 to negative values in the output vector hs, Weh is the parameter for the model to learn, bh is the bias term, and hs the hidden representation 114 of the MLP. This is passed to a second, linear layer 116, which returns an estimated score \u0177s=Whyhs+by, where Why is the parameter for the model to learn (e.g., a vector), by is the bias term (e.g., a scalar value), and \u0177s may be a scalar value between 0 and 1. In this embodiment, a model 50 is learned for each character trait, i.e., 5 models 50 in the illustrative embodiment. In another embodiment, described below, multitask learning is used and the output \u0177s may be vector of scalar values, one value for each trait."
                            ],
                            "subsections": [],
                            "outline_long": [
                                "introduce compositional model",
                                "describe character sequence model",
                                "explain word sequence model",
                                "detail recurrent neural networks (RNN) architecture",
                                "describe forward and backward RNNs",
                                "explain hidden state generation",
                                "introduce gated recurrent unit (GRU) network",
                                "detail GRU cell architecture",
                                "explain forward pass equations",
                                "explain backward pass equations",
                                "describe word representation construction",
                                "introduce word-level RNN",
                                "detail word-level RNN architecture",
                                "explain sentence representation construction",
                                "introduce feedforward neural network (FNN)",
                                "detail FNN architecture",
                                "explain prediction output",
                                "describe character-level word representation learning",
                                "introduce long short-term memory (LSTM) network",
                                "detail LSTM architecture",
                                "explain LSTM equations",
                                "describe precomputed word embeddings",
                                "explain word-level RNN processing",
                                "detail sentence embedding construction",
                                "introduce multitask learning",
                                "describe multitask learning model architecture"
                            ],
                            "num_characters": 13407,
                            "outline_medium": [
                                "introduce compositional model 50",
                                "describe character sequence model 56",
                                "explain word sequence model 58",
                                "detail forward and backward RNNs",
                                "describe hidden state generation",
                                "illustrate word representation construction",
                                "explain sentence representation construction",
                                "describe prediction model 54",
                                "detail GRU and LSTM equations",
                                "explain word embeddings computation",
                                "describe sentence embeddings computation",
                                "illustrate multitask learning model",
                                "explain joint training of multitask model"
                            ],
                            "outline_short": [
                                "introduce compositional model",
                                "describe character sequence model",
                                "describe word sequence model",
                                "describe sentence representation",
                                "describe prediction model",
                                "describe multitask learning model"
                            ]
                        },
                        {
                            "title": "Generating User Scores",
                            "paragraphs": [
                                "Rather than outputting trait score(s) at the tweet level, at S112, the system may additionally or alternatively output personality trait scores at the user (author) level. In this case, the system takes as input a group of text sequences, e.g., tweets, attributed to the same author.",
                                "In one embodiment, the personality trait scores for each text sequence are computed independently and then aggregated, e.g., averaged. In another embodiment, a single document per user is generated by concatenating the text sequences to form a single text sequence. In another embodiment, an additional document level layer (not shown) may be incorporated in the model 50, between the layers 58 and 54, which takes as input the group of sequence representations {es, . . . , es}, where g is the number of sequences, and outputs eg, a vectorial representation of the group of sequences. The group layer may be an RNN, an aggregating function, or the like."
                            ],
                            "subsections": [],
                            "outline_long": [
                                "describe user-level personality trait scoring"
                            ],
                            "num_characters": 939,
                            "outline_medium": [
                                "describe user-level personality trait scores computation"
                            ],
                            "outline_short": [
                                "describe generating user scores"
                            ]
                        },
                        {
                            "title": "Learning the Prediction Model (S102)",
                            "paragraphs": [
                                "As illustrated in FIG. 3, the parameters of the model 50 can be learned using the set of training samples and respective personality trait labels drawn from the predefined set of personality traits. In one embodiment, each training sample has a label which is a vector of scores, one score for each personality trait. These may each be a scalar value, e.g., from 0-1, with 1 representing a high level of the particular trait and 0 a low level (absence) of the trait, or in some other range, such as \u22120.5 to +0.5. The trait scores may be assigned by the author him or herself, or by someone familiar with the author. The trait scores for the author may be normalized so that they sum to a predetermined value, such as 1. All training samples from the same author are then given the same label.",
                                "Learning (S206) may be performed by stochastic gradient descent, or other iterative process. In the exemplary training method, character representations 64 of the optionally preprocessed training sequences are generated by the embedding component 40 (S204) and fed into the model 50 by the learning component. The model 50 is initialized with a set of parameter values which are iteratively refined to minimize the error between the trait prediction 9, output by the model 50 and the \u201ctrue\u201d trait label assigned to the training sample. Training may be performed in batches, with the parameters being updated after each batch.",
                                "In one embodiment, the method described in Diederik Kingma, et al., \u201cAdam: A method for stochastic optimization,\u201d arXiv:1412.6980, 2014, is used for training the model. This approach has an advantage in that it only requires first-order gradients with little memory requirement. The method computes individual adaptive learning rates for different parameters from estimates of first and second moments of the gradients.",
                                "All the components 54, 56, 58 in the model may be jointly trained using, for example, the mean square error as the objective function to be minimized over the training set:",
                                "\\({{L\ue8a0(\\theta)} = {\\frac{1}{n}\ue89e{\\sum\\limits_{i = 1}^{n}\ue89e\\left( {y_{s_{i}} - {\\hat{y}}_{s_{i}}} \\right)^{2}}}},\\)",
                                "where ysis the ground truth personality score of sentence si and \u03b8 is the collection of all embedding (i.e., Ec) and weight matrices and bias terms for the model 50 to learn.",
                                "The learning of the model 50 uses the same type of character embeddings as are used in the prediction stage, e.g., vectors of 50 dimensions.",
                                "The word representations used throughout the method may be of the same size or of larger size than the character embeddings, for example, at least twice or at least four times the number of dimensions, such as 256 dimensions. The sequence representations used throughout the method may be of the same size or of larger size than the word representations, e.g., twice the size, such as 512 dimensions."
                            ],
                            "subsections": [],
                            "outline_long": [
                                "introduce learning process",
                                "describe training sample preparation",
                                "explain stochastic gradient descent",
                                "detail Adam optimization method",
                                "introduce mean square error objective function"
                            ],
                            "num_characters": 2848,
                            "outline_medium": [
                                "describe learning process",
                                "explain stochastic gradient descent"
                            ],
                            "outline_short": [
                                "describe learning the prediction model"
                            ]
                        },
                        {
                            "title": "Multitask Learning",
                            "paragraphs": [
                                "While the dimensions of personality in any single model are designed to be independent of one another, some correlations between traits are to be expected. To take advantage of such correlations, a model may be trained which is capable of simultaneously predicting multiple highly correlated personality traits.",
                                "A multitask learning model similar to the model 50 described above can be generated, which shares the Char-Bi-RNN and Word-Bi-RNN components 56, 58 described above, but has personality-trait-specific final layers, to predict multiple correlated personality traits simultaneously. For example, a collection of personality-trait-specific final layers is employed which compute a respective representation hp,s=ReLU(Wpehes+bph), and then the estimated score for each trait \u0177p,s=Wphyhp,s+bpy, where p represents one of the set of traits, e.g., p\u03f5{EXT, STA, AGR, CON, OPN}, and Wpeh, Wphy, bph, and bpy are the trait-specific weight matrices and bias terms. The respective loss functions can then be:",
                                "\\({L_{p}\ue8a0\\left( \\theta_{p} \\right)} = {\\frac{1}{n}\ue89e{\\sum\\limits_{i = 1}^{n}\ue89e\\left( {y_{p,s_{i}} - {\\hat{y}}_{p,s_{i}}} \\right)^{2}}}\\)",
                                "where Lp(\u03b8p) is the loss function for a specific personality trait p. Note that, apart from the Bi-RNN embedding and weight matrices and bias terms, \u03b8p now also includes the trait-specific weight matrices Wpeh, Wphy and bias terms bph, bpy. The model is then jointly trained using the sum of the loss functions: L(\u03b8)=\u03a3p\u03f5P Lp (\u03b8p) where P is a collection of (correlated) personality traits and \u03b8=Up\u03f5P \u03b8p.",
                                "In practice, however, a multi-task model does not provide significant improvements over a set of trait-specific models 50, and in some cases, may not perform as well.",
                                "Without intending to limit the scope of the exemplary embodiment, the following examples demonstrate the applicability of the method and a comparison with other methods."
                            ],
                            "subsections": [],
                            "outline_long": [
                                "introduce multitask learning concept",
                                "describe multitask learning model architecture",
                                "explain multitask learning loss function"
                            ],
                            "num_characters": 1888,
                            "outline_medium": [
                                "describe multitask learning model"
                            ],
                            "outline_short": [
                                "describe multitask learning model"
                            ]
                        },
                        {
                            "title": "Examples",
                            "paragraphs": [
                                "As a dataset, the English data from the PAN 2015 Author Profiling task dataset, collected from Twitter and consisting of 14,166 tweets and 152 users was employed. See, Rangel, et al., \u201cOverview of the 3rd Author Profiling Task at PAN 2015,\u201d Working Notes Papers of the CLEF 2015 Evaluation Labs, CEUR Workshop Proc., 2015, for a discussion of this dataset. For each user, there is a set of tweets (average n=100) and gold standard personality labels. For the five trait labels, scores between \u22120.5 and 0.5, are calculated following the author's self-assessment responses to the short Big 5 test, BFI-10 (see, Rammstedt, et al., \u201cMeasuring personality in one minute or less: A 10-item short version of the Big Five Inventory in English and German,\u201d J. Research in Personality, 41(1):203-212, 2007). This test is the most widely accepted and exploited scheme for personality recognition and has a solid grounding in language.",
                                "Each tweet is tokenized using the Twokenizer software, in order to preserve hashtag-preceded topics and user mentions. Each text is normalized by mapping these features to single characters (@username\u2192@, http://t.co/\u2192\u0302).",
                                "Experiments were performed at the user level and at the tweet level (individual short texts). In the experiments, the present feature-engineering-free approach, described above is compared with models which rely on linguistic features. In both settings, against models with or without feature engineering, the exemplary model achieves better results across all personality traits.",
                                "Due to the unavailability of a test corpus (withheld by the PAN 2015 organizers) the k-fold cross-validation performance (k=5 or 10) is compared on the available dataset. Performance is measured using Root Mean Square Error (RMSE) on either the tweet level or user level depending on the granularity of the task:",
                                "\\({{RMSE}_{tweet} = {\\sqrt{\\frac{\\sum\\limits_{i = 1}^{T}\ue89e\\left( {y_{s_{i}} - {\\hat{y}}_{s_{i}}} \\right)^{2}}{T}}\ue89e\\mspace{14mu} \ue89e{and}}}\ue89e\\mspace{14mu}\\)\n\\({RMSE}_{user} = \\sqrt{\\frac{\\sum\\limits_{i = 1}^{U}\ue89e\\left( {y_{{user}_{i}} - {\\hat{y}}_{{user}_{i}}} \\right)^{2}}{U}}\\)",
                                "where T and U are the total numbers of tweets and users in the corpus, ysand \u0177sthe true and estimated personality trait score of the ith tweet, similarly yuserand \u0177userare their user-level counterparts. Each tweet in the dataset inherits the same five trait scores as assigned to the author from whom they were drawn.",
                                "\\({{\\hat{y}}_{{user}_{i}} = {\\frac{1}{T_{i}}\ue89e{\\sum\\limits_{j = 1}^{T_{i}}\ue89ey_{s_{j}}}}},\\)",
                                "where Ti refers to the total number of tweets of useri.",
                                "First, to evaluate the usefulness of multitask learning, the Pearson correlations of the dataset for the five personality traits Extroversion, Emotional Stability, Agreeableness, Conscientiousness and Openness (abbreviated as EXT, STA, AGR, CON and OPN respectively) were obtained and shown in Table 1.",
                                "These results suggest that there are at least linear relationships between individual traits which could potentially be exploited by multitask learning.",
                                "**1. Personality Trait Prediction at the User Level**",
                                "Single-task and multitask models 50 were trained to predict the personality trait scores based purely on the character embeddings, with no additional features supplied. C2W2S4PT is trained with Adam (Kingma 2014) and hyper-parameters: Ec \u03f550\u00d7|C|, {right arrow over (h)}i,jc and  \u03f5256, {right arrow over (h)}iw and  \u03f5256, Weh \u03f5512\u00d7256, bh \u03f5256, Why \u03f5256\u00d71, by \u03f5, dropout rate to the embedding output: 0.5, batch size: 32. Training is performed until 100 epochs are reached. In addition to a single trait C2W2S4PT model for each of the five traits, multitask models were learned for pairs of traits (STA&AGR, AGR&CON) and for all five traits (C2W2S4PT\u2014Multitask All).",
                                "To demonstrate the effectiveness of the model (C2W2S4PT), the performance at the user level was compared with other models incorporating linguistic and psychologically motivated features:",
                                "1. Sulea 2015: Sulea, et al., \u201cAutomatic profiling of twitter users based on their tweets,\u201d In Working Notes Papers of the CLEF 2015 Evaluation Labs, pp. 1-8, 2015. Sulea 2015 uses Character-Level n-grams.",
                                "2. Mirkin 2015: Mirkin, et al., \u201cMotivating personality-aware machine translation,\u201d Proc. 2015 Conf. on Empirical Methods in Natural Language Processing, pp. 1102-1108, 2015. Mirkin 2015 uses, as features, 1-, 2-, 3-grams of surface, normalized and lemmatized forms; part-of-speech tagged forms, and n-grams of POS; named entities (places, persons, organization, dates, time expressions), emoticons, hashtags, mentions and URLs.",
                                "3. Nowson 2015: Nowson, et al., \u201cXRCE personal language analytics engine for multilingual author profiling,\u201d Working Notes Papers of the CLEF, 2015. Nowson 2015 uses word-level features (unigram, bigram and trigram of surface and lemmatized form of the words; part-of-speech of surface and normalized word; words with negation, words with at least three repeated letters; bigram of repeated character, trigram of repeated character, and quadrigram of repeated characters); and class-based features (named entities (places, persons, organization, dates and time expressions); unigram, bigram and trigram of POS tags, positive emoticons, negative emoticons, other emoticons; hashtags, mentions and http links; use of feminine or masculine first-names and pronouns; and capitalized words)",
                                "To enable direct comparison with these three methods, the same dataset and evaluation metric RMSEuser is used. The RMSEuser results are shown in Table 2 (lower scores indicate better performance). For 5-fold cross-validation, a comparison was made with the tied-highest ranked model (under evaluation conditions) of the PAN 2015 submissions, described in Sulea 2015. For 10-fold cross-validation, the model of Nowson 2015, was used. As with the C2W2S4PT method reported here, these methods predicted scores on text level, and averaged for each user. The method of Mirkin 2015 reports results on concatenated tweets\u2014a single document per user. The Average Baseline assigns the average of all the scores to each user.",
                                "The results show that the present RNN-based models outperform the methods of Sulea 2015, Mirkin 2015, and Nowson 2015. In the 5-fold cross-validation group, C2W2S4PT\u2014Multitask All is superior to Average baseline and Sulea 2015, achieving better performance in three traits (tying the remaining traits). This is notable, considering the model is trained jointly on all five traits. Even greater improvement can be attained by training on fewer personality traits with C2W2S4PT. In terms of the performance measured by 10-fold cross-validation, the dominance of the RNN-based models is even more pronounced with C2W2S4PT outperforming the Mirkin 2015 and Nowson 2015 systems across all personality traits. C2W2S4PT achieves these improvements without use of any hand-crafted features.",
                                "**2. Personality Trait Prediction at Single Tweet Level**",
                                "Tweet-level performance was used to evaluate the models' capabilities to infer personality at a lower granularity level. For comparison, a number of baselines were created, where the only feature used is the surface form of the text. Two bag-of-word (BoW) systems, namely, Random Forest and Support Vector Machine (SVM) Regression, have been implemented for comparison. For these two BoW-based baseline systems, grid search is performed to find the best hyper-parameter configuration. For SVM Regression, the hyper-parameters include: kernel \u03f5{linear,rbf} and C \u03f5{0.01,0.1,1.0,10.0} whereas for Random Forest, the number of trees is chosen from the set {10,50,100,500,1000}. The Average Baseline assigns the average of all the scores to each tweet.",
                                "Two simpler RNN-based baseline models, named Bi-GRU-Char and Bi-GRU-Word, which only work on character and word level, respectively, but share the same structure of the final MLP classifier (hs and \u0177s), were created for comparison with the character to word compositional model C2W2S4PT. For training, C2W2S4PT used the same hyper-parameter configuration as described above for the user-level. For Bi-GRU-Char and Bi-GRU-Word, the character and word embedding size was set to 50 and 256 respectively. Hyper-parameter fine-tuning was not performed for the RNN-based models and C2W2S4PT. The RMSEtweet of each model, measured by 10-fold stratified cross-validation, is shown in Table 3.",
                                "The results indicate that C2W2S4PT achieves comparable or better performance than SVM Regression and Random Forest. This demonstrates that C2W2S4PT generates at least reasonably comparable performance with SVM Regression and Random Forest in the feature-engineering-free setting on the tweet level and it does so without exhaustive hyper-parameter fine-tuning. C2W2S4PT also performs well against the Bi-GRU-Char and Bi-GRU-Word RNN-based models. This success can be attributed to the model's capability of coping with arbitrary words while not forgetting information due to excessive lengths as can arise from representing a text as a sequence of characters. Also, given that C2W2S4PT does not need to maintain a large vocabulary embedding matrix as in Bi-GRU-Word, there are much fewer parameters for the model to learn, making it less prone to overfitting.",
                                "Multitask learning does not appear to provide significant benefits to performance. The model jointly trained on the weakest correlated pair (AGR&CON) achieves better results than the one trained on the strongest correlated pair (STA&AGR). Despite the noise introduced by training on non-correlated personality traits, there is little impact on the performance of the multitask-learning models and the model jointly trained on all 5 personality traits generates equally competitive performance."
                            ],
                            "subsections": [],
                            "outline_long": [
                                "introduce dataset",
                                "describe dataset characteristics",
                                "explain gold standard personality labels",
                                "motivate Big 5 test",
                                "describe tokenization process",
                                "explain normalization process",
                                "introduce experiment settings",
                                "describe performance metrics",
                                "present results at user level",
                                "compare with other models",
                                "describe multitask learning",
                                "present results at tweet level",
                                "compare with baseline models",
                                "discuss benefits of multitask learning",
                                "introduce principal component analysis",
                                "visualize learned representations",
                                "analyze example tweets",
                                "discuss language independence",
                                "conclude with potential applications"
                            ],
                            "num_characters": 9728,
                            "outline_medium": [
                                "introduce dataset",
                                "describe data preprocessing",
                                "explain experiment setup",
                                "present results at user level",
                                "compare with other models",
                                "present results at tweet level",
                                "compare with baseline models",
                                "discuss multitask learning",
                                "conclude effectiveness of model"
                            ],
                            "outline_short": [
                                "introduce dataset and preprocessing",
                                "describe experiments and evaluation metrics",
                                "present results and comparisons with other models",
                                "discuss multitask learning and feature engineering"
                            ]
                        },
                        {
                            "title": "Principal Component Analysis of Features",
                            "paragraphs": [
                                "To investigate the learned representations and features further, PCA was used to visualize the sentences evaluated with the C2W2S4PT model trained on a single personality trait. 100 tweets were randomly selected (50 tweets each from either end of the EXT spectrum) with their representations constructed by the model. FIG. 5 shows the scatter plot of the representations of the sentences reduced to a 2D space by PCA for the trait of Extraversion (EXT). This trait was selected as it is the most commonly studied and well understood trait. FIG. 5 shows clusters of both positive and negative Extraversion, though the former intersect the latter. Three examples are highlighted in the PCA plot.\n\n\n- - POS7: \u201c@ username: Feeling like you're not good enough is probably\n    the worst thing to feel.\u201d\n  - NEG3: \u201cBeing good ain\u2032t enough lately.\u201d\n  - POS20: \u201co.O Lovely.\u201d",
                                "The first two examples (POS7 and NEG3) are drawn from largely distinct areas of the distribution. In essence the semantics of the short texts are the same. However, they both show linguistic attributes commonly understood to relate to Extraversion. POS7 is longer and, with the use of the second person pronoun, is more inclusive of others. NEG3, on the other hand, is shorter and self-focused, aspects indicative of Introversion. The third sentence, POS20, is a statement from an Extravert, which appears to map to an Introvert space. Indeed, while short, the use of \u201cEastern\u201d style, non-rotated emoticons (such as o.O) has also been shown to relate to Introversion on social media (Schwartz 2013). One explanation might be that the model has uncovered a flexibility often associated with Ambiverts (Grant, \u201cRethinking the extraverted sales ideal: The ambivert advantage,\u201d Psychological Science 24(6), 24(6):1024-1030, 2013). In general, it appears that the model is capturing well-understood dimensions of language yet with no feature engineering.",
                                "One advantage of the present trait prediction model 50 is that lack of feature engineering may facilitate language independence. Preliminary tests on the Spanish data from the PAN 2015 Author Profiling dataset provide support for this.",
                                "It will be appreciated that variants of the above-disclosed and other features and functions, or alternatives thereof, may be combined into many other different systems or applications. Various presently unforeseen or unanticipated alternatives, modifications, variations or improvements therein may be subsequently made by those skilled in the art which are also intended to be encompassed by the following claims."
                            ],
                            "subsections": [],
                            "outline_long": [
                                "introduce PCA",
                                "describe visualization process",
                                "analyze clusters of Extraversion",
                                "highlight example tweets",
                                "discuss implications of results"
                            ],
                            "num_characters": 2570,
                            "outline_medium": [
                                "apply PCA to visualize learned representations",
                                "analyze and interpret results"
                            ],
                            "outline_short": [
                                "visualize learned representations using PCA"
                            ]
                        }
                    ],
                    "outline_long": [
                        "introduce system and method for personality trait prediction",
                        "define character and word",
                        "describe text sequence",
                        "illustrate functional block diagram of computer-implemented system",
                        "describe memory and processor",
                        "describe input/output devices",
                        "describe computing devices",
                        "describe memory types",
                        "describe network interface",
                        "describe digital processor device",
                        "define software",
                        "describe software instructions",
                        "describe learning component",
                        "describe text preprocessing component",
                        "describe character embedding component",
                        "describe modeling component",
                        "describe sequence representation component",
                        "describe prediction component",
                        "describe output component",
                        "describe learning process",
                        "describe model learning",
                        "describe text preprocessing",
                        "describe character embedding",
                        "describe sequence representation",
                        "describe prediction",
                        "describe output",
                        "describe method implementation"
                    ],
                    "num_characters": 13802,
                    "outline_medium": [
                        "introduce personality trait prediction system",
                        "define character and word",
                        "describe computer-implemented system for personality trait prediction",
                        "illustrate functional block diagram of system",
                        "describe software instructions",
                        "introduce learning component",
                        "describe text preprocessing component",
                        "introduce character embedding component",
                        "describe modeling component",
                        "introduce prediction component",
                        "describe output component",
                        "illustrate method for trait prediction",
                        "describe implementation of method"
                    ],
                    "outline_short": [
                        "introduce personality trait prediction system",
                        "define key terms: character, word, text sequence",
                        "describe system architecture: computer-implemented system, memory, processor, I/O devices",
                        "outline software instructions: learning component, text preprocessing, character embedding, modeling, prediction, output",
                        "describe learning component: learning prediction model, accessing training collection",
                        "describe output component: outputting trait prediction, generating information based on prediction"
                    ]
                }
            ],
            "outline_long": [],
            "num_characters": 0,
            "outline_medium": [],
            "outline_short": []
        }
    ],
    "claims": [
        "1. A method for trait prediction comprising:\nreceiving a text sequence comprising words, each of the words including at least one character, some of the words comprising more than one character;\ngenerating a character embeddings for each of the characters of the text sequence, each character embedding being a multidimensional representation of a respective one of the characters;\ngenerating word representations for words of the text sequence with a trained character sequence model, based on the character embeddings, each word embedding being a multidimensional representation of a respective one of the words of the text sequence, the character sequence model comprising a first recurrent neural network that receives the character embeddings for a word of the text sequence and outputs the word representation for the word;\ngenerating a sequence representation for the text sequence with a trained word sequence model, based on the word representations;\ngenerating at least one trait prediction with a trained trait model, based on the sequence representation; and\noutputting the trait prediction or information based on the trait prediction,\nwherein at least one of the generating character embeddings, generating word representations, generating the sequence representation, and generating at least one trait prediction is performed with a processor.",
        "2. (canceled)",
        "3. The method of claim 1, wherein each character embedding, word representation, and sequence representation is a multidimensional representation of at least ten dimensions.",
        "4. (canceled)",
        "5. The method of claim 1, wherein the first recurrent neural network comprises a bi-directional RNN which generates a hidden state for each character of the word in forward and backward directions.",
        "6. The method of claim 1, wherein the word sequence model comprises a second recurrent neural network that receives the word embeddings and outputs the sequence representation.",
        "7. The method of claim 6, wherein the second recurrent neural network comprises a bi-directional RNN which generates a hidden state for each word of the text sequence in forward and backward directions.",
        "8. The method of claim 1, wherein the generating of the at least one trait prediction comprises generating a score for each of a plurality of predefined traits.",
        "9. The method of claim 1, wherein the trait model comprises at least one neural network.",
        "10. The method of claim 9, wherein the trait model comprises a neural network for each of a plurality of predefined traits, each of the neural networks being used to predict a respective score for a respective one of the plurality of predefined traits, based on the sequence representation.",
        "11. The method of claim 1, wherein the character sequence model, word sequence model, and trait model have been trained on a collection of text sequences, each labeled with a respective value for at least one predefined trait.",
        "12. The method of claim 1, further comprising jointly training the character sequence model, word sequence model, and trait model on a collection of text sequences, each labeled with a respective value for at least one predefined trait.",
        "13. The method of claim 12, wherein the training comprises, for each of a plurality of predefined traits, jointly training a respective character sequence model, word sequence model, and trait model for a respective one of the plurality of predefined traits.",
        "14. The method of claim 1, wherein the generating of the at least one trait prediction comprises generating a trait prediction for an author of a group of text sequences, based on respective sequence representations of the text sequences.",
        "15. The method of claim 1 wherein the text sequence comprises a tweet.",
        "16. The method of claim 15, further comprising preprocessing the text sequence, comprising mapping features to single characters, the features being selected from hashtag-preceded topics, user mentions, and uniform resource locators.",
        "17. A computer program product comprising a non-transitory recording medium storing instructions, which when executed on a computer, causes the computer to perform the method of claim 1.",
        "18. A system for trait prediction comprising:\na hierarchical prediction model comprising:\na character sequence model, which generates word representations for words of an input text sequence, the text sequence including a sequence of words, each word including a sequence of characters, at least some of the words including more than one character, each word representation being based on the respective character embeddings of each of the characters in the word, the character sequence model comprising a first recurrent neural network that receives the character embeddings for a word of the input text sequence and outputs the word representation for the word;\na word sequence model, which generates a sequence representation for the text sequence, based on the word representations, the word sequence model comprising a second recurrent neural network that receives the word embeddings and outputs the sequence representation; and\na trait model, which generates at least one trait prediction, based on the sequence representation;\n\na character embedding component, which generates character embeddings for characters of an input text sequence, each character embedding being a multidimensional representation;\na modeling component, which inputs the character embeddings for each word into the hierarchical prediction model; and\na processor which implements the character embedding component and modeling component.",
        "19. The system of claim 18, further comprising:\na learning component which learns parameters of the hierarchical prediction model on a collection of text sequences, each text sequence being labeled with a respective value for at least one predefined trait.",
        "20. A method for representing text sequences and outputting information regarding an author of the text sequences, the method comprising:\nreceiving a group of text sequences, each text sequence comprising a sequence of words, each of the words comprising a sequence of at least one character, at least some of the words comprising more than one character;\nfor each text sequence:\nwith a character embedding component, generating a character embeddings for each of the characters of the input text sequence, each character embedding being a multidimensional representation of at least ten dimensions and being a product of a one hot vector and a learned parameter matrix;\ninputting the character embeddings into a hierarchical prediction model comprising:\na character sequence model, which generates word representations for words of the text sequence, based on respective character embeddings, each word representation being a multidimensional representation of at least ten dimensions; and\na word sequence model, which generates a sequence representation for the text sequence, based on the word representations, each sequence representation being a multidimensional representation of at least ten dimensions; and\n\noutputting information regarding an author of the text sequences, based on the sequence representations;\nwherein at least one of the generating character embeddings and inputting the character embeddings into a hierarchical prediction model is performed with a processor."
    ]
}