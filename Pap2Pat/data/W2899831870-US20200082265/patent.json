{
    "id": "US20200082265",
    "authors": [
        "Ryan Rossi",
        "Rong Zhou"
    ],
    "title": "DEEP GRAPH REPRESENTATION LEARNING",
    "date": "2019-11-11 00:00:00",
    "abstract": "A method of deep graph representation learning includes: deriving a set of base features; and automatically developing, by a processing device, a multi-layered hierarchical graph representation based on the set of base features, wherein each successive layer of the multi-layered hierarchical graph representation leverages an output from a previous layer to learn features of a higher-order.",
    "sections": [
        {
            "title": "DESCRIPTION",
            "paragraphs": [],
            "subsections": [
                {
                    "title": "TECHNICAL FIELD",
                    "paragraphs": [
                        "Implementations of the present disclosure relate to deep graph representation learning."
                    ],
                    "subsections": [],
                    "outline_long": [
                        "define technical area"
                    ],
                    "num_characters": 87,
                    "outline_medium": [
                        "define technical area"
                    ],
                    "outline_short": [
                        "define technical area"
                    ]
                },
                {
                    "title": "BACKGROUND",
                    "paragraphs": [
                        "Machine learning is an application of artificial intelligence (AI) that provides systems the ability to automatically learn and improve from experience without being explicitly programmed. Machine learning focuses on the development of computer programs that can access data and use it learn for themselves. The process of learning begins with observations or data, such as examples, direct experience, or instruction, in order to look for patterns in data and make better decisions in the future based on provided examples. The primary aim is to allow the computers learn automatically without human intervention or assistance and adjust actions accordingly."
                    ],
                    "subsections": [],
                    "outline_long": [
                        "introduce machine learning"
                    ],
                    "num_characters": 659,
                    "outline_medium": [
                        "introduce machine learning"
                    ],
                    "outline_short": [
                        "introduce machine learning"
                    ]
                },
                {
                    "title": "DETAILED DESCRIPTION",
                    "paragraphs": [
                        "Learning a useful graph representation aides many within-network and across-network machine learning tasks, such as node and link classification, anomaly detection, link prediction, dynamic network analysis, community detection, role discovery, visualization and sensemaking, network alignment, and many others. In some embodiments, the success of machine learning operations may depend on data representation (e.g., graph representation). Systems and operations capable of learning such representations have many advantages over feature engineering in terms of cost and effort.",
                        "Is one embodiment, a skip-gram model (for learning vector representations of words in the natural language processing (NLP) domain), for example, DeepWalk, applies the successful word embedding framework from (e.g., word2vec) to embed the nodes such that the co-occurrence frequencies of pairs in short random walks are preserved. In another embodiment, node2vec applies hyperparameters to DeepWalk that tune the depth and breadth of the random walks. These approaches may be successful and in some embodiments may outperform a number of other existing techniques on tasks such as node classification. However, they also have many limitations and restrictions that the proposed invention overcomes.",
                        "In various embodiments, node features may be used and may provide only a coarse representation of a graph. Existing techniques are also unable to leverage attributes (e.g., gender, age) and lack support for typed graphs. In addition, features from these techniques do not generalize to other networks and thus are unable to be used for across-network transfer learning tasks. Existing techniques are also not space-efficient as the node feature vectors are completely dense. For large graphs, the space required to store these dense features can easily become too large to fit in memory. The features may be difficult to interpret and explain. Furthermore, existing embedding techniques are also unable to capture higher-order subgraph structures as well as learn a hierarchical graph representation from such higher-order structures. Finally, these techniques are inefficient, with runtimes that are orders of magnitude slower than those provided by the operations and systems described herein.",
                        "To resolve the above deficiencies, the present invention presents a general graph representation learning framework (referred to herein as \u201cDeepGL\u201d) for learning deep node and edge representations from large (attributed) graphs. In particular, embodiments of the present disclosure derive a set of base features (e.g., graphlet features) and automatically learn a multi-layered hierarchical graph representation, in which each successive layer leverages the output from the previous layer to learn features of a higher-order. Contrary to previous work, DeepGL learns relational functions (each representing a feature) that generalize across-networks and therefore may be useful for graph-based transfer learning tasks. Moreover, DeepGL naturally supports attributed graphs, learns interpretable graph representations, and is space-efficient (by learning sparse feature vectors). In one embodiment, DeepGL is expressive, flexible with many interchangeable components, efficient with a time complexity of O(|E|), and scalable for large networks via an efficient parallel implementation. In one embodiment, compared to various existing methods, DeepGL may be (1) effective for across-network transfer learning tasks and attributed graph representation learning, (2) space-efficient requiring up to 6\u00d7 less memory, (3) fast with up to 182\u00d7 speedup in runtime performance, and (4) accurate with an average improvement of 20% or more on many learning tasks.",
                        "FIG. 1 is a diagram showing a deep graph representation (DeepGL) system 100 for use with implementations of the present disclosure. Although specific components are disclosed in DeepGL system 100, it should be appreciated that such components are examples. That is, embodiments of the present invention are well suited to having various other components or variations of the components recited in DeepGL system 100. It is appreciated that the components in DeepGL system 100 may operate with other components than those presented, and that not all of the components of DeepGL system 100 may be required to achieve the goals of DeepGL system 100.",
                        "In one embodiment, system 100 includes server 101, network 106, and client device 150. Server 100 may include various components, which may allow for deep graph representation learning operations to run on a server device or client device. Each component may perform different functions, operations, actions, processes, methods, etc., for a web application and/or may provide different services, functionalities, and/or resources for the web application. Server 100 may include DeepGL architecture 127 of processing device 120 to perform deep graph representation learning operations. In one embodiment, processing device 120 one or more graphics processing units of one or more servers (e.g., including server 101). Additional details of DeepGL architecture 127 are provided with respect to FIG. 2. Server 101 may further include network 105 and data store 130.",
                        "The processing device 120, and the data store 130 are coupled to each other (e.g., may be operatively coupled, communicatively coupled, may communicate data/messages with each other) via network 105. Network 105 may be a public network (e.g., the internet), a private network (e.g., a local area network (LAN) or wide area network (WAN)), or a combination thereof. In one embodiment, network 105 may include a wired or a wireless infrastructure, which may be provided by one or more wireless communications systems, such as a wireless fidelity (WiFi) hotspot connected with the network 105 and/or a wireless carrier system that can be implemented using various data processing equipment, communication towers (e.g. cell towers), etc. The network 105 may carry communications (e.g., data, message, packets, frames, etc.) between the various components of server 101. The data store 130 may be a persistent storage that is capable of storing data. A persistent storage may be a local storage unit or a remote storage unit. Persistent storage may be a magnetic storage unit, optical storage unit, solid state storage unit, electronic storage units (main memory), or similar storage unit. Persistent storage may also be a monolithic/single device or a distributed set of devices.",
                        "Each component may include hardware such as processing devices (e.g., processors, central processing units (CPUs), memory (e.g., random access memory (RAM), storage devices (e.g., hard-disk drive (HDD), solid-state drive (SSD), etc.), and other hardware devices (e.g., sound card, video card, etc.). The server 100 may comprise any suitable type of computing device or machine that has a programmable processor including, for example, server computers, desktop computers, laptop computers, tablet computers, smartphones, set-top boxes, etc. In some examples, the server 101 may comprise a single machine or may include multiple interconnected machines (e.g., multiple servers configured in a cluster). The server 101 may be implemented by a common entity/organization or may be implemented by different entities/organizations. For example, a server 101 may be operated by a first company/corporation and a second server (not pictured) may be operated by a second company/corporation. Each server may execute or include an operating system (OS), as discussed in more detail below. The OS of a server may manage the execution of other components (e.g., software, applications, etc.) and/or may manage access to the hardware (e.g., processors, memory, storage devices etc.) of the computing device.",
                        "As discussed herein, the server 101 may provide deep graph representation learning functionality to a client device (e.g., client device 150). In one embodiment, server 101 is operably connected to client device 150 via a network 106. Network 106 may be a public network (e.g., the internet), a private network (e.g., a local area network (LAN) or wide area network (WAN)), or a combination thereof. In one embodiment, network 106 may include a wired or a wireless infrastructure, which may be provided by one or more wireless communications systems, such as a wireless fidelity (WiFi) hotspot connected with the network 106 and/or a wireless carrier system that can be implemented using various data processing equipment, communication towers (e.g. cell towers), etc. The network 106 may carry communications (e.g., data, message, packets, frames, etc.) between the various components of system 100. Further implementation details of the operations performed by system 101 are described with respect to FIGS. 2-6.",
                        "FIG. 2 is a graphical diagram 200 showing an example DeepGL architecture, in accordance with some embodiments. Worth noting is that while the architecture 200 demonstrates a directed graph and feature matrix as input, other embodiments that do not include a directed graph and feature matrix may be used. In one embodiment, W=[Wij] may be a matrix of feature weights where wij (or Wij) is the weight between the feature vectors xi and xj. In one embodiment, W has the constraint that i<j<k and xi, xj, and xk are increasingly deeper. F=F1 U F2 U . . . U Fn, and thus, |F|=F=|F1|+|F2|+ . . . +Fn,|. Moreover, the layers 201a-n are ordered where F1<F2< . . . <Fn such that if i<j then Fj is said to be a deeper layer with respect to F. Table 1 may include a summary of the notation used herein:",
                        "FIG. 3 is a graphical diagram showing example relational feature operators, in accordance with some embodiments. In one embodiment, processing logic derives a set of base graph features using the graph topology and attributes (if available). In one embodiment, \u201cgraph feature\u201d refers to an edge or node feature and includes features derived by meshing the graph structure with attributes. Worth mentioning is that DeepGL generalizes for use with an arbitrary set of base features, and it is not limited to the base features discussed below. In one embodiment, base features may be initially computed from the graph and/or set of initial attributes (if available or provided as input by the user, and can be derived from the graph structure as well. In one embodiment, base structural features may refer to counts of various graphlets, degree, egonet, etc.",
                        "Given a graph G=(V, E), processing logic may decompose G into its smaller subgraph components called graphlets (network motifs) using local graphlet decomposition operations and append these features to X. Processing logic may derive such features by counting all node or edge orbits with up to 4 and/or 5-vertex graphlets. Orbits (graphlet automorphisms) are counted for each node or edge in the graph based on whether a node or edge representation is warranted (as the operations described herein naturally generalize to both). In one embodiment, there are 15 node and 12 edge orbits with 2-4 nodes and 73 node and 68 edge orbits with 2-5 nodes.",
                        "In one embodiment, processing logic may utilize exact and estimation methods to derive such base features efficiently.DeepGL generalizes for a variety of graphlet features, including directed graphlets, typed/heterogeneous graphlets, temporal graphlet features, among other graphlet variations (that move beyond the original definition of graphlets as small undirected untyped and static subgraphs).",
                        "Processing logic may derive simple base features, such as in/out/total/weighted degree and k-core numbers, for each graph element (node, edge) in G. For edge feature learning processing logic may derive edge degree features for each edge (v, u)\u2208E and j each o \u2208{+, x} as follows: [d+v o d+u, d\u2212v o d\u2212u, d\u2212v o d+u, d+v o d\u2212u, dv o du], where d+v o d\u2212u, wherein d+v, d\u2212v, and dc denote the out-/in/total degree of v. In addition, egonet features may be used. The external and within-egonet features for nodes may be used as base features in DeepGL-node. Processing logic may extend these egonet features to edges for learning edge representations. For the above base features, processing logic may derive variations based on direction (in/out/both) and weights (weighted/unweighted). In one embodiment, DeepGL naturally supports many other graph properties including efficient/linear-time properties such as PageRank. Moreover, fast approximation methods with provable bounds can also be used to derive features such as the local coloring number and largest clique centered at the neighborhood of each graph element (node, edge) in G.",
                        "One advantage of DeepGL lies in its ability to naturally handle attributed graphs. Four general cases are discussed below that include learning a node or edge feature-based representation given an initial set of node or edge attributes. For learning a node representation (via DeepGL-node) given G and an initial set of edge attributes, processing logic derives node features by applying the set of relational feature operators to each edge attribute. Conversely, learning an edge representation (DeepGL-edge) given G and an initial set of base node features (and optionally an initial set of attributes), processing logic may derive edge features by applying each relational operator \u03a6k\u2208\u03a6 to the nodes at either end of the edge. In another embodiment, each relational operator \u03a6k\u2208\u03a6 can be applied to the various combinations of in/out/total neighbors of each pair of nodes i and j that form an edge. When the input attributes match the type of graph element (node, edge) for which a feature representation is learned, then the attributes are simply appended to the feature matrix X.",
                        "In one embodiment, processing logic calculates the space of relational functions that can be expressed and searched over by DeepGL. In one embodiment, unlike recent node embedding methods other techniques, the DeepGL learns graph functions that are transferable across-networks for a variety of important graph-based transfer learning tasks such as across-network prediction, anomaly detection, graph similarity, matching, among others.",
                        "In one example, f may denote a relational function (e.g., feature in DeepGL) as a composition of relational feature operators. Further, F={F1, F2, . . . } as a set of feature layers where each Fh\u2208F represents a set of relational functions (definitions) Fh={ . . . fk\u22121, fk, fk+1 . . . } of depth h. f\u2208Fh denotes a relational function of depth h defined as a composition of h relational feature operators. Thus, processing logic can decompose f into at least h simpler functions, such as \u03a6h\u2218 . . . \u2218\u03a62\u2218\u03a61. Besides the actual composition of functions that define f, processing logic may store the base feature x (e.g., triangles, 5-star centers) that is used with the relational function to derive the novel (learned) feature vector x\u2032=f(x)=(\u03a6h\u2218 . . . \u2218\u03a62\u2218\u03a61)(x). Note that fi refers to the relational function (definition) of the i-th feature vector xi. Worth nothing is that F may refer to a set of relational functions itself, even though it is an ordered set of feature layers, each of which is a set of relational functions.",
                        "The space of relational functions searched via DeepGL may defined compositionally in terms of a set of relational feature operators \u03a6={\u03a61, . . . , \u03a6K}). A few example relational feature operators are provided in FIGS. 4A and 4B for a wide variety of other useful relational feature operators. The expressivity of DeepGL (i.e., space of relational functions expressed by DeepGL) depends on a few flexible and interchangeable components, including: (i) the initial base features (derived using the graph structure, initial attributes given as input, or both), (ii) a set of relational feature operators \u03a6={\u03a61, . . . , \u03a6K, (iii) the sets of \u201crelated graph elements\u201d S\u2208S (e.g., the in/out/all neighbors within L hops of a given node/edge) that are used with each relational feature operator \u03a6p\u2208\u03a6), and (iv) the number of times each relational function is composed with another (i.e., the depth). In one embodiment, initial attributes may be attributes given as input by the user, which can be self or intrinsic attributes such as gender, age, income, structural features, or even deep features learned from another method, etc.",
                        "Worth noting is that under this formulation each feature vector x\u2032 from X (that is not a base feature) can be written as a composition of relational feature operators applied over a base feature. For instance, given an initial base feature x, let x\u2032=\u03a6k(\u03a6j(\u03a6i<xi>))=(\u03a6k\u2218\u03a6j\u2218i)(x) be a feature vector given as output by applying the relational function constructed by composing the relational feature operators \u03a6k\u2218\u03a6j\u2218\u03a6i. In one embodiment, more complex relational functions are easily expressed such as those involving compositions of different relational feature operators (and possibly different sets of related graph elements). Furthermore, as illustrated herein DeepGL is able to learn relational functions that often correspond to increasingly higher-order subgraph features based on a set of initial lower-order (base) subgraph features (e.g., all 3, 4, and/or 5 vertex subgraphs). Intuitively, just as filters are used in Convolutional Neural Networks (CNNs), one can think of DeepGL in a similar way, but instead of simple filters, DeepGL includes features derived from lower-order subgraphs being combined in various ways to capture higher-order subgraph patterns of increasingly complexity at each successive layer.",
                        "In one embodiment, processing logic may derive a wide variety of functions compositionally by adding and multiplying relational functions (e.g., \u03a6i+\u03a6j, and \u03a6i\u00d7\u03a6j). A sum of relational functions is similar to an OR operation in that two instances are \u201cclose\u201d if either has a large value, and similarly, a product of relational functions is analogous an AND operation as two instances are close if both relational functions have large values.",
                        "Referring to FIG. 3, table 300 includes a summary of a few relational feature operators. Note that DeepGL is flexible and generalizes to any arbitrary set of relational operators. The set of relational feature operators can be learned via a validation set. Block 301 includes an example for an edge e=(v; u) and a relational operator \u03a6k\u2208\u03a6.",
                        "FIGS. 4A and 4B are a graphical diagram 400 showing example external egonet features 402 and within-egonet features 401, in accordance with some embodiments. Worth noting is that the base features demonstrated in FIGS. 4A and 4B are non-limiting examples of potential base features, though the embodiments described herein work with any approach that can compute base features, etc.",
                        "FIG. 5 is a graphical flow diagram 500 showing a method of deep graph representation learning, in accordance with some embodiments. For example, the processes described with reference to FIG. 5 may be performed by processing logic of DeepGL architecture 127 as described with reference to FIG. 1 (and 200 of FIG. 2).",
                        "In one embodiment, processing logic may execute the following pseudocode of algorithm 1:",
                        "At block 510, processing logic calculates a plurality of base features from a graph. In one embodiment, the graph may be a directed graph, an undirected graph, a bipartite graph, or a weighted graph. In one embodiment, the base features may be calculated based on an initial feature matrix. Processing logic may receive a set of base features and uses these as a basis for learning deeper and more discriminative features of increasing complexity. Optionally, processing logic may transform the base feature vectors. Various transformation schemes and other techniques may be used for transforming the feature vectors appropriately. At block 520, processing logic adds the plurality of base features to a feature matrix.",
                        "At block 530, processing logic generates, by a processing device, a current feature layer from the feature matrix and a set of relational feature operators, wherein the current feature layer corresponds to a set of current features. In one embodiment, the current features (and all features described herein) may be transfer learned features (e.g., inductive learned features, across-network features, etc.) Processing logic learns a hierarchical graph representation, where each successive layer represents increasingly deeper higher-order (edge/node) graph functions (due to composition): F1<F2< . . . <F\u03c4s.t. if i<j then Fj is said to be deeper than Fi. In particular, the feature layers F2, F3 . . . . , F\u03c4 may be learned as follows: Processing logic may derive the feature layer F\u03c4 by searching over the space of graph functions that arise from applying the relational feature operators Q to each of the novel features fi\u2208F\u03c4\u22121 learned in the previous layer. Additional description is provided in the following pseudocode of algorithm 2:",
                        "Optionally, processing logic may transform the feature vectors from layer F\u03c4 as discussed previously.",
                        "At block 540, processing logic evaluates feature pairs associated with the current feature layer and selects a subset of features from the set of current features based on the evaluated feature pairs (block 550). Processing logic evaluates resulting features in layer F\u03c4. The feature evaluation routine chooses the important features (relational functions) at each layer r from the space of novel relational functions (at depth r) constructed by applying the relational feature operators to each feature (relational function) learned (and given as output) in the previous layer r\u22121. Notice that DeepGL is extremely flexible as the feature evaluation routine is completely interchangeable and can be fine-tuned for specific applications and/or data. One example of a feature evaluation is provided in the following pseudocode of algorithm 3:",
                        "This approach derives a score between pairs of features. Pairs of features xi and xj that are strongly dependent as determined by the hyperparameter A and evaluation criterion K are assigned Wij=K(xi, xj) and Wij=0 otherwise\u22c5 More formally, EF may denote the set of edges representing dependencies between features:",
                        "EF={(i,j)|\u2200(i,j)\u2208||\u00d7||s.t.(xi,xj)>\u03bb}\u2003\u2003(1)",
                        "The result may be a weighted feature dependence graph GF. GF may be used select a subset of important features from layer \u03c4. Features may be selected as follows: Processing logic may partition the feature graph GF into groups of features {(C1, C2, . . . }, where each set Ck\u2208C represents features that are dependent (though not necessarily pairwise dependent). To partition the feature graph GF, processing logic of Algorithm 3 uses connected components, though other methods are also possible, e.g., a clustering or community detection method. Next, one or more representative features are selected from each group (cluster) of dependent features. Alternatively, it is also possible to derive a new feature from the group of dependent features, e.g., finding a low-dimensional embedding of these features or taking the principal eigenvector. In the example given in Algorithm 3: the earliest feature in each connected component Ck={ . . . , fi, . . . , fj, . . . }\u2208C is selected and all others are removed. After pruning the feature layer F\u03c4, the discarded features are removed from X and DeepGL updates the set of features learned thus far by setting F\u2190F\u222aF1. Processing logic at block 560 adds the subset of features to the feature matrix to generate an updated feature matrix.",
                        "Next, processing logic increments \u03c4 and sets F\u03c4, to zero. In one embodiment, processing logic may check for convergence, and if the stopping criterion is not satisfied, DeepGL tries to learn an additional feature layer. In contrast to node embedding methods that output only a node feature matrix X, DeepGL outputs the (hierarchical) relational functions (definitions) F corresponding to the learned features.",
                        "In one embodiment, additional considerations and properties of DeepGL are discussed below. In one embodiment, processing logic may add and remove constraints in DeepGL. For instance, instead of ensuring that features from previous layers are always retained, processing logic may allow such features from previous layers to be pruned. Many other relaxations and extensions are also possible. Worth noting again, is that algorithms 2 and 3 are non-limiting example routines, and DeepGL naturally generalizes for use with others. While algorithm 1 leverages hyperparameters such as \u03bb and \u03b1, both of these can be automatically learned using a validation set. Further, even the appropriate transformation scheme and/or set of relational feature operators can be learned in a similar fashion. Also noteworthy is that \u03bb (and possibly other hyperparameters) can be set initially, and then automatically adapted at various granularities, e.g., one can introduce a \u03bb for each layer \u03c4, or a \u03bb for each feature or each pair of features (which can be computed based on statistics derived from the feature-values). One can also introduce other hyperparameters into DeepGL to control for various factors such as: hyperparameters of any relational feature kernel (RBF, Polynomial, Sigmoid, and others), the graphlet (orbit, or network motif/subgraph) estimation quality, a hyperparameter governing the diffusion process (e.g., \u03b8 in the Laplacian feature diffusion process), max number of relational feature operators to search, or even a hyperparameter that decays the weight of a relational feature operator with respect to the distance l such that \u03b8l where 0<\u03b8<1, among many other possibilities.",
                        "Notice that the evaluation criterion K(xi, xj) discussed above can be viewed as a \u201csimilarity function\u201d (since it is usually assumed that the output of K(xi, xj) is between 0 and 1 where xi and xj are considered more dependent (similar/correlated/etc) as K(xi, xj) approaches 1). In other embodiments processing logic may leverage a distance (or disagreement measure, etc.) as well (where xi and vxj are considered more dependent as K(xi, xj) approaches 0, etc.), e.g., one could simply replace Line 5 in Algorithm 3 with K(xi, xj)<\u03bb so that two features xi and xj are dependent (similar) if the fraction of which they disagree is less than some threshold \u03bb.",
                        "Notice that Algorithm 2 is generalized further by replacing {\u0393l+(gi), \u0393l\u2212(gi), \u0393l(gi)} in Line 5 by a set S. In one embodiment, Algorithm 1 naturally generalizes for (within-network and across-network) supervised learning tasks as well. One can also introduce additional weights (or use the previous feature weights directly) and use back propagation for training in conjunction with an optimization scheme such as stochastic gradient descent to minimize a loss function over them. In one embodiment, DeepGL learns a set of relational functions (definitions) which require at most 1 MB to store, and usually much less. Hence, DeepGL can be thought of as learning a compressed representation of the graph, as one may simply transfer these relational functions (definitions) and then use DeepGL on the other end to recompute the actual feature vectors for the nodes and edges. Thus, unlike existing methods, DeepGL essentially is a graph compression method as well, which can be leveraged in a variety of applications. Finally, one can also derive fast sub-linear time learning methods for DeepGL that learns the relational functions using a small fraction of the data. Once the relational functions (definitions) are learned, they can be extracted directly (no learning) to obtain the feature vectors for the graph elements (e.g., nodes/edges). In one embodiment, the above sub-linear time approach can exploit any (state-of-the-art) subsampling technique.",
                        "In one embodiment, the systems and operations described herein provide for feature diffusion, where the feature matrix at each layer can be smoothed using any arbitrary feature diffusion process. As an example, suppose X is the resulting feature matrix from layer \u03c4, then we can set \u2212X(0)\u2192X and solve \u2212X(t)=D\u22121A \u2212X(t\u22121) where D is the diagonal degree matrix and A is the adjacency matrix of G. The diffusion process above is repeated for a fixed number of iterations t=1, 2, . . . , T or until convergence; and \u2212X(t)=D\u22121A \u2212-X(t\u22121) corresponds to a simple feature propagation.",
                        "More complex feature diffusion processes can also be used in DeepGL such as the normalized Laplacian feature diffusion defined as:",
                        "(t)=(1\u2212\u03b8)L(t\u22121)+\u03b8X, for t=1,2, . . .\u2003\u2003(2)",
                        "where L is the normalized Laplacian:",
                        "L=I\u2212D1/2 AD1/2\u2003\u2003(3)",
                        "The resulting diffused feature vectors \u2212X=[\u2212x1 \u2212x2 . . . ] are effectively smoothed by the features of related graph elements (nodes/edges) governed by the particular diffusion process. Notice that feature vectors given as output at each layer can be diffused (e.g., after Line 4 or 8 of Algorithm 1). The resulting features X can be leveraged in a variety of ways. For instance, processing logic may set \u2212X\u2190X and thereby replace the existing features with the diffused versions. In another embodiment, processing logic may append the diffused features by setting X\u2190[X \u2212X]. Further, the diffusion process can be learned via cross-validation.",
                        "In one embodiment, the DeepGL framework naturally generalizes for supervised representation learning by replacing the feature evaluation routine (called in Algorithm 1 Line 7) with an appropriate objective function, e.g., one that seeks to find a set of features that (i) maximize relevancy (predictive quality) with respect to y (i.e., observed class labels) while (ii) minimizing redundancy between each feature in that set. The objective function capturing both (i) and (ii) can be formulated by replacing K with a measure such as mutual information (and variants):",
                        "\\(\\begin{matrix}\n{x = {\\underset{x_{i} \\notin \\chi}{argmax}\ue89e\\left\\{ {{\ue50a\\left( {y,x_{i}} \\right)} - {\\beta \ue89e{\\sum\\limits_{x_{j} \\in \\chi}\ue89e{\ue50a\ue8a0\\left( {x_{i},x_{j}} \\right)}}}} \\right\\}}} & (4)\n\\end{matrix}\\)",
                        "where X is the current set of selected features, and \u03b2 is a hyperparameter that determines the balance between maximizing relevance and minimizing redundancy. The first term in Eq. (3) seeks to find x that maximizes the relevancy of x to y whereas the second term attempts to minimize the redundancy between x and each xj\u2208X of the already selected features. Initially, processing logic may set X\u2190{x\u00b0} where x0=argmaxxi K(y, xi) and repeatedly solve equation (3)) to find xi (such that xi\u2209X) which is then added to X (and removed from the set of remaining features). This is repeated until the stopping criterion is reached (e.g., until the desired |X|). Notably, DeepGL naturally supports many other objective functions and optimization schemes.",
                        "In one embodiment, M is the number of edges, N is the number of nodes, and F is the number of features. The total computational complexity of the edge representation learning from the DeepGL framework is O(F(M+NF)). Similarly, the DeepGL framework takes O(F(M+NF)) for learning node representations. Thus, in both cases, the runtime of DeepGL is linear in the number of edges. As an aside, the initial graphlet features are computed using fast and accurate estimation methods.",
                        "In one embodiment, given a set of feature functions (definitions) F learned by applying DeepGL to G, feature extraction is defined as the process of extracting (computing directly without learning) the set of features on another graph G0. This is possible since the features learned from DeepGL generalize since they represent a composition of relational feature operators applied to a base graph feature, which are computable on any arbitrary graph. This is in contrast to recent node embedding methods where the features are unable to transfer (and are meaningless across networks).",
                        "As described herein, the features learned by DeepGL naturally generalize across-networks. For convenience, let xj=p(xi) where xi is a feature given as output in the \u00a3\u22121 feature layer and \u03a6kp(\u22c5) is an arbitrary relational feature operator such as relational mean, max, product, etc. Thus, xj is the resulting feature vector in layer \u00a3 after applying \u03a6p to xi over all graph elements (nodes, edges, etc.), and thus i<j where X=[x1 . . . xi . . . xj . . . ]. Nevertheless, consider a feature definition learned via our approach: \u03a62 (\u03a61(xi)) where \u03a61(\u22c5) and \u03a62(\u22c5) are defined as the relational mean and product kernel, respectively. Furthermore, suppose xi is a simple initial feature such as the number of 4-cliques. Thus, the feature definition \u03a62 (\u03a61(xi)) can be easily unrolled as xj=\u03a61(xi) and then xk=\u03a62(xj). The above feature is derived in the third feature layer, assuming xi is from the first layer. Now, it should be clear that the feature definitions learned by DeepGL generalize for across-network transfer learning tasks as they are extracted on any arbitrary network. For instance, given C\u2032, processing logic may derive the number of 4-cliques denoted by xi, and then derive xj=\u03a61(xi) and finally xk=\u03a62(xj). Such feature definitions represent general graph functions that may be extracted on any arbitrary graph. As an aside, the features learned by DeepGL are also more interpretable and explainable than recent node embedding techniques.",
                        "Various operations are described as multiple discrete operations, in turn, in a manner that is most helpful in understanding the present disclosure, however, the order of description may not be construed to imply that these operations are necessarily order dependent. In particular, these operations need not be performed in the order of presentation.",
                        "FIG. 6 illustrates a diagrammatic representation of a machine in the example form of a computer system 600 within which a set of instructions, for causing the machine to perform any one or more of the methodologies discussed herein, may be executed. In alternative embodiments, the machine may be connected (e.g., networked) to other machines in a local area network (LAN), an intranet, an extranet, or the Internet. The machine may operate in the capacity of a server or a client machine in a client-server network environment, or as a peer machine in a peer-to-peer (or distributed) network environment. The machine may be a personal computer (PC), a tablet PC, a set-top box (STB), a Personal Digital Assistant (PDA), a cellular telephone, a web appliance, a server, a network router, a switch or bridge, a hub, an access point, a network access control device, or any machine capable of executing a set of instructions (sequential or otherwise) that specify actions to be taken by that machine. Further, while only a single machine is illustrated, the term \u201cmachine\u201d shall also be taken to include any collection of machines that individually or jointly execute a set (or multiple sets) of instructions to perform any one or more of the methodologies discussed herein. In one embodiment, computer system 600 may be representative of a server computer system, such as system 100.",
                        "The exemplary computer system 600 includes a processing device 602, a main memory 604 (e.g., read-only memory (ROM), flash memory, dynamic random access memory (DRAM), a static memory 606 (e.g., flash memory, static random access memory (SRAM), etc.), and a data storage device 618, which communicate with each other via a bus 630. Any of the signals provided over various buses described herein may be time multiplexed with other signals and provided over one or more common buses. Additionally, the interconnection between circuit components or blocks may be shown as buses or as single signal lines. Each of the buses may alternatively be one or more single signal lines and each of the single signal lines may alternatively be buses.",
                        "Processing device 602 represents one or more general-purpose processing devices such as a microprocessor, central processing unit, or the like. More particularly, the processing device may be complex instruction set computing (CISC) microprocessor, reduced instruction set computer (RISC) microprocessor, very long instruction word (VLIW) microprocessor, or processor implementing other instruction sets, or processors implementing a combination of instruction sets. Processing device 602 may also be one or more special-purpose processing devices such as an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a digital signal processor (DSP), network processor, or the like. The processing device 602 is configured to execute processing logic 626, which may be one example of system 100 shown in FIG. 1, for performing the operations and steps discussed herein.",
                        "The data storage device 618 may include a machine-readable storage medium 628, on which is stored one or more set of instructions 622 (e.g., software) embodying any one or more of the methodologies of functions described herein, including instructions to cause the processing device 602 to execute system 100. The instructions 622 may also reside, completely or at least partially, within the main memory 604 or within the processing device 602 during execution thereof by the computer system 600; the main memory 604 and the processing device 602 also constituting machine-readable storage media. The instructions 622 may further be transmitted or received over a network 620 via the network interface device 608.",
                        "The machine-readable storage medium 628 may also be used to store instructions to perform the methods and operations described herein. While the machine-readable storage medium 628 is shown in an exemplary embodiment to be a single medium, the term \u201cmachine-readable storage medium\u201d should be taken to include a single medium or multiple media (e.g., a centralized or distributed database, or associated caches and servers) that store the one or more sets of instructions. A machine-readable medium includes any mechanism for storing information in a form (e.g., software, processing application) readable by a machine (e.g., a computer). The machine-readable medium may include, but is not limited to, magnetic storage medium (e.g., floppy diskette); optical storage medium (e.g., CD-ROM); magneto-optical storage medium; read-only memory (ROM); random-access memory (RAM); erasable programmable memory (e.g., EPROM and EEPROM); flash memory; or another type of medium suitable for storing electronic instructions.",
                        "The preceding description sets forth numerous specific details such as examples of specific systems, components, methods, and so forth, in order to provide a good understanding of several embodiments of the present disclosure. It will be apparent to one skilled in the art, however, that at least some embodiments of the present disclosure may be practiced without these specific details. In other instances, well-known components or methods are not described in detail or are presented in simple block diagram format in order to avoid unnecessarily obscuring the present disclosure. Thus, the specific details set forth are merely exemplary. Particular embodiments may vary from these exemplary details and still be contemplated to be within the scope of the present disclosure.",
                        "Additionally, some embodiments may be practiced in distributed computing environments where the machine-readable medium is stored on and or executed by more than one computer system. In addition, the information transferred between computer systems may either be pulled or pushed across the communication medium connecting the computer systems.",
                        "Embodiments of the claimed subject matter include, but are not limited to, various operations described herein. These operations may be performed by hardware components, software, firmware, or a combination thereof.",
                        "Although the operations of the methods herein are shown and described in a particular order, the order of the operations of each method may be altered so that certain operations may be performed in an inverse order or so that certain operation may be performed, at least in part, concurrently with other operations. In another embodiment, instructions or sub-operations of distinct operations may be in an intermittent or alternating manner.",
                        "The above description of illustrated implementations of the invention, including what is described in the Abstract, is not intended to be exhaustive or to limit the invention to the precise forms disclosed. While specific implementations of, and examples for, the invention are described herein for illustrative purposes, various equivalent modifications are possible within the scope of the invention, as those skilled in the relevant art will recognize. The words \u201cexample\u201d or \u201cexemplary\u201d are used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as \u201cexample\u201d or \u201cexemplary\u201d is not necessarily to be construed as preferred or advantageous over other aspects or designs. Rather, use of the words \u201cexample\u201d or \u201cexemplary\u201d is intended to present concepts in a concrete fashion. As used in this application, the term \u201cor\u201d is intended to mean an inclusive \u201cor\u201d rather than an exclusive \u201cor\u201d. That is, unless specified otherwise, or clear from context, \u201cX includes A or B\u201d is intended to mean any of the natural inclusive permutations. That is, if X includes A; X includes B; or X includes both A and B, then \u201cX includes A or B\u201d is satisfied under any of the foregoing instances. In addition, the articles \u201ca\u201d and \u201can\u201d as used in this application and the appended claims should generally be construed to mean \u201cone or more\u201d unless specified otherwise or clear from context to be directed to a singular form. Moreover, use of the term \u201can embodiment\u201d or \u201cone embodiment\u201d or \u201can implementation\u201d or \u201cone implementation\u201d throughout is not intended to mean the same embodiment or implementation unless described as such. Furthermore, the terms \u201cfirst,\u201d \u201csecond,\u201d \u201cthird,\u201d \u201cfourth,\u201d etc. as used herein are meant as labels to distinguish among different elements and may not necessarily have an ordinal meaning according to their numerical designation.",
                        "It will be appreciated that variants of the above-disclosed and other features and functions, or alternatives thereof, may be combined into may other different systems or applications. Various presently unforeseen or unanticipated alternatives, modifications, variations, or improvements therein may be subsequently made by those skilled in the art which are also intended to be encompassed by the following claims. The claims may encompass embodiments in hardware, software, or a combination thereof."
                    ],
                    "subsections": [],
                    "outline_long": [
                        "motivate graph representation learning",
                        "introduce limitations of existing techniques",
                        "describe DeepGL framework",
                        "outline advantages of DeepGL",
                        "describe DeepGL system architecture",
                        "introduce server and client devices",
                        "describe processing device and data store",
                        "outline network infrastructure",
                        "describe DeepGL architecture",
                        "introduce feature matrix and weights",
                        "describe layer ordering",
                        "outline notation used",
                        "describe relational feature operators",
                        "introduce graph feature concept",
                        "describe base feature computation",
                        "outline graphlet decomposition",
                        "describe exact and estimation methods",
                        "introduce simple base features",
                        "describe edge feature learning",
                        "outline egonet features",
                        "describe attributed graph support",
                        "outline learning node or edge features",
                        "describe relational function composition",
                        "outline feature layer construction",
                        "describe space of relational functions",
                        "introduce transfer learning capabilities",
                        "describe feature vector decomposition",
                        "outline relational function composition",
                        "describe feature layer construction",
                        "outline feature evaluation routine",
                        "describe feature selection",
                        "outline DeepGL flexibility",
                        "describe example relational feature operators",
                        "outline external egonet features",
                        "describe within-egonet features",
                        "outline deep graph representation learning method",
                        "describe base feature calculation",
                        "outline feature matrix construction",
                        "describe current feature layer generation",
                        "outline feature evaluation and selection",
                        "describe feature transformation",
                        "outline hierarchical graph representation learning",
                        "describe feature evaluation routine",
                        "outline DeepGL advantages",
                        "define feature dependence graph",
                        "partition feature graph into groups",
                        "select representative features",
                        "derive new feature from group",
                        "prune feature layer",
                        "update feature matrix",
                        "check for convergence",
                        "learn additional feature layer",
                        "discuss DeepGL properties",
                        "add and remove constraints",
                        "relax and extend DeepGL",
                        "learn hyperparameters",
                        "adapt hyperparameters",
                        "introduce other hyperparameters",
                        "view evaluation criterion as similarity function",
                        "use distance or disagreement measure",
                        "generalize Algorithm 2",
                        "generalize for supervised learning tasks",
                        "introduce additional weights",
                        "use back propagation for training",
                        "learn compressed representation of graph",
                        "derive fast sub-linear time learning methods",
                        "exploit subsampling technique",
                        "provide for feature diffusion",
                        "smooth feature matrix using diffusion process",
                        "use normalized Laplacian feature diffusion",
                        "leverage diffused features",
                        "generalize for supervised representation learning",
                        "replace feature evaluation routine",
                        "formulate objective function",
                        "maximize relevancy and minimize redundancy",
                        "analyze computational complexity",
                        "compute initial graphlet features",
                        "define feature extraction",
                        "extract features on another graph",
                        "generalize across-networks",
                        "derive feature definitions",
                        "extract features on arbitrary graph",
                        "illustrate computer system",
                        "describe machine-readable storage medium"
                    ],
                    "num_characters": 42492,
                    "outline_medium": [
                        "motivate graph representation learning",
                        "introduce limitations of existing techniques",
                        "describe DeepGL framework for learning deep node and edge representations",
                        "outline advantages of DeepGL over existing methods",
                        "describe DeepGL system architecture",
                        "introduce components of DeepGL system",
                        "describe processing device and data store",
                        "outline network infrastructure",
                        "describe server and client device interaction",
                        "introduce DeepGL architecture",
                        "describe feature matrix and relational feature operators",
                        "outline base graph features and graphlet decomposition",
                        "describe edge feature learning and egonet features",
                        "introduce attributed graph support",
                        "describe learning node and edge representations",
                        "outline relational feature operators and composition",
                        "describe space of relational functions searched by DeepGL",
                        "introduce example relational feature operators",
                        "describe external and within-egonet features",
                        "outline method of deep graph representation learning",
                        "describe calculating base features and generating feature layers",
                        "evaluate feature pairs and select subset of features",
                        "define feature dependence graph",
                        "partition feature graph into groups",
                        "select representative features",
                        "derive new feature from group",
                        "prune feature layer",
                        "update feature matrix",
                        "check for convergence",
                        "learn additional feature layer",
                        "discuss DeepGL properties",
                        "generalize DeepGL for supervised learning",
                        "introduce additional weights and back propagation",
                        "learn compressed representation of graph",
                        "derive fast sub-linear time learning methods",
                        "perform feature diffusion",
                        "smooth feature matrix using diffusion process",
                        "generalize DeepGL for supervised representation learning",
                        "formulate objective function for relevancy and redundancy",
                        "analyze computational complexity of DeepGL",
                        "describe feature extraction and transfer learning",
                        "illustrate computer system for executing DeepGL"
                    ],
                    "outline_short": [
                        "motivate graph representation learning",
                        "describe limitations of existing techniques",
                        "introduce DeepGL framework for learning deep node and edge representations",
                        "describe DeepGL architecture and components",
                        "explain relational feature operators and graphlet features",
                        "describe learning node and edge representations using relational feature operators",
                        "discuss space of relational functions searched by DeepGL",
                        "illustrate example relational feature operators and egonet features",
                        "describe method of deep graph representation learning using DeepGL",
                        "provide pseudocode for calculating base features, generating feature layers, and evaluating feature pairs",
                        "conclude with advantages of DeepGL over existing techniques",
                        "define feature dependence graph",
                        "select important features",
                        "derive new feature from group of dependent features",
                        "update feature matrix",
                        "discuss additional considerations and properties of DeepGL",
                        "describe feature diffusion process",
                        "generalize DeepGL for supervised representation learning",
                        "discuss computational complexity of DeepGL",
                        "describe feature extraction and transfer learning",
                        "illustrate diagrammatic representation of a machine"
                    ]
                }
            ],
            "outline_long": [],
            "num_characters": 0,
            "outline_medium": [],
            "outline_short": []
        }
    ],
    "claims": [
        "1. A method of deep graph representation learning, the method comprising:\nderiving a set of base features; and\nautomatically developing, by a processing device, a multi-layered hierarchical graph representation based on the set of base features, wherein each successive layer of the multi-layered hierarchical graph representation leverages an output from a previous layer to learn features of a higher-order.",
        "2. The method of claim 1, wherein automatically developing the multi-layered hierarchical graph representation comprises:\nadding the set of base features to a feature matrix,\n(i) generating, by a processing device, a current feature layer from the feature matrix and a set of relational feature operators, wherein the current feature layer corresponds to a set of current features;\n(ii) evaluating feature pairs associated with the current feature layer;\n(iii) selecting a subset of features from the set of current features based on the evaluated feature pairs; and\n(iv) adding the subset of features to the feature matrix to generate an updated feature matrix.",
        "3. The method of claim 2, further comprising:\nincrementing the current feature layer to generate a new current feature layer; and\nrepeating steps (i) through (iv) for the new current feature layer until no new features emerge or a max number of layers is reached.",
        "4. The method of claim 2, further comprising:\ntransforming the set of base features after generating a current feature layer to generate a plurality of transformed based features; and\nadding the plurality of transformed base features to the updated feature matrix to generate a new updated feature matrix.",
        "5. The method of claim 2, further comprising: transforming the set of current features after generating a current feature layer.",
        "6. The method of claim 2, wherein a plurality of features in the feature matrix are transfer learning features.",
        "7. The method of claim 2, wherein selecting the subset of features further comprises:\napplying a set of relational feature operators to each feature of a previous feature layer.",
        "8. A system comprising:\na memory to store a set of base features; and\na processing device, operatively coupled to the memory, to:\nderive the set of base features; and\nautomatically develop a multi-layered hierarchical graph representation based on the set of base features, wherein each successive layer of the multi-layered hierarchical graph representation leverages an output from a previous layer to learn features of a higher-order.",
        "9. The system of claim 8, wherein to automatically develop the multi-layered hierarchical graph representation the processing device is further to:\nadd the set of base features to a feature matrix;\n(i) generate a current feature layer from the feature matrix and a set of relational feature operators, wherein the current feature layer corresponds to a set of current features;\n(ii) evaluate feature pairs associated with the current feature layer;\n(iii) select a subset of features from the set of current features based on the evaluated feature pairs; and\n(iv) add the subset of features to the feature matrix to generate an updated feature matrix.",
        "10. The system of claim 9, wherein the processing device is further to:\nincrement the current feature layer to generate a new current feature layer; and\nrepeat steps (i) through (iv) for the new current feature layer until no new features emerge or a max number of layers is reached.",
        "11. The system of claim 9, wherein the processing device is further to:\ntransform the set of base features after generating a current feature layer to generate a plurality of transformed based features; and\nadd the plurality of transformed base features to the updated feature matrix to generate a new updated feature matrix.",
        "12. The system of claim 9, wherein the processing device is further to: transform the set of current features after generating a current feature layer.",
        "13. The system of claim 9, wherein the processing device is one or more graphics processing units of one or more servers.",
        "14. The system of claim 9, wherein to select the subset of features the processing device is to:\napply a set of relational feature operators to each feature of a previous feature layer.",
        "15. A non-transitory computer-readable storage medium having instructions stored thereon that, when executed by a processing device, cause the processing device to:\nderive a set of base features; and\nautomatically develop, by the processing device, a multi-layered hierarchical graph representation based on the set of base features, wherein each successive layer of the multi-layered hierarchical graph representation leverages an output from a previous layer to learn features of a higher-order.",
        "16. A non-transitory computer-readable storage medium of claim 15, the processing device further to:\nadd the set of base features to a feature matrix;\n(i) generate, by the processing device, a current feature layer from the feature matrix and a set of relational feature operators, wherein the current feature layer corresponds to a set of current features,\n(ii) evaluate feature pairs associated with the current feature layer;\n(iii) select a subset of features from the set of current features based on the evaluated feature pairs; and\n(iv) add the subset of features to the feature matrix to generate an updated feature matrix.",
        "17. The non-transitory computer-readable storage medium of claim 16, the processing device further to:\nincrement the current feature layer to generate a new current feature layer; and\nrepeat steps (i) through (iv) for the new current feature layer until no new features emerge or a max number of layers is reached.",
        "18. The non-transitory computer-readable storage medium of claim 16, the processing device further to:\ntransform the set of base features after generating a current feature layer to generate a plurality of transformed based features; and\nadd the plurality of transformed base features to the updated feature matrix to generate a new updated feature matrix.",
        "19. The non-transitory computer-readable storage medium of claim 16, the processing device further to: transform the set of current features after generating a current feature layer.",
        "20. The non-transitory computer-readable storage medium of claim 16, wherein a plurality of features in the feature matrix are transfer learning features."
    ]
}