{
    "id": "US20200394511",
    "authors": [
        "Jungo Kasai",
        "Kun Qian",
        "Sairam Gurajada",
        "Yunyao Li",
        "Lucian Popa"
    ],
    "title": "Low-Resource Entity Resolution with Transfer Learning",
    "date": "2019-06-17 00:00:00",
    "abstract": "Methods, systems, and computer program products for low-resource entity resolution with transfer learning are provided herein. A computer-implemented method includes processing input data via a first entity resolution model, wherein the input data comprise labeled input data and unlabeled input data; identifying one or more portions of the unlabeled input data to be used in training a neural network entity resolution model, wherein said identifying comprises applying one or more active learning algorithms to the first entity resolution model; training, using (i) the one or more portions of the unlabeled input data and (ii) one or more deep learning techniques, the neural network entity resolution model; and performing one or more entity resolution tasks by applying the trained neural network entity resolution model to one or more datasets.",
    "sections": [
        {
            "title": "DESCRIPTION",
            "paragraphs": [],
            "subsections": [
                {
                    "title": "FIELD",
                    "paragraphs": [
                        "The present application generally relates to information technology and, more particularly, to data management techniques."
                    ],
                    "subsections": [],
                    "outline_long": [
                        "relate to data management"
                    ],
                    "num_characters": 122,
                    "outline_medium": [
                        "relate to data management"
                    ],
                    "outline_short": [
                        "relate to data management"
                    ]
                },
                {
                    "title": "BACKGROUND",
                    "paragraphs": [
                        "Entity resolution (ER) techniques identify records in data collections that refer to the same entity, and such techniques are commonly utilized in data cleaning and integration processes. Conventional ER approaches often require expensive manual feature engineering to explicitly define matching functions that apply to the attributes of the entities in question. Additionally, conventional ER approaches can also require large amounts of labeled data, which are often unavailable in real-world applications."
                    ],
                    "subsections": [],
                    "outline_long": [
                        "limitations of conventional ER approaches"
                    ],
                    "num_characters": 508,
                    "outline_medium": [
                        "limitations of conventional ER approaches"
                    ],
                    "outline_short": [
                        "limitations of conventional ER approaches"
                    ]
                },
                {
                    "title": "SUMMARY",
                    "paragraphs": [
                        "In one embodiment of the present invention, techniques for low-resource entity resolution with transfer learning are provided. An exemplary computer-implemented method can include processing input data via a first entity resolution model, wherein the input data include labeled input data and unlabeled input data, and identifying one or more portions of the unlabeled input data to be used in training a neural network entity resolution model, wherein identifying includes applying one or more active learning algorithms to the first entity resolution model. The method also includes training, using (i) the one or more portions of the unlabeled input data and (ii) one or more deep learning techniques, the neural network entity resolution model, and performing one or more entity resolution tasks by applying the trained neural network entity resolution model to one or more datasets.",
                        "In another embodiment of the invention, an exemplary computer-implemented method can include processing input data via a randomly initialized entity resolution model, wherein the input data include unlabeled input data, and identifying one or more portions of the unlabeled input data to be used in training the randomly initialized entity resolution model, wherein identifying includes applying one or more active learning algorithms to the randomly initialized entity resolution model. Additionally, such a method includes training, using (i) the one or more portions of the unlabeled input data and (ii) one or more deep learning techniques, the randomly initialized entity resolution model, and performing one or more entity resolution tasks by applying the trained randomly initialized entity resolution model to one or more datasets.",
                        "Another embodiment of the invention or elements thereof can be implemented in the form of a computer program product tangibly embodying computer readable instructions which, when implemented, cause a computer to carry out a plurality of method steps, as described herein. Furthermore, another embodiment of the invention or elements thereof can be implemented in the form of a system including a memory and at least one processor that is coupled to the memory and configured to perform noted method steps. Yet further, another embodiment of the invention or elements thereof can be implemented in the form of means for carrying out the method steps described herein, or elements thereof; the means can include hardware module(s) or a combination of hardware and software modules, wherein the software modules are stored in a tangible computer-readable storage medium (or multiple such media).",
                        "These and other objects, features and advantages of the present invention will become apparent from the following detailed description of illustrative embodiments thereof, which is to be read in connection with the accompanying drawings."
                    ],
                    "subsections": [],
                    "outline_long": [
                        "introduce low-resource ER techniques",
                        "process input data via first ER model",
                        "train neural network ER model",
                        "perform entity resolution tasks",
                        "implement in computer program product"
                    ],
                    "num_characters": 2861,
                    "outline_medium": [
                        "introduce low-resource ER with transfer learning",
                        "embodiment of neural network ER model"
                    ],
                    "outline_short": [
                        "introduce low-resource ER with transfer learning"
                    ]
                },
                {
                    "title": "DETAILED DESCRIPTION",
                    "paragraphs": [
                        "As described herein, an embodiment of the invention includes low-resource entity resolution with transfer learning. At least one embodiment includes implementing deep learning-based methodology that targets low-resource settings for ER through a combination of transfer learning and active learning.",
                        "Through a neural network architecture, one or more embodiments include learning a transferable model from multiple source datasets with cumulatively sufficient labeled data. Subsequently, such an embodiment includes using active learning to identify uncertain and thus informative examples to further adapt the model to the target dataset. This combination of transfer and active learning in ER settings enables the learning of an improved deep learning (DL) model while using significantly fewer target dataset labels in comparison to conventional approaches. Accordingly, at least one embodiment includes creating and/or implementing a DL architecture for ER that learns attribute-agnostic and transferable representations from multiple source datasets using dataset (domain) adaptation. Additionally, such an embodiment includes utilizing entropy-based sampling methods for active learning, which helps fine-tune the transferred model to a target dataset.",
                        "One or more embodiments are intended to be implemented in contexts of ER tasks in low-resource settings (i.e., wherein there is a limited amount of labeled data for the tasks). In such an embodiment, deep learning methods mitigate and/or eliminate the need for designing matching functions, and deep learning methods also alleviate the need for feature engineering (that require considerable amounts of labeled data).",
                        "FIG. 1 is a diagram illustrating system architecture, according to an embodiment of the invention. By way of illustration, FIG. 1 depicts a low-resource dataset 102 that includes a (small) collection of labeled examples 106 and a collection of unlabeled examples 104. At least a portion of the unlabeled examples 104 are provided to an initial ER model 108, which processes the provided unlabeled examples 104 and determines and/or identifies one or more informative examples 110. The informative examples 110, as well as at least a portion of the labeled examples 106, are provided to a neural (deep learning) model 114 within active learning component 112.",
                        "The neural (DL) model 114 determines and/or identifies one or more uncertain examples 116, and those uncertain examples are provided with labels (for example, via a user), and those newly-labeled examples and reincorporated into the neural (DL) model 114 to fine-tune the model 114. Additionally, as depicted in FIG. 1, the neural (DL) model 114 ultimately generate and/or output a final deep active transfer learning (DATL) ER model 118 (which can be utilized to execute one or more ER tasks).",
                        "FIG. 2 is a flow diagram illustrating low-resource entity resolution with transfer learning, according to an exemplary embodiment of the invention. By way of example, consider an ER scenario including a tuple (D={D1, D2, . . . , Dn}, T), wherein D is a collection of datasets over schemas with similar attributes, and T is the task of identifying all occurrences of the same entity instances (of the same type) across D. For instance, such a task may include identifying a person that appears in multiple records in D. As noted herein, some ER scenarios include a significant amount of labeled data; however, many ER scenarios will include a limited amount of labeled data (also referred to herein as low-resource ER tasks).",
                        "Referring again to FIG. 2, given an ER scenario Si 204 including a significant amount of labeled data 202, at least one embodiment of the invention includes learning a neural (DL) ER model M 206 from S1 using the same neural network for all attribute pairs. Additionally, given a target scenario S2 208, such an embodiment also includes identifying attributes among the datasets of S2 208 that are semantically similar (carried out, for example, via techniques such as scheme matching), and then applying M 206 to those attribute pairs to identify occurrences of the same entity instances across the datasets in S2 208. If there is some amount of labeled data from S2 208, such labeled data (or a portion thereof) can be used to refine the transferred model M 206 to better adapt to S2 208. As also depicted in FIG. 2, in at least one embodiment, an amount of labeled data 210 from S2 208 can be generated automatically via active learning, in which at least one active learning algorithm actively identifies relevant examples from S2 208 to be labeled by a user and used to refine the model M 206.",
                        "As detailed herein, in one or more embodiments, deep learning models use distributed representations of entity record pairs for classification. Such models leverage word embeddings to construct a vector representation of each entity record pair, and thus, are able to avoid expensive feature engineering. In at least one embodiment, deep learning ER models are similar to RNN models and also facilitate transfer learning. In such an embodiment, it is assumed that blocking has already been performed, and the deep learning ER models classify each pair in the candidate set as a match or a non-match.",
                        "For each entity record pair <e1, e2>, wherein each attribute value is a sequence of words, one or more embodiments include tokenizing the attribute values and vectorizing the words by external word embeddings to obtain input representations. By way merely of example, such an embodiment can include using 300 dimensional FastText embeddings, which capture sub-word information by producing word vectors via character n-grams.",
                        "Additionally, at least one embodiment includes running a bidirectional recurrent neural network (RNN) on the word input representations of each attribute value, and obtaining attribute vectors by concatenating the last hidden units from both directions. In one or more embodiments, different RNNs are used for different attributes. Alternatively, one or more embodiments include implementing a universal RNN that computes all attribute representations in a given network architecture. The resultant attribute representations can be used to compare attributes of each entity record pair. In particular, at least one embodiment includes computing the element-wise absolute difference between the two attribute vectors for each attribute, and constructing attribute similarity vectors.",
                        "Given the attribute similarity vectors, one or more embodiments include combining those vectors to represent the similarity between the input entity record pair. Such an embodiment includes adding and/or summing all attribute similarity vectors. This way of combining vectors ensures that the final similarity vector is of the same dimensionality regardless of the number of attributes, and facilitates transfer of all of the subsequent parameters.",
                        "Additionally, at least one embodiment includes feeding the similarity vector for the two records to a two-layer multilayer perceptron (MLP) with highway connections, and classifying the pair as a match or a non-match. The output from the final layer of the MLP is a two-dimensional vector, and one or more embodiments include normalizing the two-dimensional vector via the softmax function to obtain a probability distribution.",
                        "Also, at least one embodiment includes training one or more networks to minimize the negative log-likelihood loss. Such an embodiment can include, for example, using the Adam optimization algorithm with a batch size of 16 and an initial learning rate of 0.001, and after each epoch, such an embodiment includes evaluating the model on the development set.",
                        "As also detailed herein, one or more embodiments include deep transfer active learning for ER tasks, wherein such an embodiment includes establishing two orthogonal frameworks for deep learning ER models in low-resource settings (i.e., a transfer learning framework and an active learning framework).",
                        "With respect to transfer learning, at least one embodiment includes training all parameters in the given network on source data, and using the parameters to classify a target dataset. Such an embodiment can additionally include constructing network representations that are invariant with respect to idiosyncratic properties of datasets. To this end, one or more embodiments include applying the technique of dataset (domain) adaptation developed in image recognition. In particular, such an embodiment includes building a dataset classifier with the same architecture as the matching classifier that predicts the dataset from which the input pair originates. Also, such an embodiment replaces the training objective by the sum of the negative log-likelihood losses from the two classifiers. A gradient reversal layer can be added between the similarity vector and the dataset classifier such that the parameters in the dataset classifier are trained to predict the dataset while the rest of the network is trained to mislead the dataset classifier, thereby developing dataset-independent internal representations. With dataset adaptation, such an embodiment includes feeding pairs from the target dataset as well as the source to the network. For the pairs from the target dataset, the loss from the matching classifier can be disregarded.",
                        "Additionally, in one or more embodiments, active learning provides a framework to reduce the number of pairs that need to be labeled by iteratively selecting informative examples for the model.",
                        "FIG. 3 is a diagram illustrating a deep transfer active learning algorithm 302, according to an exemplary embodiment of the invention. Note that one or more embodiments include avoiding using entropy level thresholds to select samples, and instead include fixing the number of samples. As depicted in FIG. 3, the active learning algorithm 302 iterates over three steps: (1) selecting uncertain (and thus informative) samples from the unlabeled data and labeling such samples; (2) selecting high-confidence samples from the unlabeled data and using predicted labels as proxies; and (3) updating the parameters in the network by training the network on the selected samples. The second step, for example, prevents the network from overfitting to selected uncertain samples.",
                        "In one or more embodiments, uncertain samples and high-confidence samples are characterized by the entropy of the conditional probability distribution outputted by the current model. By way merely of illustration, let K be the sampling size and the unlabeled dataset including candidate record pairs be DU={xi}i=1N. Additionally, denote the probability that record pair xi is a match according to the current model by p(xi). Subsequently, the conditional entropy of the pair is computed via the following equation:",
                        "H(xi)=\u2212p(xi)log p(xi)\u2212(1\u2212p(xi))log(1\u2212p(xi))",
                        "Uncertain samples and high-confidence samples can be associated with high and low entropy. Given this notion of uncertainty and high confidence, record pairs with top K entropy can be selected as uncertain samples and those with bottom K entropy can be selected as high confidence samples. Namely, take",
                        "\\({\\underset{{D \\subseteq {D^{U}\ue89e{s.t.{\uf603D\uf604}}}} = K}{argmax}\ue89e{\\sum_{x \\in D}\ue89e{H\ue8a0(x)}}},{\\underset{{D \\subseteq {D^{U}\ue89e{s.t.{\uf603D\uf604}}}} = K}{argmin}\ue89e{\\sum_{x \\in D}\ue89e{H\ue8a0(x)}}}\\)",
                        "as sets of uncertain and high-confidence samples, respectively. However, these criteria can introduce an intended bias toward a certain direction, resulting in unstable performance. To address this instability problem, at least one embodiment includes implementing a partition sampling mechanism. Such an embodiment includes partitioning the unlabeled data DU into two subsets, {tilde over (D)}U and U, that comprise pairs that the model predicts as matches and non-matches, respectively. Namely, {tilde over (D)}U={x\u2208DU|p(x)\u22650.5}, U={\u2208DU|p(x)\u22650.5}.",
                        "Subsequently, such an embodiment includes selecting the top/bottom k=K/2 samples from each subset with respect to entropy. Uncertain samples are now:",
                        "\\({\\underset{{D \\subseteq {{\\overset{\\_}{D}}^{U}\ue89e{s.t.{\uf603D\uf604}}}} = k}{argmax}\ue89e{\\sum_{x \\in D}\ue89e{H\ue8a0(x)}}},{\\underset{{D \\subseteq {{\\underset{\\_}{D}}^{U}\ue89e{s.t.{\uf603D\uf604}}}} = k}{argmax}\ue89e{\\sum_{x \\in D}\ue89e{H\ue8a0(x)}}},\\)",
                        "wherein the two criteria select likely false positives (to enhance precision) and likely false negatives (to enhance recall), respectively. In such an embodiment, high-confidence samples are identified by:",
                        "\\({\\underset{{D \\subseteq {{\\overset{\\_}{D}}^{U}\ue89e{s.t.{\uf603D\uf604}}}} = k}{argmin}\ue89e{\\sum_{x \\in D}\ue89e{H\ue8a0(x)}}},{\\underset{{D \\subseteq {{\\underset{\\_}{D}}^{U}\ue89e{s.t.{\uf603D\uf604}}}} = k}{argmin}\ue89e{\\sum_{x \\in D}\ue89e{H\ue8a0(x)}}},\\)",
                        "wherein the two criteria correspond to high-confidence positives and high-confidence negatives, respectively. These sampling criteria equally partition uncertain samples and high-confidence samples into different categories.",
                        "FIG. 4 is a flow diagram illustrating techniques according to an embodiment of the present invention. Step 402 includes processing input data via a first entity resolution model, wherein the input data comprise labeled input data and unlabeled input data. Step 404 includes identifying one or more portions of the unlabeled input data to be used in training a neural network entity resolution model, wherein said identifying comprises applying one or more active learning algorithms to the first entity resolution model.",
                        "Step 406 includes training, using (i) the one or more portions of the unlabeled input data and (ii) one or more deep learning techniques, the neural network entity resolution model. In at least one embodiment, the one or more deep learning techniques include implementing distributed representations of entity record pairs for classification, and training the neural network entity resolution model includes constructing a vector representation of each of the entity record pairs by leveraging word embeddings.",
                        "Step 408 includes performing one or more entity resolution tasks by applying the trained neural network entity resolution model to one or more datasets. In one or more embodiments, the one or more datasets include an amount of labeled data less than a given threshold. Additionally, in at least one embodiment, the trained neural network entity resolution model includes a recurrent neural network model.",
                        "The techniques depicted in FIG. 4 can also include fine-tuning the neural network entity resolution model by labeling, via manual input, one or more uncertain portions of the processed input data. Additionally, at least one embodiment includes generating the first entity resolution model by training, via one or more deep learning techniques, a neural network model with labeled input data. Also, in such an embodiment, the one or more deep learning techniques including learning the attribute-agnostic and transferable neural network model from multiple source datasets using dataset adaptation.",
                        "Also, an additional embodiment of the invention includes processing input data via a randomly initialized entity resolution model, wherein the input data include unlabeled input data, and identifying one or more portions of the unlabeled input data to be used in training the randomly initialized entity resolution model, wherein identifying includes applying one or more active learning algorithms to the randomly initialized entity resolution model. Additionally, such an embodiment includes training, using (i) the one or more portions of the unlabeled input data and (ii) one or more deep learning techniques, the randomly initialized entity resolution model, and performing one or more entity resolution tasks by applying the trained randomly initialized entity resolution model to one or more datasets.",
                        "The techniques depicted in FIG. 4 can also, as described herein, include providing a system, wherein the system includes distinct software modules, each of the distinct software modules being embodied on a tangible computer-readable recordable storage medium. All of the modules (or any subset thereof) can be on the same medium, or each can be on a different medium, for example. The modules can include any or all of the components shown in the figures and/or described herein. In an embodiment of the invention, the modules can run, for example, on a hardware processor. The method steps can then be carried out using the distinct software modules of the system, as described above, executing on a hardware processor. Further, a computer program product can include a tangible computer-readable recordable storage medium with code adapted to be executed to carry out at least one method step described herein, including the provision of the system with the distinct software modules.",
                        "Additionally, the techniques depicted in FIG. 4 can be implemented via a computer program product that can include computer useable program code that is stored in a computer readable storage medium in a data processing system, and wherein the computer useable program code was downloaded over a network from a remote data processing system. Also, in an embodiment of the invention, the computer program product can include computer useable program code that is stored in a computer readable storage medium in a server data processing system, and wherein the computer useable program code is downloaded over a network to a remote data processing system for use in a computer readable storage medium with the remote system.",
                        "An embodiment of the invention or elements thereof can be implemented in the form of an apparatus including a memory and at least one processor that is coupled to the memory and configured to perform exemplary method steps.",
                        "Additionally, an embodiment of the present invention can make use of software running on a computer or workstation. With reference to FIG. 5, such an implementation might employ, for example, a processor 502, a memory 504, and an input/output interface formed, for example, by a display 506 and a keyboard 508. The term \u201cprocessor\u201d as used herein is intended to include any processing device, such as, for example, one that includes a CPU (central processing unit) and/or other forms of processing circuitry. Further, the term \u201cprocessor\u201d may refer to more than one individual processor. The term \u201cmemory\u201d is intended to include memory associated with a processor or CPU, such as, for example, RAM (random access memory), ROM (read only memory), a fixed memory device (for example, hard drive), a removable memory device (for example, diskette), a flash memory and the like. In addition, the phrase \u201cinput/output interface\u201d as used herein, is intended to include, for example, a mechanism for inputting data to the processing unit (for example, mouse), and a mechanism for providing results associated with the processing unit (for example, printer). The processor 502, memory 504, and input/output interface such as display 506 and keyboard 508 can be interconnected, for example, via bus 510 as part of a data processing unit 512. Suitable interconnections, for example via bus 510, can also be provided to a network interface 514, such as a network card, which can be provided to interface with a computer network, and to a media interface 516, such as a diskette or CD-ROM drive, which can be provided to interface with media 518.",
                        "Accordingly, computer software including instructions or code for performing the methodologies of the invention, as described herein, may be stored in associated memory devices (for example, ROM, fixed or removable memory) and, when ready to be utilized, loaded in part or in whole (for example, into RAM) and implemented by a CPU. Such software could include, but is not limited to, firmware, resident software, microcode, and the like.",
                        "A data processing system suitable for storing and/or executing program code will include at least one processor 502 coupled directly or indirectly to memory elements 504 through a system bus 510. The memory elements can include local memory employed during actual implementation of the program code, bulk storage, and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during implementation.",
                        "Input/output or I/O devices (including, but not limited to, keyboards 508, displays 506, pointing devices, and the like) can be coupled to the system either directly (such as via bus 510) or through intervening I/O controllers (omitted for clarity).",
                        "Network adapters such as network interface 514 may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems, cable modems and Ethernet cards are just a few of the currently available types of network adapters.",
                        "As used herein, including the claims, a \u201cserver\u201d includes a physical data processing system (for example, system 512 as shown in FIG. 5) running a server program. It will be understood that such a physical server may or may not include a display and keyboard.",
                        "The present invention may be a system, a method, and/or a computer program product at any possible technical detail level of integration. The computer program product may include a computer readable storage medium (or media) having computer readable program instructions thereon for causing a processor to carry out embodiments of the present invention.",
                        "The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be, for example, but is not limited to, an electronic storage device, a magnetic storage device, an optical storage device, an electromagnetic storage device, a semiconductor storage device, or any suitable combination of the foregoing. A non-exhaustive list of more specific examples of the computer readable storage medium includes the following: a portable computer diskette, a hard disk, a random access memory (RAM), a read-only memory (ROM), an erasable programmable read-only memory (EPROM or Flash memory), a static random access memory (SRAM), a portable compact disc read-only memory (CD-ROM), a digital versatile disk (DVD), a memory stick, a floppy disk, a mechanically encoded device such as punch-cards or raised structures in a groove having instructions recorded thereon, and any suitable combination of the foregoing. A computer readable storage medium, as used herein, is not to be construed as being transitory signals per se, such as radio waves or other freely propagating electromagnetic waves, electromagnetic waves propagating through a waveguide or other transmission media (e.g., light pulses passing through a fiber-optic cable), or electrical signals transmitted through a wire.",
                        "Computer readable program instructions described herein can be downloaded to respective computing/processing devices from a computer readable storage medium or to an external computer or external storage device via a network, for example, the Internet, a local area network, a wide area network and/or a wireless network. The network may comprise copper transmission cables, optical transmission fibers, wireless transmission, routers, firewalls, switches, gateway computers and/or edge servers. A network adapter card or network interface in each computing/processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing/processing device.",
                        "Computer readable program instructions for carrying out operations of the present invention may be assembler instructions, instruction-set-architecture (ISA) instructions, machine instructions, machine dependent instructions, microcode, firmware instructions, state-setting data, configuration data for integrated circuitry, or either source code or object code written in any combination of one or more programming languages, including an object oriented programming language such as Smalltalk, C++, or the like, and procedural programming languages, such as the \u201cC\u201d programming language or similar programming languages. The computer readable program instructions may execute entirely on the user's computer, partly on the user's computer, as a stand-alone software package, partly on the user's computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario, the remote computer may be connected to the user's computer through any type of network, including a local area network (LAN) or a wide area network (WAN), or the connection may be made to an external computer (for example, through the Internet using an Internet Service Provider). In some embodiments, electronic circuitry including, for example, programmable logic circuitry, field-programmable gate arrays (FPGA), or programmable logic arrays (PLA) may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry, in order to perform embodiments of the present invention.",
                        "Embodiments of the present invention are described herein with reference to flowchart illustrations and/or block diagrams of methods, apparatus (systems), and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and/or block diagrams, and combinations of blocks in the flowchart illustrations and/or block diagrams, can be implemented by computer readable program instructions.",
                        "These computer readable program instructions may be provided to a processor of a general purpose computer, special purpose computer, or other programmable data processing apparatus to produce a machine, such that the instructions, which execute via the processor of the computer or other programmable data processing apparatus, create means for implementing the functions/acts specified in the flowchart and/or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer, a programmable data processing apparatus, and/or other devices to function in a particular manner, such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function/act specified in the flowchart and/or block diagram block or blocks.",
                        "The computer readable program instructions may also be loaded onto a computer, other programmable data processing apparatus, or other device to cause a series of operational steps to be performed on the computer, other programmable apparatus or other device to produce a computer implemented process, such that the instructions which execute on the computer, other programmable apparatus, or other device implement the functions/acts specified in the flowchart and/or block diagram block or blocks.",
                        "The flowchart and block diagrams in the Figures illustrate the architecture, functionality, and operation of possible implementations of systems, methods, and computer program products according to various embodiments of the present invention. In this regard, each block in the flowchart or block diagrams may represent a module, segment, or portion of instructions, which comprises one or more executable instructions for implementing the specified logical function(s). In some alternative implementations, the functions noted in the blocks may occur out of the order noted in the Figures. For example, two blocks shown in succession may, in fact, be executed substantially concurrently, or the blocks may sometimes be executed in the reverse order, depending upon the functionality involved. It will also be noted that each block of the block diagrams and/or flowchart illustration, and combinations of blocks in the block diagrams and/or flowchart illustration, can be implemented by special purpose hardware-based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.",
                        "It should be noted that any of the methods described herein can include an additional step of providing a system comprising distinct software modules embodied on a computer readable storage medium; the modules can include, for example, any or all of the components detailed herein. The method steps can then be carried out using the distinct software modules and/or sub-modules of the system, as described above, executing on a hardware processor 502. Further, a computer program product can include a computer-readable storage medium with code adapted to be implemented to carry out at least one method step described herein, including the provision of the system with the distinct software modules.",
                        "In any case, it should be understood that the components illustrated herein may be implemented in various forms of hardware, software, or combinations thereof, for example, application specific integrated circuit(s) (ASICS), functional circuitry, an appropriately programmed digital computer with associated memory, and the like. Given the teachings of the invention provided herein, one of ordinary skill in the related art will be able to contemplate other implementations of the components of the invention.",
                        "Additionally, it is understood in advance that implementation of the teachings recited herein are not limited to a particular computing environment. Rather, embodiments of the present invention are capable of being implemented in conjunction with any type of computing environment now known or later developed.",
                        "For example, cloud computing is a model of service delivery for enabling convenient, on-demand network access to a shared pool of configurable computing resources (for example, networks, network bandwidth, servers, processing, memory, storage, applications, virtual machines, and services) that can be rapidly provisioned and released with minimal management effort or interaction with a provider of the service. This cloud model may include at least five characteristics, at least three service models, and at least four deployment models.",
                        "Characteristics are as follows:",
                        "On-demand self-service: a cloud consumer can unilaterally provision computing capabilities, such as server time and network storage, as needed automatically without requiring human interaction with the service's provider.",
                        "Broad network access: capabilities are available over a network and accessed through standard mechanisms that promote use by heterogeneous thin or thick client platforms (e.g., mobile phones, laptops, and PDAs).",
                        "Resource pooling: the provider's computing resources are pooled to serve multiple consumers using a multi-tenant model, with different physical and virtual resources dynamically assigned and reassigned according to demand. There is a sense of location independence in that the consumer generally has no control or knowledge over the exact location of the provided resources but may be able to specify location at a higher level of abstraction (for example, country, state, or datacenter).",
                        "Rapid elasticity: capabilities can be rapidly and elastically provisioned, in some cases automatically, to quickly scale out and rapidly released to quickly scale in. To the consumer, the capabilities available for provisioning often appear to be unlimited and can be purchased in any quantity at any time.",
                        "Measured service: cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service (for example, storage, processing, bandwidth, and active user accounts). Resource usage can be monitored, controlled, and reported providing transparency for both the provider and consumer of the utilized service.",
                        "Service Models are as follows:",
                        "Software as a Service (SaaS): the capability provided to the consumer is to use the provider's applications running on a cloud infrastructure. The applications are accessible from various client devices through a thin client interface such as a web browser (for example, web-based e-mail). The consumer does not manage or control the underlying cloud infrastructure including network, servers, operating systems, storage, or even individual application capabilities, with the possible exception of limited user-specific application configuration settings.",
                        "Platform as a Service (PaaS): the capability provided to the consumer is to deploy onto the cloud infrastructure consumer-created or acquired applications created using programming languages and tools supported by the provider. The consumer does not manage or control the underlying cloud infrastructure including networks, servers, operating systems, or storage, but has control over the deployed applications and possibly application hosting environment configurations.",
                        "Infrastructure as a Service (IaaS): the capability provided to the consumer is to provision processing, storage, networks, and other fundamental computing resources where the consumer is able to deploy and run arbitrary software, which can include operating systems and applications. The consumer does not manage or control the underlying cloud infrastructure but has control over operating systems, storage, deployed applications, and possibly limited control of select networking components (for example, host firewalls).",
                        "Deployment Models are as follows:",
                        "Private cloud: the cloud infrastructure is operated solely for an organization. It may be managed by the organization or a third party and may exist on-premises or off-premises.",
                        "Community cloud: the cloud infrastructure is shared by several organizations and supports a specific community that has shared concerns (for example, mission, security requirements, policy, and compliance considerations). It may be managed by the organizations or a third party and may exist on-premises or off-premises.",
                        "Public cloud: the cloud infrastructure is made available to the general public or a large industry group and is owned by an organization selling cloud services.",
                        "Hybrid cloud: the cloud infrastructure is a composition of two or more clouds (private, community, or public) that remain unique entities but are bound together by standardized or proprietary technology that enables data and application portability (for example, cloud bursting for load-balancing between clouds).",
                        "A cloud computing environment is service oriented with a focus on statelessness, low coupling, modularity, and semantic interoperability. At the heart of cloud computing is an infrastructure comprising a network of interconnected nodes.",
                        "Referring now to FIG. 6, illustrative cloud computing environment 50 is depicted. As shown, cloud computing environment 50 includes one or more cloud computing nodes 10 with which local computing devices used by cloud consumers, such as, for example, personal digital assistant (PDA) or cellular telephone 54A, desktop computer 54B, laptop computer 54C, and/or automobile computer system 54N may communicate. Nodes 10 may communicate with one another. They may be grouped (not shown) physically or virtually, in one or more networks, such as Private, Community, Public, or Hybrid clouds as described hereinabove, or a combination thereof. This allows cloud computing environment 50 to offer infrastructure, platforms and/or software as services for which a cloud consumer does not need to maintain resources on a local computing device. It is understood that the types of computing devices 54A-N shown in FIG. 6 are intended to be illustrative only and that computing nodes 10 and cloud computing environment 50 can communicate with any type of computerized device over any type of network and/or network addressable connection (e.g., using a web browser).",
                        "Referring now to FIG. 7, a set of functional abstraction layers provided by cloud computing environment 50 (FIG. 6) is shown. It should be understood in advance that the components, layers, and functions shown in FIG. 7 are intended to be illustrative only and embodiments of the invention are not limited thereto. As depicted, the following layers and corresponding functions are provided:",
                        "Hardware and software layer 60 includes hardware and software components. Examples of hardware components include: mainframes 61; RISC (Reduced Instruction Set Computer) architecture based servers 62; servers 63; blade servers 64; storage devices 65; and networks and networking components 66. In some embodiments, software components include network application server software 67 and database software 68.",
                        "Virtualization layer 70 provides an abstraction layer from which the following examples of virtual entities may be provided: virtual servers 71; virtual storage 72; virtual networks 73, including virtual private networks; virtual applications and operating systems 74; and virtual clients 75. In one example, management layer 80 may provide the functions described below. Resource provisioning 81 provides dynamic procurement of computing resources and other resources that are utilized to perform tasks within the cloud computing environment. Metering and Pricing 82 provide cost tracking as resources are utilized within the cloud computing environment, and billing or invoicing for consumption of these resources.",
                        "In one example, these resources may include application software licenses. Security provides identity verification for cloud consumers and tasks, as well as protection for data and other resources. User portal 83 provides access to the cloud computing environment for consumers and system administrators. Service level management 84 provides cloud computing resource allocation and management such that required service levels are met. Service Level Agreement (SLA) planning and fulfillment 85 provide pre-arrangement for, and procurement of, cloud computing resources for which a future requirement is anticipated in accordance with an SLA.",
                        "Workloads layer 90 provides examples of functionality for which the cloud computing environment may be utilized. Examples of workloads and functions which may be provided from this layer include: mapping and navigation 91; software development and lifecycle management 92; virtual classroom education delivery 93; data analytics processing 94; transaction processing 95; and low-resource entity resolution 96, in accordance with the one or more embodiments of the present invention.",
                        "The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein, the singular forms \u201ca,\u201d \u201can\u201d and \u201cthe\u201d are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will be further understood that the terms \u201ccomprises\u201d and/or \u201ccomprising,\u201d when used in this specification, specify the presence of stated features, steps, operations, elements, and/or components, but do not preclude the presence or addition of another feature, step, operation, element, component, and/or group thereof.",
                        "At least one embodiment of the present invention may provide a beneficial effect such as, for example, performing entity resolution tasks in low-resource contexts.",
                        "The descriptions of the various embodiments of the present invention have been presented for purposes of illustration, but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments, the practical application or technical improvement over technologies found in the marketplace, or to enable others of ordinary skill in the art to understand the embodiments disclosed herein."
                    ],
                    "subsections": [],
                    "outline_long": [
                        "introduce low-resource entity resolution with transfer learning",
                        "describe deep learning-based methodology",
                        "explain combination of transfer learning and active learning",
                        "illustrate system architecture",
                        "describe low-resource dataset",
                        "explain initial ER model",
                        "describe active learning component",
                        "illustrate neural (deep learning) model",
                        "explain uncertain examples",
                        "describe fine-tuning model",
                        "illustrate final deep active transfer learning (DATL) ER model",
                        "describe ER scenario",
                        "explain task of identifying entity instances",
                        "describe learning neural (DL) ER model",
                        "explain identifying attributes",
                        "describe applying model to attribute pairs",
                        "explain refining transferred model",
                        "describe generating labeled data via active learning",
                        "explain deep learning models using distributed representations",
                        "describe leveraging word embeddings",
                        "explain avoiding feature engineering",
                        "describe deep learning ER models similar to RNN models",
                        "explain facilitating transfer learning",
                        "describe tokenizing attribute values",
                        "explain vectorizing words by external word embeddings",
                        "describe running bidirectional RNN",
                        "explain obtaining attribute vectors",
                        "describe computing element-wise absolute difference",
                        "explain constructing attribute similarity vectors",
                        "describe combining attribute similarity vectors",
                        "explain feeding similarity vector to MLP",
                        "describe classifying pair as match or non-match",
                        "explain training network to minimize negative log-likelihood loss",
                        "describe deep transfer active learning for ER tasks",
                        "explain establishing two orthogonal frameworks",
                        "describe transfer learning framework",
                        "explain active learning framework",
                        "illustrate deep transfer active learning algorithm",
                        "describe selecting uncertain samples",
                        "explain updating parameters in network",
                        "describe network adapters",
                        "define server",
                        "describe system, method, and computer program product",
                        "describe computer readable storage medium",
                        "list examples of computer readable storage medium",
                        "describe computer readable program instructions",
                        "describe downloading instructions from storage medium",
                        "describe network adapter card",
                        "describe computer readable program instructions for carrying out operations",
                        "list examples of programming languages",
                        "describe executing instructions on user's computer or remote computer",
                        "describe electronic circuitry executing instructions",
                        "describe flowchart illustrations and block diagrams",
                        "describe implementing blocks in flowchart and block diagrams",
                        "describe providing system with distinct software modules",
                        "describe carrying out method steps using software modules",
                        "describe computer program product with code",
                        "describe implementing components in various forms of hardware and software",
                        "describe cloud computing environment",
                        "describe characteristics of cloud computing",
                        "describe on-demand self-service",
                        "describe broad network access",
                        "describe resource pooling",
                        "describe rapid elasticity",
                        "describe measured service",
                        "describe service models",
                        "describe software as a service",
                        "describe platform as a service",
                        "describe infrastructure as a service",
                        "describe deployment models",
                        "describe private cloud",
                        "describe community cloud",
                        "describe public cloud",
                        "describe hybrid cloud",
                        "describe cloud computing environment with interconnected nodes",
                        "describe functional abstraction layers",
                        "describe hardware and software layer",
                        "describe virtualization layer",
                        "describe workloads layer"
                    ],
                    "num_characters": 40124,
                    "outline_medium": [
                        "introduce low-resource entity resolution with transfer learning",
                        "describe deep learning-based methodology",
                        "motivate neural network architecture",
                        "describe learning transferable model from multiple source datasets",
                        "explain active learning to identify uncertain examples",
                        "illustrate system architecture with FIG. 1",
                        "describe low-resource entity resolution with transfer learning in FIG. 2",
                        "motivate deep learning models for classification",
                        "describe distributed representations of entity record pairs",
                        "explain tokenizing and vectorizing attribute values",
                        "describe running bidirectional recurrent neural network (RNN)",
                        "compute attribute similarity vectors",
                        "combine attribute similarity vectors",
                        "feed similarity vector to multilayer perceptron (MLP)",
                        "classify pair as match or non-match",
                        "train network to minimize negative log-likelihood loss",
                        "describe deep transfer active learning for ER tasks",
                        "establish transfer learning framework",
                        "describe active learning framework",
                        "illustrate deep transfer active learning algorithm with FIG. 3",
                        "introduce network adapters",
                        "define server",
                        "describe technical detail levels of integration",
                        "explain computer readable storage medium",
                        "list examples of computer readable storage medium",
                        "describe computer readable program instructions",
                        "explain how computer readable program instructions are executed",
                        "describe flowchart and block diagram illustrations",
                        "explain how blocks in flowchart and block diagrams are implemented",
                        "describe provision of system with distinct software modules",
                        "explain how method steps are carried out using distinct software modules",
                        "describe characteristics of cloud computing",
                        "list service models of cloud computing",
                        "list deployment models of cloud computing",
                        "describe cloud computing environment",
                        "illustrate cloud computing environment",
                        "describe functional abstraction layers of cloud computing environment",
                        "explain layers and corresponding functions of cloud computing environment",
                        "provide disclaimer and scope of invention"
                    ],
                    "outline_short": [
                        "introduce low-resource entity resolution with transfer learning",
                        "describe neural network architecture for ER",
                        "illustrate system architecture with FIG. 1",
                        "describe flow diagram for low-resource entity resolution with transfer learning in FIG. 2",
                        "detail deep learning models for ER using distributed representations",
                        "describe deep transfer active learning for ER tasks",
                        "illustrate deep transfer active learning algorithm in FIG. 3",
                        "describe techniques for entity resolution tasks in FIG. 4",
                        "provide system overview with distinct software modules",
                        "describe computer program product and apparatus implementation",
                        "define network adapters and servers",
                        "describe computer readable storage medium",
                        "explain computer readable program instructions",
                        "illustrate flowchart and block diagrams",
                        "describe cloud computing environment",
                        "detail service models and deployment models",
                        "illustrate cloud computing nodes and functional abstraction layers",
                        "describe workloads layer and functionality",
                        "provide terminology and scope of invention"
                    ]
                }
            ],
            "outline_long": [],
            "num_characters": 0,
            "outline_medium": [],
            "outline_short": []
        }
    ],
    "claims": [
        "1. A computer-implemented method, the method comprising steps of:\nprocessing input data via a first entity resolution model, wherein the input data comprise labeled input data and unlabeled input data;\nidentifying one or more portions of the unlabeled input data to be used in training a neural network entity resolution model, wherein said identifying comprises applying one or more active learning algorithms to the first entity resolution model;\ntraining, using (i) the one or more portions of the unlabeled input data and (ii) one or more deep learning techniques, the neural network entity resolution model; and\nperforming one or more entity resolution tasks by applying the trained neural network entity resolution model to one or more datasets;\nwherein the steps are carried out by at least one computing device.",
        "2. The computer-implemented method of claim 1, wherein the one or more datasets comprise an amount of labeled data less than a given threshold.",
        "3. The computer-implemented method of claim 1, wherein the one or more deep learning techniques comprise implementing distributed representations of entity record pairs for classification.",
        "4. The computer-implemented method of claim 3, wherein said training the neural network entity resolution model comprises constructing a vector representation of each of the entity record pairs by leveraging word embeddings.",
        "5. The computer-implemented method of claim 1, wherein the trained neural network entity resolution model comprises a recurrent neural network model.",
        "6. The computer-implemented method of claim 1, comprising:\nfine-tuning the neural network entity resolution model by labeling, via manual input, one or more uncertain portions of the processed input data.",
        "7. The computer-implemented method of claim 1, comprising:\ngenerating the first entity resolution model by training, via one or more deep learning techniques, a neural network model with labeled input data.",
        "8. The computer-implemented method of claim 7, wherein the one or more deep learning techniques comprise learning an attribute-agnostic and transferable neural network model from multiple source datasets using dataset adaptation.",
        "9. A computer program product comprising a computer readable storage medium having program instructions embodied therewith, the program instructions executable by a computing device to cause the computing device to:\nprocess input data via a first entity resolution model, wherein the input data comprise labeled input data and unlabeled input data;\nidentify one or more portions of the unlabeled input data to be used in training a neural network entity resolution model, wherein said identifying comprises applying one or more active learning algorithms to the first entity resolution model;\ntrain, using (i) the one or more portions of the unlabeled input data and (ii) one or more deep learning techniques, the neural network entity resolution model; and\nperform one or more entity resolution tasks by applying the trained neural network entity resolution model to one or more datasets.",
        "10. The computer program product of claim 9, wherein the one or more deep learning techniques comprise implementing distributed representations of entity record pairs for classification.",
        "11. The computer program product of claim 10, wherein said training the neural network entity resolution model comprises constructing a vector representation of each of the entity record pairs by leveraging word embeddings.",
        "12. The computer program product of claim 9, wherein the trained neural network entity resolution model comprises a recurrent neural network model.",
        "13. The computer program product of claim 9, wherein the program instructions executable by a computing device further cause the computing device to:\nfine-tune the neural network entity resolution model by labeling, via manual input, one or more uncertain portions of the processed input data.",
        "14. The computer program product of claim 9, wherein the program instructions executable by a computing device further cause the computing device to:\ngenerate the first entity resolution model by training, via one or more deep learning techniques, a neural network model with labeled input data.",
        "15. (canceled)",
        "16. A system comprising:\na memory; and\nat least one processor operably coupled to the memory and configured for:\nprocessing input data via a first entity resolution model, wherein the input data comprise labeled input data and unlabeled input data;\nidentifying one or more portions of the unlabeled input data to be used in training a neural network entity resolution model, wherein said identifying comprises applying one or more active learning algorithms to the first entity resolution model;\ntraining, using (i) the one or more portions of the unlabeled input data and (ii) one or more deep learning techniques, the neural network entity resolution model; and\nperforming one or more entity resolution tasks by applying the trained neural network entity resolution model to one or more datasets.",
        "17. The system of claim 16, wherein the one or more deep learning techniques comprise implementing distributed representations of entity record pairs for classification.",
        "18. A computer-implemented method, the method comprising steps of:\nprocessing input data via a randomly initialized entity resolution model, wherein the input data comprise unlabeled input data;\nidentifying one or more portions of the unlabeled input data to be used in training the randomly initialized entity resolution model, wherein said identifying comprises applying one or more active learning algorithms to the randomly initialized entity resolution model;\ntraining, using (i) the one or more portions of the unlabeled input data and (ii) one or more deep learning techniques, the randomly initialized entity resolution model; and\nperforming one or more entity resolution tasks by applying the trained randomly initialized entity resolution model to one or more datasets;\nwherein the steps are carried out by at least one computing device.",
        "19. The computer-implemented method of claim 18, wherein the one or more deep learning techniques comprise implementing distributed representations of entity record pairs for classification.",
        "20. The computer-implemented method of claim 18, wherein the trained randomly initialized entity resolution model comprises a recurrent neural network model.",
        "21. The computer-implemented method of claim 1, wherein software implementing the method is provided as a service in a cloud environment."
    ]
}