{
    "id": "US20080103786",
    "authors": [
        "Liang-Jie Zhang",
        "Abdul Allam",
        "Jia Zhang"
    ],
    "title": "Method and Apparatus for Representing and Configuring Flexible and Extensible Presentation Patterns",
    "date": "2006-10-31 00:00:00",
    "abstract": "Techniques are provided for representing and configuring flexible and extensible presentation patterns based on fine-grained architectural building blocks (ABBs). The techniques include defining ABBs, modeling the ABBs in a uniform manner, and creating at least one template using the ABBs, wherein the at least one template includes at least one of pre-configured static characteristics and user-specified service characteristics. In an embodiment of the invention, an exemplary method for designing and managing fine-grained ABBs can include identifying ABBs to compose an architecture for facilitating presentation and interaction between consumers and other elements in a solution, analyzing the ABBs to monitor computing resources used by individual ABBs, selecting a number of running instances of the ABBs based on (i) requests of a pertinent entity and (ii) available resources, and managing life-cycles of ABBs",
    "sections": [
        {
            "title": "DESCRIPTION",
            "paragraphs": [],
            "subsections": [
                {
                    "title": "FIELD OF THE INVENTION",
                    "paragraphs": [
                        "The present invention generally relates to information technology, and, more particularly, to a method and apparatus for representing and configuring flexible and extensible presentation patterns."
                    ],
                    "subsections": [],
                    "outline_long": [
                        "relate to information technology"
                    ],
                    "num_characters": 196,
                    "outline_medium": [
                        "introduce presentation patterns"
                    ],
                    "outline_short": [
                        "introduce presentation patterns"
                    ]
                },
                {
                    "title": "BACKGROUND OF THE INVENTION",
                    "paragraphs": [
                        "A number of techniques exist to help build presentation modules in a workflow solution. Most of them are technology driven (for example, JavaScipt\u00ae (JavaScript is a registered trademark of Sun Microsystems, Inc.), the Ajax technique, and the Portlet technique) rather than architecture driven. The Ajax technique, for example, provides a non-intrusive content refreshing architecture for Web-based presentations. The Portlet technique, as another example, provides a modularized layout framework to define a presentation interface However, the evolution of underlying technologies may result in the need to change implementations of those existing approaches. As the market-place is increasing and demanding flexibility and speed to market, the technology-dependent existing approaches do not help address these needs. Existing architecture-driven techniques are often represented by the model view control (MVC) approach However, these existing architecture-driven approaches stay at high-level abstraction for presentation structures and do no guide to construct fine-grained architecture.",
                        "Consequently, the existing approaches lack flexibility and extensibility and are unable to reconfigure their architectural building blocks as needed to adapt to changing requirements of a pertinent organization or other entity. The market place is increasing, and demanding flexibility and speed to market. Technology-dependent solutions do not help address this need. Abstract building blocks are better suited to address this growing need",
                        "Therefore, there is a need to overcome the limitations of the existing approaches."
                    ],
                    "subsections": [],
                    "outline_long": [
                        "introduce existing techniques",
                        "limitations of existing approaches",
                        "need for flexibility and speed"
                    ],
                    "num_characters": 1617,
                    "outline_medium": [
                        "limitations of existing approaches"
                    ],
                    "outline_short": [
                        "limitations of existing approaches"
                    ]
                },
                {
                    "title": "SUMMARY OF THE INVENTION",
                    "paragraphs": [
                        "Principles of the present invention provide techniques for representing and configuring flexible and extensible presentation patterns based on fine-grained architectural building blocks (ABBs). An exemplary method (which can be computer-implemented) for representing and configuring flexible and extensible presentation patterns based on fine-grained ABBs, according to one aspect of the invention, can include steps of defining ABBs, modeling the ABBs in a uniform manner, and creating at least one template using the ABBs, wherein the at least one template includes at least one of pre-configured (static) characteristics and user-specified (dynamic) service characteristics.",
                        "In one aspect of the invention, the step of defining ABBs includes defining a consumer ABB and a presentation controller ABB, and can also include defining a presentation ABB, a consumer profile ABB, an access control ABB, a format transformation ABB, a configuration rule ABB, and a cache ABB. Also, in another aspect of the invention, the step of defining ABBs includes dividing responsibilities of a presentation module into sub-responsibility areas, wherein the sub-responsibility areas may include a logical grouping or logical groupings of related cohesive functions, and also wherein the sub-responsibility areas may be treated as ABBs. Furthermore, in another aspect of the invention, the step of defining ABBs includes defining attributes that are associated with an ABB, wherein the attributes include at least one of ABB Identifier (ID), ABB Type, ABB State, ABB Protocol, ABB Input Type and Output Type",
                        "In yet another aspect of the invention, the step of modeling ABBs in a uniform manner includes using a unified framework to model the ABBs. Furthermore, the unified framework may facilitate development of unified interface descriptions for the ABBs. Also, in another aspect of the invention, the step of modeling ABBs in a uniform manner may include defining operations for the ABBs, wherein the operations include at least one of getABBId, get ABBName, getABBLayer, getABBState, getABBProtocol, getABBInputDataType, getABBOuputDataType, getABBIOType, getABBAnnotationURL, getConsumerLayerABBType, and getConsumerType.",
                        "Also, in yet another aspect of the invention, the step of creating at least one template using the ABBs includes pre-configuring static templates using ABBs for specific service scenarios. Furthermore, the step of creating at least one template using the ABBs may include selecting appropriate ABBs based on the user-specified service characteristics, and configuring the appropriate ABBs during run time.",
                        "In an embodiment of the invention, an exemplary method for designing and managing fine-grained ABBs can include identifying ABBs to include in an architecture for facilitating presentation and interaction between consumers and other elements in a solution, analyzing the ABBs to monitor computing resources used by individual ABBs, selecting a number of running instances of the ABBs based on (i) requests of a pertinent entity and (ii) available resources, and managing lifecycles of ABBs. In one aspect of the invention, the step of managing lifecycles of ABBs includes defining presentation architecture templates, selecting a presentation architecture template based on service scenarios, configuring interfaces of the ABBs, applying interaction patterns for the ABBs with other modules, and enabling access control on the ABBs. Also, in another aspect of the invention, an exemplary method for designing and managing fine-grained ABBs can include enabling granularity enablement state management and handling exceptions.",
                        "At least one embodiment of the invention can be implemented in the form of a computer product including a computer usable medium with computer usable program code for performing the method steps indicated. Furthermore, at least one embodiment of the invention can be implemented in the form of an apparatus including a memory and at least one processor that is coupled to the memory and operative to perform exemplary method steps.",
                        "These and other objects, features and advantages of the present invention will become apparent from the following detailed description of illustrative embodiments thereof, which is to be read in connection with the accompanying drawings."
                    ],
                    "subsections": [],
                    "outline_long": [
                        "introduce fine-grained ABBs",
                        "define ABBs",
                        "model ABBs uniformly",
                        "create templates using ABBs",
                        "define attributes of ABBs",
                        "define operations for ABBs",
                        "create templates with user-specified characteristics",
                        "manage lifecycles of ABBs"
                    ],
                    "num_characters": 4319,
                    "outline_medium": [
                        "define fine-grained ABBs",
                        "model ABBs uniformly",
                        "create templates using ABBs",
                        "manage ABB lifecycles"
                    ],
                    "outline_short": [
                        "define fine-grained ABBs",
                        "create templates using ABBs"
                    ]
                },
                {
                    "title": "DETAILED DESCRIPTION OF PREFERRED EMBODIMENTS",
                    "paragraphs": [
                        "One or more embodiments of the present invention provide a unified representation and definition of architectural building blocks (ABBs) and an associated configuration framework to support the adaptation capability of the presentation module in a workflow solution. This configuration capability is effective because the ABBs are fine-grained. The fine-grained ABBs can be configured based on specified rules on top of a novel configuration framework providing a set of pre-defined architectural patterns. Moreover, the ABBs are based on service scenarios instead of technologies, therefore facilitating more effective alignment of needs of a pertinent organization or other entity with IT environments Also, the inventive techniques create opportunities to offer new services around Service Enablement based on abstract building blocks that are at a higher level of abstraction than concrete service components.",
                        "FIG. 1 shows a block diagram illustrating exemplary architectural building blocks (ABBs), according to one aspect of the invention. Since the term \u201clayer\u201d is often used to represent the same concept, the terms \u201cmodule\u201d and \u201clayer\u201d are used interchangeably herein. Also, as used herein, \u201cworkflow process\u201d is intended to encompass a process for a set of inter-connected activities toward a goal at any level of granularity. As shown in FIG. 1, one example of a service-oriented architecture (SOA) solution system may include architectural layers including a consumer layer 102, a workflow process layer 104, a service layer 106, an integration layer 108, a Quality of Service (QoS) layer 110, a data layer 112, and a governance layer 114. Consumer layer 102, also referred to as consumer module, may include components in eight categories of Architectural Building Blocks (ABBs) including consumer 116, presentation (view) 118, presentation controller 120, consumer profile 128, access control 124, format transformation 122, configuration rule 130, and cache 126. It should be noted that the invention is not limited to the precise exemplary embodiments detailed above, and that various other changes and modifications may be made by one skilled in the art.",
                        "The consumer layer 102 typically interacts with other layers in a service-oriented architecture (SOA) solution, such as, for example, a Workflow Process layer 104 that composes and choreographs service components, (2) a Service layer 106 that manages workflow services, an Integration layer 108 that mediates, routes, and transports service requests from service consumers to proper service providers, a QoS layer 110 that provides QoS management in various aspects, a data layer 112 that provides unified representation and enablement frameworks integrating with domain-specific data architecture, and a governance layer 114 that provides design guidance to ensure proper design of the SOA solution.",
                        "A consumer building block 116 represents an external user of the presentation module. It can be, for example, a program or an individual who requests a service. A presentation (view) building block 118 is responsible for obtaining an input via query from a consumer and providing or displaying a response to the consumer In other words, a presentation (view) building block 118 is responsible for communicating to and from the consumer A presentation controller building block 120 manages the navigation logic for consumer interactions. For example, a presentation controller building block 120 may interact with a service in the service layer 106 or a process in the workflow process layer 104. Meanwhile, a presentation controller building block 120 interacts with other ABBs within the Consumer layer 102, such as, for example, customer profile 128 to control navigation based on the consumer profile, access control 124 to determine what content can be presented, and a format transformation 122 to translate to Query data formats required by the integration layer 108 and to convert a response or responses from the integration layer 108 to an appropriate consumer response format",
                        "A consumer profile building block 128 is responsible for getting customer-specific information (enabled through the data layer 112) to be used by the presentation controller 120 for navigation and content presentation purposes. An access control building block 124 provides authentication and/or authorization capabilities (enabled through the security layer) to be used by the presentation controller 120 to allow and/or prevent the contents to be presented to the consumer. A format transformation building block 122 is responsible for translation of Query content format required by the integration layer 108, and for converting content returned from the integration layer 108 to a consumer response format. A format transformation building block 122 also can be used for transforming content (for example, a message payload can be translated using extensible style-sheet language transformation (XSLT) to a required extensible markup language (XML) format) in the invocation messages to a service or a process. A format transformation building block 122 can typically support multiple XSLTs and other transformation mechanisms It should be noted that this transformation addresses only the changing of content formats for presentation, for example, from XML to hypertext markup language (HTML) or from XML to VoiceXML (VXML). It does not handle the transformation of actual content, which is the responsibility of either the workflow process layer 104 or the service layer 106 (for example, converting to industry-specific message format)",
                        "A configuration rule building block 130 is responsible for hosting rules that dictate how the ABBs can be configured based on consumer request scenarios. This unit enables presentation configuration on demand. It also allows the use of only appropriate ABBs. It should be noted that this configuration capability will not be effective if the ABBs are coarse-grained, as it will reduce flexibility. On the other hand, if ABBs are fine-grained, they will be more flexible to be configured based on specified rules. This configuration can be handled, for example, in the following two ways. The first way is through template-based static configuration, where a user can select a specific template based on the corresponding service request scenario The system will select all the rules associated with this template and configure the ABBs to support the rules. This approach requires that scenario templates be created and stored in a repository to be selected when needed. The second way is through dynamic template creation, where a user selects certain characteristics and the system determines the appropriate rules and configures one or more templates using relevant ABBs at run time. For example, a user may specify the following two characteristics: data is static (that is, does not change during an interaction) and the user should not be challenged multiple times. The first characteristic implies that it may be advantageous to use a cache ABB. The second characteristic implies the necessity of using a proper security token mechanism. These characteristics will be used during the run time to configure appropriate ABBs.",
                        "A cache building block 126 is responsible for temporarily storing consumer interaction-related data to enhance system performance. These data typically are maintained for the duration of the entire interaction. An example of such a kind of data is a customer profile. The cache building block 126 will increase performance as it minimizes interactions with the Data layer 112.",
                        "FIG. 2 is a block diagram illustrating an exemplary hierarchical representation of ABBs, according to another aspect of the invention. In this section, we will illustrate how to model ABBs. We provide a standard, uniform, flexible, and extensible way to model traceable information that can be carried by ABBs. Instead of creating another new description method, we apply the Web Services Resource Framework (WSRF) to define ABBs as universal resources. Initiated by IBM, Computer Associates, Oracle, and other collaborators, WSRF (http://www-128ibmcom/developerworks/library/specification/ws-resource/) defines a system of specifications for managing and accessing stateful resources using Web services. To date WSRF has been extensively used for enabling stateful Web services. In short, WSRF is a reputable XML-based presentation method to capture resources. WSRF enables access to internal states of a resource via Web service interfaces, for example, data values that can persist across and evolve as a result Web service interactions. Before adopting WSRF, we also examined other alternatives, such as resource definition framework (RDF). (See the World Wide Web Consortium's \u201cRDF/XML Syntax Specification\u201d available at http://www.w3org/TR/rdf-syntax-grammar/). As a general-purpose language for presenting information on the Internet, RDF focuses on describing meta-data of any generic resource. Compared to RDF, WSRF utilizes web services technology to expose internal state information of a resource, which better matches our goal of modeling stateful ABBs. However, while WSRF appears preferable for modeling stateful ABBs, one or more embodiments of the invention may employ RDF, or other appropriate language.",
                        "In order to model ABBs with reusability, flexibility, and extensibility, we define ABBs in a hierarchical manner. As shown in FIG. 2, various types of ABBs can be organized into a hierarchical inheritance tree-like structure. The root (that is, module 0) of the tree represents the generic ABB 202. Its direct child level (that is, module 1) represents various layers (for example, module-ABB) in a service-oriented architecture (SOA) solution. For example, an SOA solution may identify several modules, such as consumer module, workflow process module, as well as other modules. A dedicated ABB type is constructed to represent each module, such as, for example, ConsumerLayerABB 204, WorkflowProcessLayerABB 206, and others 208. For each module, identified ABB types (for example, module 2) extend from the module-ABB with specific features. For example, as shown in FIG. 2, the ConsumerLayerABB 204 is extended into 8 ABBs: ConsumerABB 210, PresentationABB 212, PresentationControllerABB 222, ConsumerProfileABB 214, AccessControlABB 216, FormatTransformationABB 224, CacheABB 218, and ConfigurationRuleABB 220.",
                        "With the organized hierarchy of ABBs, we can model the ABBs in an incremental manner. In more detail, we can first model the generic ABB. Then, we can model the module-ABBs by leveraging the generic ABB. Afterwards, we can leverage a module-ABB to model its extended ABBs",
                        "FIGS. 3A and 3B (as a whole) depict an exemplary textual representation of a segment 300 of an ABB property definition in XML Schema, according to another aspect of the invention. FIGS. 3A and 3B illustrate relative segments of the resource properties document definitions for a resource component (that is, ABBResource) As shown in FIGS. 3A and 3B, the Web Services Resource (WS-Resource) properties specification document is defined using XML Schema. By way of example, the state of an ABBResource depicted in FIGS. 3A and 3B contains nine elements: (1) ABBId, (2) ABBName, (3) ABBLayer, (4) ABBState, (5) ABBProtocol, (6) ABBInputDataType, (7) ABBOutputDataType, (8) ABBIOType, and (9) ABBAnnotationSchemaURL. Each element is of an XML Schema Definition (XSD) type, either a simple XSD data type or a user-defined data type.",
                        "ABBId denotes the unique identifier of the instance of ABB, with XSD type String (xsd:string) ABBName denotes the descriptive name of the instance of ABB, with XSD type String (xsd:string). ABBLayer denotes to which module the defined ABB belongs, with defined type ABBLayerEnumeration containing nine predefined values (ConsumerLayer, WorkflowProcessLayer, ServiceLayer, ServiceComponentLayer, OperationalSystemLayer, IntegrationLayer, QoSLayer, DataArchitectureLayer, and GovernanceLayer). ABBState denotes the life-cycle state of the ABB instance, with defined type abbStateEnumeration containing five predefined values (Created, Ready, Running, Pending, and Destroyed). ABBProtocol denotes the protocol that the ABB instance supports, with defined type abbProtocolEnumeration containing two predefined values (HTTP and SMTP). ABBInputDataType denotes the input data type that the ABB instance supports, with defined type dataTypeEnumeration containing four predefined values (Binary, PlainText, XML, and HTML) ABBOutputDataType denotes the output data type that the ABB instance supports, with defined type dataTypeEnumeration containing four predefined values (Binary, PlainText, XML, and HTML). ABBIOType denotes the input and/or output type supported by the ABB instance, with defined type ioTypeEnumeration containing three predefined values (InputOnly, OutputOnly, and InputOutput). ABBAnnotationSchemaURL denotes the schema file that can be used to interpret any annotations associated with the ABB instance, with XSD type String (xsd:string).",
                        "FIG. 4 is an exemplary textual representation 400 of ABB properties exposed by WSDL operations, according to another aspect of the invention. In order for an ABB user to know that the \u201cABBResource\u201d defines the WS-Resource properties document associated with the Web service, the WS-Resource properties document declaration is associated with the WSDL portType definition in the WSDL definition of the Web service interface, through the use of a standard attribute resourceProperties. As shown in FIG. 4, the portType, with the associated resource properties document, defines the type of the WS-Resource. The portType \u201cABBPortType in FIG. 4 defines a set of nine operations to allow users to access the state information of the defined ABBResource (getABBid, getABBName, getABBLayer, getABBState, getABBProtocol, getABBInputDataType, getABBOutputDataType, getABBIOType, and getABBAnnotationURL)",
                        "FIG. 5 is a block diagram 500 illustrating an exemplary textual representation of a segment of consumer layer ABB property definition in XML Schema, according to another aspect of the invention. After the resource properties of the generic ABB are defined, the resource properties of its extended sub-ABBs (for example, module-ABBs) can be defined by leveraging those of the generic ABB, and adding specific resource properties. FIG. 5 shows the resource properties of ConsumerLayerABB. Because ConsumerLayerABB is a subclass of the genetic ABB, it automatically inherits all resource properties defined in the genetic ABB. As shown in FIG. 5, the state of a ConsumerLayerABB contains two elements: ABB and an added element ConsumerLayerABBType, which is with defined type consumerLayerABBEnumeration containing eight predefined values (Consumer, Presentation, PresentationControl, ConfigurationRule, ConsumerProfile, Cache, AccessControl, and FormatTransformation)",
                        "FIG. 6 is an exemplary textual representation 600 of consumer layer ABB properties exposed by WSDL operations, according to another aspect of the invention The WS-Resource properties document declaration for ConsumerLayerABB is associated with the WSDL portType definition for a user to access the state information of the stateful resource As shown in FIG. 6, the portType \u201cConsumerLayerABBPortType\u201d defines a set of 10 operations to allow users to access the state information of the defined stateful ConsumerLayerABBResource (getABBId, getABBName, getABBLayer, getABBState, getABBProtocol, getABBInputDataType, getABBOutputDataType, getABBIOType, getABBAnnotationURL, and getconsumerLayerABBType). Note that the operation getConsumerLayerABBType allows a user to obtain the newly added property ConsumerLayerABBType defined in the ConsumerLayerABB",
                        "Similarly, the resource properties of one of the third-module ABBs ConsumerABB can be defined by leveraging those of ConsumerLayerABB and adding specific resource properties. FIG. 7 is an exemplary textual representation of a segment 700 of consumer ABB property definition in XML Schema, according to another aspect of the invention. FIG. 7 shows the resource properties of ConsumerABB. Because ConsumerABB is a subclass of ConsumerLayerABB, it automatically inherits all resource properties defined in ConsumerLayerABB. As shown in FIG. 7, the state of a ConsumerABB contains two elements. ConsumerLayerABB and an added element ConsumerType that denotes the type of the consumer, whether it is an individual using a desktop computer as a browser, an individual using either a Personal Digital Assistant (PDA) or a wireless phone as a browser; or a program. This property may be used to decide the presentation format, either, for example, to generate HTML pages, or generate Wireless Markup Language (WML) documents, or generate plain text files such as XML documents. The ConsumerType property may be used with defined type consumerTypeEnumeration containing, for example, three predefined values (Desktop, Personal Digital Assistant (PDA)/Wireless, and Program). It should be noted that the invention is not limited to the precise exemplary embodiments detailed above, and that various other changes and modifications may be made by one skilled in the art.",
                        "Again, the WS-Resource properties document declaration for ConsumerABB is associated with the WSDL port Type definition for user to access the state information of the stateful resource. FIG. 8 is an exemplary textual representation 800 of consumer ABB properties exposed by WSDL operations, according to another aspect of the invention. As shown in FIG. 8, the portType \u201cConsumerABBPortType\u201d defines a set of 11 operations to allow users to access the state information of the defined stateful ConsumerABBResource (getABBId, getABBName, getABBLayer, getABBState, getABBProtocol, getABBInputDataType, getABBOutputDataType, getABBIOType, getABBAnnotationURL, getConsumerLayerABBType, and getConsumerType). Note that the operation getConsumerType allows a user to obtain the newly added property ConsumeType defined in the ConsumerABB.",
                        "As described above, we set forth in detail how to formally model ABBs, using ad hoc industry standard WSRF, as universal resources, in combinations with the teachings herein of one or more embodiments of the invention. As shown in the examples above, WSRF can be envisioned as a combination of Web Services Description Language (WSDL) with XML Schema. Therefore, an ABB can be formally exposed, for example, by its operations (using WSDL), together with its semantic structure (using XML Schema). In other words, the interface of each ABB is defined by its data structure and operations, in a standardized manner. As a result, any ABBs can easily interact and communicate with each other. It should be noted that ABBs can be modeled using other technologies It should be appreciated by one skilled in the art that WSRF is simply used as an example technology that can be utilized to model ABBs.",
                        "The following paragraphs describe the configuration framework of ABBs for new services scenarios. The configuration capability will not be very effective if the ABBs are coarse-grained, as this will reduce the flexibility. On the other hand, if ABBs are fine-grained, as shown in FIG. 9, they will become more flexible and hence can be configured based on specified rules. The configuration can be handled, for example, in two ways, as will be described in the discussions of FIG. 9 and FIG. 10.",
                        "FIG. 9 is a block diagram illustrating an exemplary system that can execute an exemplary method for creating a static template, according to another aspect of the invention In the template-based configuration approach, a user 902 can select a specific template based on the service request scenario. The system will select all the rules associated with this template and configure the ABBs to support the rules This will require scenario templates to be created and stored in a repository 904 to be selected when a user needs them. For example, we can have a template to support an interactive voice response (IVR) system, another one to support a personal digital assistant (PDA), and a third one to support a Web portal (a Web site providing personalized capabilities to a user), as each template has its own characteristics and rules associated with it Depending on the Consumer layer user, an appropriate template can be selected In FIG. 9, user 902 selects IVR template 906 from the Template repository 904. Each of these templates comes with preconfigured ABBs. As depicted in FIG. 9, an IVR template 906 may include components or ABBs such as cache 908, access control 910, and IVR transformation 912 If a user desires flexibility or customization, then it may be advantageous to configure dynamic templates, as detailed below.",
                        "FIG. 10 is a block diagram illustrating an exemplary system that can execute an exemplary method for creating a dynamic template, according to another aspect of the invention. In dynamic template creation, a user 1002 will select certain characteristics and the system will determine the appropriate rules and select the relevant and/or appropriate ABBs at run time from a template repository 1006 For example, a user 1002 may specify two characteristics, such as \u201cdata are static\u201d (that is, data do not change during an interaction), implying a caching ABB will be needed, and that the user should not be challenged multiple times, which would imply use of a proper security token mechanism, and other measures. These characteristics will be used during the run time to configure appropriate ABBs In FIG. 10, by way of example, a user 1002 specifies that data changes once a day, and based on this input the configuration rules 1004 choose a caching ABB. Similarly, since the user has specified that the requesting application is PDA-based, the template gets populated with PDA transformation ABB. The request for an appropriate template is directed to a template repository 1006, which includes the template with the appropriate ABBs 1008. For completeness, an example of an appropriate template is depicted in FIG. 10 comprising components or ABBs including cache 1010, access control 1012, and PDA transformation 1014. If the user does not need to be challenged multiple times, then we would need an appropriate access control mechanism that would use, say, a security token.",
                        "Based on the configuration framework described above, an architectural pattern enablement framework can be created. The fine-grained ABBs will provide the flexibility to create architectural patterns based on different service scenarios.",
                        "Described below, we designate an exemplary set of architectural decisions to support services enablement of identification and management of ABBs for the presentation module in a software solution. These architectural decisions document assessments about various aspects of the architecture including the structure of the system, the provision and allocation of functions, the contextual fitness of the system, and adherence to standards. Enabling the architecture design services through defining architectural decisions for the presentation module in a solution is yet another aspect of the invention.",
                        "When designing an exemplary consumer module, an architect needs to make critical architectural decisions toward an SOA solution This section describes an exemplary set of 16 typical architectural decisions regarding the Consumer module in a standard format, as summarized in Table 1. It should be noted that a specific application may require further architectural decisions. The descriptions here are used as templates and examples, and will enable a skilled artisan to extract further decision points.",
                        "FIG. 11 shows a flow diagram illustrating a method for representing and configuring flexible and extensible presentation patterns based on fine-grained architectural building blocks (ABBs), according to one embodiment of the invention. Step 1102 includes defining ABBs. Step 1104 includes modeling the ABBs in a uniform manner. Step 1106 includes creating at least one template using the ABBs, wherein the at least one template includes at least one of pre-configured static characteristics and user-specified service characteristics.",
                        "Defining ABBs 1102 may include, by way of example and not limitation, defining the following ABBs: consumer, presentation (view), presentation controller, consumer profile, access control, format transformation, configuration rule, and cache Defining ABBs 1102 may further include dividing the responsibilities of presentation module into sub-responsibility areas Sub-responsibility areas may, for example, have a logical grouping of related cohesive functions, and the sub-responsibility areas also may be treated as ABBs. Also, an ABB definition may include defining attributes that are associated with an ABB. Attributes may, as an example, include at least one of an identifier (ID) attribute (for example, ABB Id), a type attribute (for example, ABB Type), a state attribute (for example, ABB State), a protocol attribute (for example, ABB Protocol), and an input type and output type attribute (for example, ABB Input Type and Output Type)",
                        "Modeling ABBs in a uniform manner 1104 may include using a unified framework to model each of the ABBS. The unified framework may facilitate development of unified interface descriptions for each ABB, thus allowing ABBs to be discovered and composed in a standardized manner as the interface descriptions are based on industry standards. Modeling ABBs in a uniform manner 1104 may also include defining operations for ABBs including, as a way of example and not limitation, at least one of an identification operation (for example, getABBId), a name operation (for example, getABBName), a layer operation (for example, getABBLayer), a state operation (for example, getABBState), a protocol operation (for example getABBProtocol), an input data type operation (for example, getABBInputDataType), an output data type operation (for example, getABBOutputDataType), an input and/or output type operation (for example, getABBIOType), an annotation uniform resource locator (URL) operation (for example, getABBAnnotationURL), a consumer layer type operation (for example, getConsumerLayerABBType), and a consumer type operation (for example, getConsumerType).",
                        "Creating at least one template using ABBs 1106 may include pre-configuring static templates using ABBS for specific service scenarios. The ABB interface and attributes facilitate creation of the at least one template. A user makes selections pre-configured templates based on a specific service scenario. This aspect of the invention is also referred to as static template configuration. Initially, there could be a template by Consumer Type. Later on, different variations within a specific consumer type can be added.",
                        "Creating at least one template using ABBs 1006 may also include selecting appropriate ABBs based on user-specified characteristics, for example, ABB attributes. Appropriate ABBs are selected, based on the attributes, and configured during run time This aspect of the invention, also referred to as dynamic template configuration, is flexible and can support different variations which will be configured during run time",
                        "FIG. 12 shows a flow diagram illustrating a method for designing and managing fine-grained ABBs, according to one embodiment of the invention. Step 1202 includes identifying ABBs to compose an architecture for facilitating presentation and interaction between consumers and other elements in a solution. Step 1204 includes analyzing the ABBs to monitor computing resources used by individual ABBs. Step 1206 includes selecting a number running instances the ABBs based on (i) requests a pertinent entity and (ii) available resources. Step 1208 includes managing life-cycles of ABBs. A method for designing and managing fine-grained ABBs, according to one embodiment of the invention, may optionally include step 1210, enabling granularity of state management. The method may also optionally include step 1212, handling exceptions.",
                        "Managing life-cycles of ABBs 1208 may include defining presentation architecture templates including interaction patterns of ABBs, selecting presentation architecture templates based on one or more services scenarios, configuring the interfaces of ABBs, applying interaction patterns for ABBs with other modules, and enabling access control on ABBs",
                        "A variety of techniques, utilizing dedicated hardware, general purpose processors, software, or a combination of the foregoing may be employed to implement the present invention. At least one embodiment of the invention can be implemented in the form of a computer product including a computer usable medium with computer usable program code for performing the method steps indicated. Furthermore, at least one embodiment of the invention can be implemented in the form of an apparatus including a memory and at least one processor that is coupled to the memory and operative to perform exemplary method steps.",
                        "At present, it is believed that the preferred implementation will make substantial use software running on a general-purpose computer or workstation. With reference to FIG. 13, such an implementation might employ, for example, a processor 1302, a memory 1304, and an input and/or output interface formed, for example, by a display 1306 and a keyboard 1308. The term \u201cprocessor\u201d as used herein is intended to include any processing device, such as, for example, one that includes a CPU (central processing unit) and/or other forms of processing circuitry. Further, the term \u201cprocessor\u201d may refer to more than one individual processor. The term \u201cmemory\u201d is intended to include memory associated with a processor or CPU, such as, for example, RAM (random access memory), ROM (read only memory), a fixed memory device (for example, hard drive), a removable memory device (for example, diskette), a flash memory and the like. In addition, the phrase \u201cinput and/or output interface\u201d as used herein, is intended to include, for example, one or more mechanisms for inputting data to the processing unit (for example, mouse), and one or more mechanisms for providing results associated with the processing unit (for example, printer). The processor 1302, memory 1304, and input and/or output interface such as display 1306 and keyboard 1308 can be interconnected, for example, via bus 1310 as part of a data processing unit 1312. Suitable interconnections, for example via bus 1310, can also be provided to a network interface 1314, such as a network card, which can be provided to interface with a computer network, and to a media interface 1316, such as a diskette or CD-ROM drive, which can be provided to interface with media 1318",
                        "Accordingly, computer software including instructions or code for performing the methodologies of the invention, as described herein, may be stored in one or more of the associated memory devices (for example, ROM, fixed or removable memory) and, when ready to be utilized, loaded in part or in whole (for example, into RAM) and executed by a CPU. Such software could include, but is not limited to, firmware, resident software, microcode, and the like.",
                        "Furthermore, the invention can take the form of a computer program product accessible from a computer-usable or computer-readable medium (for example, media 1318) providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description, a computer usable or computer readable medium can be any apparatus for use by or in connection with the instruction execution system, apparatus, or device.",
                        "The medium can be an electronic, magnetic, optical, electromagnetic, infrared, or semiconductor system (or apparatus or device) or a propagation medium. Examples of a computer-readable medium include a semiconductor or solid-state memory (for example, memory 1304), magnetic tape, a removable computer diskette (for example, media 1318), a random access memory (RAM), a read-only memory (ROM), a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk-read only memory (CD-ROM), compact disk-read and/or write (CD-R/W) and DVD.",
                        "A data processing system suitable for storing and/or executing program code will include at least one processor 1302 coupled directly or, indirectly to memory elements 1304 though a system bus 1310. The memory elements can include local memory employed during actual execution of the program code, bulk storage, and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution",
                        "Input and/or output or I/O devices (including but not limited to keyboards 1308, displays 1306, pointing devices, and the like) can be coupled to the system either directly (such as via bus 1310) or through intervening I/O controllers (omitted for clarity).",
                        "Network adapters such as network interface 1314 may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems, cable modem and Ethernet cards are just a few of the currently available types of network adapters",
                        "In any case, it should be understood that the components illustrated herein may be implemented in various forms of hardware, software, or combinations thereof, for example, application specific integrated circuit(s) (ASICS), functional circuitry, one or more appropriately programmed general purpose digital computers with associated memory, and the like Given the teachings of the invention provided herein, one of ordinary skill in the related art will be able to contemplate other implementations of the components of the invention",
                        "At least one embodiment of the invention may provide one or more beneficial effects, such as, for example, supporting adaptation capability of a presentation module.",
                        "Although illustrative embodiments of the present invention have been described herein with reference to the accompanying drawings, it is to be understood that the invention is not limited to those precise embodiments, and that various other changes and modifications may be made by one skilled in the art without departing from the scope or spirit the invention."
                    ],
                    "subsections": [],
                    "outline_long": [
                        "introduce unified representation and definition of architectural building blocks (ABBs)",
                        "describe configuration framework to support adaptation capability of presentation module",
                        "illustrate fine-grained ABBs and their configuration based on specified rules",
                        "show service-oriented architecture (SOA) solution system with various layers",
                        "define consumer layer and its components",
                        "describe consumer building block and its role",
                        "explain presentation (view) building block and its responsibilities",
                        "detail presentation controller building block and its interactions",
                        "describe consumer profile building block and its role",
                        "explain access control building block and its capabilities",
                        "detail format transformation building block and its responsibilities",
                        "describe configuration rule building block and its role",
                        "explain cache building block and its benefits",
                        "illustrate hierarchical representation of ABBs",
                        "model ABBs using Web Services Resource Framework (WSRF)",
                        "define ABBs in a hierarchical manner",
                        "organize ABBs into a hierarchical inheritance tree-like structure",
                        "model generic ABB",
                        "model module-ABBs by leveraging generic ABB",
                        "model extended ABBs by leveraging module-ABBs",
                        "illustrate textual representation of ABB property definition in XML Schema",
                        "define ABBId and its type",
                        "define ABBName and its type",
                        "define ABBLayer and its type",
                        "define ABBState and its type",
                        "define ABBProtocol and its type",
                        "define ABBInputDataType and its type",
                        "define ABBOutputDataType and its type",
                        "define ABBIOType and its type",
                        "define ABBAnnotationSchemaURL and its type",
                        "illustrate textual representation of ABB properties exposed by WSDL operations",
                        "define portType and its associated resource properties document",
                        "illustrate textual representation of consumer layer ABB property definition in XML Schema",
                        "define ConsumerLayerABB and its resource properties",
                        "illustrate textual representation of consumer layer ABB properties exposed by WSDL operations",
                        "define ConsumerLayerABBPortType and its operations",
                        "illustrate textual representation of consumer ABB property definition in XML Schema",
                        "define ConsumerABB and its resource properties",
                        "illustrate textual representation of consumer ABB properties exposed by WSDL operations",
                        "define ConsumerABBPortType and its operations",
                        "describe configuration framework of ABBs for new services scenarios",
                        "illustrate template-based configuration approach",
                        "illustrate dynamic template creation approach",
                        "describe benefits of fine-grained ABBs in configuration framework",
                        "introduce architectural pattern enablement framework",
                        "describe fine-grained ABBs",
                        "motivate services enablement",
                        "describe architectural decisions",
                        "introduce consumer module",
                        "describe architectural decisions for consumer module",
                        "summarize architectural decisions",
                        "introduce method for representing and configuring presentation patterns",
                        "define ABBs",
                        "model ABBs in a uniform manner",
                        "create templates using ABBs",
                        "describe static template configuration",
                        "describe dynamic template configuration",
                        "introduce method for designing and managing fine-grained ABBs",
                        "identify ABBs",
                        "analyze ABBs",
                        "select running instances of ABBs",
                        "manage life-cycles of ABBs",
                        "enable granularity of state management",
                        "handle exceptions",
                        "describe implementation of the invention",
                        "describe computer product",
                        "describe apparatus",
                        "conclude invention"
                    ],
                    "num_characters": 34550,
                    "outline_medium": [
                        "introduce unified representation and definition of architectural building blocks (ABBs)",
                        "describe configuration framework to support adaptation capability of presentation module",
                        "illustrate fine-grained ABBs and their configuration based on specified rules",
                        "define service-oriented architecture (SOA) solution system",
                        "describe consumer layer and its components",
                        "explain presentation (view) building block",
                        "describe presentation controller building block",
                        "explain consumer profile building block",
                        "describe access control building block",
                        "explain format transformation building block",
                        "describe configuration rule building block",
                        "explain cache building block",
                        "illustrate hierarchical representation of ABBs",
                        "describe modeling ABBs using Web Services Resource Framework (WSRF)",
                        "explain defining ABBs in a hierarchical manner",
                        "illustrate textual representation of ABB property definition in XML Schema",
                        "describe exposing ABB properties through WSDL operations",
                        "illustrate textual representation of consumer layer ABB property definition in XML Schema",
                        "describe exposing consumer layer ABB properties through WSDL operations",
                        "illustrate textual representation of consumer ABB property definition in XML Schema",
                        "describe exposing consumer ABB properties through WSDL operations",
                        "describe configuration framework of ABBs for new services scenarios",
                        "define architectural pattern enablement framework",
                        "describe architectural decisions for presentation module",
                        "introduce flow diagram for representing and configuring presentation patterns",
                        "define ABBs and their attributes",
                        "model ABBs in a uniform manner",
                        "create templates using ABBs",
                        "illustrate method for designing and managing fine-grained ABBs",
                        "manage life-cycles of ABBs",
                        "describe implementation of the invention",
                        "illustrate hardware and software components",
                        "describe computer program product and computer-readable medium",
                        "discuss benefits and scope of the invention"
                    ],
                    "outline_short": [
                        "introduce unified representation and definition of architectural building blocks (ABBs)",
                        "describe configuration framework to support adaptation capability of presentation module",
                        "illustrate exemplary architectural building blocks (ABBs) in a block diagram",
                        "define consumer building block and its responsibilities",
                        "describe presentation (view) building block and its responsibilities",
                        "illustrate hierarchical representation of ABBs",
                        "model ABBs using Web Services Resource Framework (WSRF)",
                        "define ABB properties in XML Schema",
                        "expose ABB properties through WSDL operations",
                        "describe configuration framework for new services scenarios",
                        "illustrate template-based and dynamic template creation approaches",
                        "define architectural pattern enablement framework",
                        "describe architectural decisions for presentation module",
                        "illustrate method for representing and configuring presentation patterns",
                        "describe method for designing and managing fine-grained ABBs",
                        "outline implementation of the invention",
                        "discuss variations and scope of the invention"
                    ]
                }
            ],
            "outline_long": [],
            "num_characters": 0,
            "outline_medium": [],
            "outline_short": []
        }
    ],
    "claims": [
        "1. A method for representing and configuring flexible and extensible presentation patterns based on fine-grained architectural building blocks (ABBs), comprising the steps of:\ndefining ABBs;\nmodeling said ABBs in a uniform manner; and\ncreating at least one template using said ABBs, wherein said at least one template comprises at least one of pre-configured static characteristics and user-specified service characteristics",
        "2. The method of claim 1, wherein the step of defining ABBs comprises the step of defining a consumer ABB and a presentation controller ABB.",
        "3. The method of claim 1, wherein the step of defining ABBs comprises the step of defining a presentation ABB, a consumer profile ABB, an access control ABB, a format transformation ABB, a configuration rule ABB, and a cache ABB.",
        "4. The method of claim 1, wherein the step of defining ABBs comprises the step of dividing responsibilities of a presentation module into sub-responsibility areas.",
        "5. The method of claim 4, wherein:\nsaid sub-responsibility areas comprise logical grouping of related cohesive functions; and\nsaid sub-responsibility areas are treated as ABBs",
        "6. The method of claim 1, wherein the step of defining ABBs comprises the step of defining attributes that are associated with an ABB, wherein said attributes comprise at least one of an identifier (ID) attribute, a type attribute, a state attribute, a protocol attribute, an input type and output type attribute.",
        "7. The method of claim 1, wherein the step of modeling ABBs in a uniform manner comprises the step of using a unified framework to model said ABBs.",
        "8. The method of claim 7, wherein said unified framework facilitates development of unified interface descriptions for said ABBs.",
        "9. The method of claim 1, wherein the step of modeling ABBs in a uniform manner comprises the step of defining operations for said ABBs, wherein said operations comprise at least one of an identification operation, a name operation, a layer operation, a state operation, a protocol operation, an input data type operation, an output data type operation, an input and/or output type operation, an annotation uniform resource locator (URL) operation, a consumer layer type operation, and a consumer type operation.",
        "10. The method of claim 1, wherein the step of creating at least one template comprises the step of pre-configuring static templates using ABBs for specific service scenarios.",
        "11. The method of claim 1, wherein the step of creating at least one template comprises the steps of:\nselecting appropriate ABBs based on said user-specified service characteristics; and\nconfiguring said appropriate ABBs during run time.",
        "12. A method for designing and managing fine-grained architectural building blocks (ABBs), comprising the steps of:\nidentifying ABBs to compose an architecture for facilitating presentation and interaction between consumers and other elements in a solution;\nanalyzing said ABBs to monitor computing resources used by individual ABBs;\nselecting a number of running instances of said ABBs based on (i) requests of a pertinent entity and (ii) available resources; and\nmanaging lifecycles of ABBs.",
        "13. The method of claim 12, wherein the step of managing lifecycles of ABBs comprises the steps of:\ndefining presentation architecture templates;\nselecting a presentation architecture template based on services scenarios;\nconfiguring interfaces of said ABBs;\napplying interaction patterns for said ABBs with other modules; and\nenabling access control on said ABBs.",
        "14. The method of claim 12, further comprising the steps of:\nenabling granularity enablement of state management; and\nhandling exceptions.",
        "15. An apparatus for representing and configuring flexible and extensible presentation patterns based on fine-grained architectural building blocks (ABBs), comprising:\na memory; and\nat least one processor coupled to said memory and operative to:\ndefine ABBs;\nmodel said ABBs in a uniform manner; and\ncreate at least one template using said ABBs, wherein said at least one template comprises at least one of pre-configured static characteristics and user-specified service characteristics.",
        "16. The apparatus of claim 15, wherein the at least one processor is operable to define ABBs by defining a consumer ABB and a presentation controller ABB.",
        "17. The apparatus of claim 15, wherein the at least one processor is operable to define ABBs by defining a presentation ABB, a consumer profile ABB, an access control ABB, a format transformation ABB, a configuration rule ABB, and a cache ABB",
        "18. The apparatus claim 15, wherein the at least one processor is operable to define ABBs by dividing responsibilities of a presentation module into sub-responsibility areas.",
        "19. The apparatus of claim 18, wherein:\nsaid sub-responsibility areas comprise logical grouping of related cohesive functions; and\nsaid sub-responsibility areas are treated as ABBs.",
        "20. The apparatus claim 15, wherein the at least one processor is operable to model ABBs in a uniform manner by using a unified framework to model said ABBs",
        "21. The apparatus of claim 20, wherein said unified framework facilitates development unified interface descriptions for said ABBs.",
        "22. The apparatus of claim 15, wherein the at least one processor is operable to create at least one template comprises pre-configuring static templates by using ABBs for specific service scenarios.",
        "23. The apparatus of claim 15, wherein the at least one processor is operable to create at least one template by:\nselecting appropriate ABBs based on said user-specified service characteristics; and\nconfiguring said appropriate ABBs during run time.",
        "24. A computer program product comprising a computer useable medium having computer useable program code for representing and configuring flexible and extensible presentation patterns based on fine-grained architectural building blocks (ABBs), said computer program product including:\ncomputer useable program code for defining ABBs;\ncomputer useable program code for modeling said ABBs in a uniform manner; and\ncomputer useable program code for creating at least one template using said ABBs, wherein said at least one template comprises at least one of pre-configured static characteristics and user-specified service characteristics.",
        "25. The computer program product of claim 24, wherein the computer useable program code for defining ABBs comprises code for defining a consumer ABB and a presentation controller ABB.",
        "26. The computer program product of claim 24, wherein the computer useable program code for, defining ABBs comprises code for defining a presentation ABB, a consumer profile ABB, an access control ABB, a format transformation ABB, a configuration rule ABB, and a cache ABB.",
        "27. The computer program product of claim 24, wherein the computer useable program code for defining ABBs comprises code for dividing responsibilities of a presentation module into sub-responsibility areas",
        "28. The computer program product of claim 27, wherein:\nsaid sub-responsibility areas comprise logical grouping of related cohesive functions; and\nsaid sub-responsibility areas are treated as ABBs.",
        "29. The computer program product of claim 24, wherein the computer useable program code for modeling ABBs in a uniform manner comprises code for using a unified framework to model said ABBs",
        "30. The computer program product of claim 29, wherein said unified framework facilitates development of unified interface descriptions for said ABBs.",
        "31. The computer program product of claim 24, wherein the computer useable program code for creating at least one template comprises code for pre-configuring static templates using ABBs for specific service scenarios.",
        "32. The computer program product of claim 24, wherein the computer useable program code for creating at least one template comprises code for:\nselecting appropriate ABBs based on said user-specified service characteristics; and\nconfiguring said appropriate ABBs during run time.",
        "33. A computer program product comprising a computer useable medium having computer useable program code for designing and managing fine-grained architectural building blocks (ABBs), said computer program product including:\ncomputer useable program code for identifying ABBs to compose an architecture for facilitating presentation and interaction between consumers and other elements in a solution;\ncomputer useable program code for analyzing said ABBs to monitor computing resources used by individual ABBs;\ncomputer useable program code for selecting a number of running instances of said ABBs based on (i) requests of a pertinent and (ii) available resources; and\ncomputer useable program code for managing lifecycles of ABBs.",
        "34. The computer program product of claim 33, wherein the computer useable program code for managing lifecycles of ABBs comprises:\ncomputer useable program code for defining presentation architecture templates;\ncomputer useable program code for selecting a presentation architecture template based on services scenarios;\ncomputer useable program code for configuring interfaces of said ABBs; and\ncomputer useable program code for applying interaction patterns for said ABBs with other modules; and enabling access control on said ABBs.",
        "35. The computer program product of claim 33, further comprising:\ncomputer useable program code for enabling granularity enablement of state management; and\ncomputer useable program code for handling exceptions."
    ]
}